<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CURD</title>
      <link href="/2023/04/17/DataBase/MySql/CURD/"/>
      <url>/2023/04/17/DataBase/MySql/CURD/</url>
      
        <content type="html"><![CDATA[<h2 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h2><h2 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h2><p>INSERT INTO table_name [column1,column2] VALUES [value1, value2]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE goods(</span><br><span class="line">`id`  INT,</span><br><span class="line">`goods_name` VARCHAR(10),</span><br><span class="line">price DECIMAL(8,2)</span><br><span class="line"></span><br><span class="line">)CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</span><br><span class="line"></span><br><span class="line">DESC goods;</span><br><span class="line"></span><br><span class="line">INSERT INTO `goods` (`id`, `goods_name`, `price`) </span><br><span class="line">Values (1001, &#x27;rtx-4090&#x27;, 20000.0);</span><br><span class="line">INSERT INTO `goods` (`id`, `goods_name`, `price`) </span><br><span class="line">VALUES (1002, &#x27;rtx-4080&#x27;, 10000.0);</span><br><span class="line"></span><br><span class="line">SELECT * FROM `goods`;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employe (id, user_name, brithday, job, salary)</span><br><span class="line">VALUES (001, &#x27;张三&#x27;, &quot;2001-01-02&quot;, &#x27;xxx&#x27;, 10000.0);</span><br><span class="line">INSERT INTO employe (id, user_name, brithday, job, salary)</span><br><span class="line">VALUE (002, &#x27;李四&#x27;, &#x27;2000-01-02&#x27;, &#x27;xxx&#x27;, 0.0);</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimages%5Cimage-20221112104637491.png" alt="image-20221112104637491"></p><ul><li><p>插入数据类型 必须  与字符串匹配</p><ul><li>如果字段为 <code>int</code> 数据项为<code>&#39;字符串&#39;</code> mysql会尝试进行转换，字符串字符必须为数字</li></ul></li><li><p>数据项的长度必须 在规定范围中</p></li><li><p>列1，列2 <code>VALUES</code>data1，data2   列出的字段 必须 与数据项一 一对应</p></li><li><p>date datetime 时间类型 本质是字符串 </p></li><li><p>数据项可以<code>null</code> 前提是字段没有设置<code>not null</code></p></li><li><p>添加多条数据</p><ul><li>&#96;&#96;&#96;mysql<br>INSERT INTO table_name (….)<br>VALUES (),(),()..;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 给表中所有字段添加数据项可以 不用列出其`column`</span><br><span class="line"></span><br><span class="line">- 字段中有默认值，可以不用添加，如果没有则会报错</span><br><span class="line"></span><br><span class="line">  ```mysql</span><br><span class="line">  CREATE TABLE test(</span><br><span class="line">  head CHAR(2),</span><br><span class="line">  `default` INT DEFAULT 1,</span><br><span class="line">  `end` CHAR(2)</span><br><span class="line">  )CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</span><br><span class="line">  </span><br><span class="line">  INSERT INTO test (head, &#x27;default&#x27;, &#x27;end&#x27;)</span><br><span class="line">  VALUES (&#x27;-&gt;&#x27;, &#x27;&lt;-&#x27;); # 列段有三个 实际添加了2个字段</span><br></pre></td></tr></table></figure></li></ul></li><li><p>PS， column 字段如果是关键字 用&#96;&#96; 包裹</p></li></ul><h2 id="UPDATE语句"><a href="#UPDATE语句" class="headerlink" title="UPDATE语句"></a>UPDATE语句</h2><ul><li><p>UPDATE table_name SET column &#x3D; data .. WHERE 条件;</p><p>没有使用where语句 表中所有字段值都会改变</p></li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employe</span><br><span class="line">SET salary = salary + 1000</span><br><span class="line">WHERE user_name = &#x27;张三&#x27;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimages%5Cimage-20221112113213852.png" alt="image-20221112113213852"></p><h2 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h2><ul><li>删除表中的某条   记录</li></ul><blockquote><p>DELETE FROM 表明</p><pre><code>WHERE 条件</code></pre></blockquote><ul><li>WHERE 条件不存在即删除所有记录</li></ul><p><img src="/%5Cimages%5Cimages%5Cimage-20221112150757034.png" alt="image-20221112150757034"></p><h2 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h2><h3 id="SELECT-查询语句"><a href="#SELECT-查询语句" class="headerlink" title="SELECT 查询语句"></a>SELECT 查询语句</h3><blockquote><p>SELECT [DISTINCT] (去除重复项) * | [列命1，列命2] FORM 表明</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE students( id INT NOT NULL DEFAULT 1, `name` VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;, chinese FLOAT NOT NULL DEFAULT 0.0, english FLOAT NOT NULL DEFAULT 0.0, math FLOAT NOT NULL DEFAULT 0.0 )CHARACTER SET utf8mb3 COLLATE utf8mb3_bin ENGINE INNOBASE; </span><br><span class="line">/*[15:17:14][16 ms]*/ ALTER TABLE students CHARACTER SET utf8mb4 COLLATE utf8mb4_bin; </span><br><span class="line">INSERT INTO students </span><br><span class="line">VALUES( 1, &#x27;张三&#x27;, 50, 50, 50),</span><br><span class="line">(2, &#x27;李四&#x27;, 40,40,40),</span><br><span class="line">(3, &#x27;李白&#x27;, 100,0,0),</span><br><span class="line">(4, &#x27;图灵&#x27;, 0, 100, 100),</span><br><span class="line">(5, &#x27;爱因斯坦&#x27;, 0, 100, 100),</span><br><span class="line">(6, &#x27;牛顿&#x27;, 0, 100, 100),</span><br><span class="line">(7, &#x27;我&#x27;, 30, 10, 10);</span><br></pre></td></tr></table></figure><ul><li><p>查询表中所有数据元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students;</span><br></pre></td></tr></table></figure></li><li><p>按列查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, `math` FROM students;</span><br></pre></td></tr></table></figure></li><li><p>查询中过滤重复数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT * FROM students;</span><br></pre></td></tr></table></figure></li></ul><h4 id="SELECT-查询结果运算"><a href="#SELECT-查询结果运算" class="headerlink" title="SELECT 查询结果运算"></a>SELECT 查询结果运算</h4><ul><li>使用表达式对查询的列进行运算</li></ul><blockquote><pre><code>    SELECT * | &#123;column1 | expression , column2 | expression ..&#125;            FROM table_name；</code></pre></blockquote><ul><li><p>SLECT 查询中使用别名 as</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name as new_name FROM table_name;</span><br></pre></td></tr></table></figure></li></ul><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, (`math` + `english` + `chinese`) AS &#x27;总成绩&#x27; FROM students;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimages%5Cimage-20221112155104264.png" alt="image-20221112155104264"></p><h4 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h4><ul><li><img src="/%5Cimages%5Cimages%5Cimage-20221112155319919.png" alt="image-20221112155319919"></li></ul><h4 id="ORDER-BY-子句"><a href="#ORDER-BY-子句" class="headerlink" title="ORDER BY 子句"></a>ORDER BY 子句</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112162230170.png" alt="image-20221112162230170"></p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, (math + english + chinese) AS socre</span><br><span class="line">FROM students</span><br><span class="line">ORDER BY socre DESC;</span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="Count-合计-x2F-统计函数"><a href="#Count-合计-x2F-统计函数" class="headerlink" title="Count 合计&#x2F;统计函数"></a>Count 合计&#x2F;统计函数</h3><p><img src="/%5Cimages%5Cimages%5Cimage-20221112163021546.png" alt="image-20221112163021546"></p><p>count(column) 统计单个列时会 排除为null的记录 而如果是 查询表中全部 有一条记录为空 也会算做一条记录</p><p>与底层逻辑有关</p><ul><li><p>统计表中有多少条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) FROM students;</span><br></pre></td></tr></table></figure></li><li><p>统计总数学＞90的有多少人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(`name`) FROM students </span><br><span class="line">WHERE math &gt; 90</span><br><span class="line">ORDER BY `math`</span><br></pre></td></tr></table></figure></li></ul><h4 id="SUM（）"><a href="#SUM（）" class="headerlink" title="SUM（）"></a>SUM（）</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112164038972.png" alt="image-20221112164038972"></p><ul><li>只对数值有效，用法和count()一致</li></ul><h4 id="AVG（）"><a href="#AVG（）" class="headerlink" title="AVG（）"></a>AVG（）</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112164528616.png" alt="image-20221112164528616"></p><p> MAX（）&amp; MIN（）</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/%5Cimages%5Cimages%5Cimage-20221112165955897.png" alt="image-20221112165955897"></h4><h4 id="GROUP-BY-amp-HAVING（）"><a href="#GROUP-BY-amp-HAVING（）" class="headerlink" title="GROUP BY &amp; HAVING（）"></a>GROUP BY &amp; HAVING（）</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112170304566.png" alt="image-20221112170304566"></p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql</title>
      <link href="/2023/04/17/DataBase/MySql/MySql/"/>
      <url>/2023/04/17/DataBase/MySql/MySql/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql"><a href="#MySql" class="headerlink" title="MySql "></a>MySql </h1><h2 id="1-认识Mysql"><a href="#1-认识Mysql" class="headerlink" title="1.认识Mysql "></a>1.认识Mysql </h2><ol><li>MySql 三层结构</li></ol><ul><li><p>DBMS 数据库管理系统</p><ul><li>DataBase1<ul><li>表</li><li>表2…..</li></ul></li><li>DataBase2<ul><li>表1</li><li>表2…..</li></ul></li><li>DataBase……</li></ul></li><li><p>MySql 不区分大小写</p></li></ul><p>我们所说的数据库包含上述三层结构，当然除了上述内容外还有些其他功能结构。</p><p>客户端——&gt;    通过port 3306（默认） —–&gt;数据库（数据存储的各种数据）</p><p>数据库分为；</p><ol><li><p>关系型数据库</p><p> 通过表和表之间，行和列之间的关系进行数据的存储</p></li><li><p>非关系型数据库</p><p>Redis，MongDB</p></li></ol><h2 id="2-创建一个数据库"><a href="#2-创建一个数据库" class="headerlink" title=" 2.创建一个数据库"></a> 2.创建一个数据库</h2><ul><li>CHARACTER SET：指定数据采用的字符集如果不指定 默认为uft_8</li><li>COLLATE：指定数据可字符集的校对规则(常用utf_bin【严格区分大小写】、utf8_general_ci  【不区大小写 默认】)</li></ul><hr><p>注意:</p><p>​校对 不区分大小写，如果表中数据存在相同字段但大小写不同，只会显示一条结果；</p><hr><blockquote><p>CREATE DATABASE [IF NOT EXISTS] name CHARACTER SET 字符集名称 COLLATE 校对规则</p><p>[IF NOT EXISTS] 如果DB存在不会执行</p><p>省略后如果创建书库存在则会报错，</p></blockquote><p>创建数据库&amp;删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#创建数据库  不指定字符集 和 校对规则 则默认 一般为utf8(mb3)  新版的utf8mb4</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db</span><br><span class="line"></span><br><span class="line">#删除数据库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE db</span><br><span class="line"></span><br><span class="line">#创建一个使用utf8mb4 的字符集 的 hsp_da02数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_da02 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4</span><br><span class="line"></span><br><span class="line">#创建一个使用utf8mb4  校对规则为utf8mb4_bin 不区分大小写</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_da03 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#显数DB</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br><span class="line">#显示创建的数据库语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE db_name</span><br><span class="line">#删除 DB</span><br><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] name </span><br></pre></td></tr></table></figure><h2 id="3-备份数据库"><a href="#3-备份数据库" class="headerlink" title="3.备份数据库"></a>3.备份数据库</h2><p>Dos命令行</p><p>​备份数据库</p><blockquote><p>mysqldump -u user_name -p -B DB1 DB2 … &gt; file_name.sql     &#x2F;&#x2F; -B 必须大写</p></blockquote><p>​备份数据库中的表</p><blockquote><p>mysqldump -u user_name -p DB1 tb1 tb2 … &gt; file_name.sql</p></blockquote><p>注意：</p><ol><li>添加环境</li><li>不要在sql控制台输入 会报错</li><li>-p 后密码不要输入  回车后输入</li></ol><p>恢复数据库</p><blockquote><p>Source file_name</p></blockquote><hr><h2 id="4-创建表"><a href="#4-创建表" class="headerlink" title="4.创建表"></a>4.创建表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE (</span><br><span class="line">name datatype,</span><br><span class="line">    name2 datatype,</span><br><span class="line">...</span><br><span class="line">)character set 字符集 collate 校对规则 engine 引擎</span><br><span class="line"></span><br><span class="line">#character set 默认与数据库一致</span><br><span class="line">#collate 默认与数据库一致</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一张员工基本信息的表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `emp` (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span> (<span class="number">32</span>),</span><br><span class="line">  sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">  birthday <span class="type">DATE</span>,</span><br><span class="line">  entry_date DATETIME,</span><br><span class="line">  job <span class="type">VARCHAR</span> (<span class="number">32</span>),</span><br><span class="line">  salary <span class="type">DECIMAL</span> (<span class="number">9</span>, <span class="number">4</span>),</span><br><span class="line">  `resume` TEXT</span><br><span class="line">) CHARSET utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin ENGINE INNODB ;</span><br><span class="line"></span><br><span class="line">#添加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp`</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">008</span>, <span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2050-10-10&#x27;</span>, <span class="string">&#x27;2050-10-10&#x27;</span>, <span class="string">&#x27;工作&#x27;</span>, <span class="number">10.2323</span>, <span class="string">&#x27;描述&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>创建表示注意确认当前是在那个数据库</p><h2 id="5-修改表"><a href="#5-修改表" class="headerlink" title="5.修改表"></a>5.修改表</h2><p>修改表的基本操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#添加列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line"><span class="keyword">ADD</span> (<span class="keyword">column</span> datatype [<span class="keyword">DEFAULT</span> expr]</span><br><span class="line">....);</span><br><span class="line">#修改列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line">MODIFY colum datatype [<span class="keyword">DEFAULT</span> exper];</span><br><span class="line"></span><br><span class="line">#删除列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">column</span>;</span><br><span class="line"></span><br><span class="line">#查看表的结构</span><br><span class="line"><span class="keyword">desc</span> tablename</span><br><span class="line"></span><br><span class="line">#修改表名</span><br><span class="line">Rename <span class="keyword">table</span> tablename <span class="keyword">to</span> New_tablename</span><br><span class="line"></span><br><span class="line">#修改表的字符集</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="type">character</span> <span class="keyword">set</span> 字符集;</span><br><span class="line"></span><br><span class="line">#修改字段名称及其默认值</span><br></pre></td></tr></table></figure><ul><li><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">-- 创建一张员工基本信息的表</span><br><span class="line">CREATE TABLE `employee` (</span><br><span class="line">  id INT,</span><br><span class="line">  `name` VARCHAR (32),</span><br><span class="line">  sex CHAR(1),</span><br><span class="line">  birthday DATE,</span><br><span class="line">  entry_date DATETIME,</span><br><span class="line">  job VARCHAR (32),</span><br><span class="line">  salary DECIMAL (9, 4),</span><br><span class="line">  `resume` TEXT</span><br><span class="line">) CHARSET utf8mb4 COLLATE utf8mb4_bin ENGINE INNODB ;</span><br><span class="line"></span><br><span class="line">#增加一个字段 （列）iamge</span><br><span class="line">ALTER TABLE employee</span><br><span class="line">ADD image VARCHAR(32) NOT NULL</span><br><span class="line">DEFAULT &#x27;&#x27;;</span><br><span class="line">#增加多个字段</span><br><span class="line">#增加一个字段 （列）</span><br><span class="line">ALTER TABLE employee </span><br><span class="line">  ADD (</span><br><span class="line">    image2 VARCHAR (32) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">    image3 VARCHAR (32) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">  ) ;</span><br><span class="line"></span><br><span class="line">-- 查询表中字段信息</span><br><span class="line">DESC employee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#修改列中的数据类型 默认改为not null 必须给定一个默认值</span><br><span class="line">-- change 可以替换 modify</span><br><span class="line">ALTER TABLE employee </span><br><span class="line">  MODIFY `name` VARCHAR (33)NULL,</span><br><span class="line">  MODIFY `sex` VARCHAR(1) NOT NULL DEFAULT &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除表中多列</span><br><span class="line">ALTER TABLE employee</span><br><span class="line">DROP image2,</span><br><span class="line">DROP image,</span><br><span class="line">DROP image3;</span><br><span class="line"></span><br><span class="line">#修改表名称</span><br><span class="line">RENAME TABLE employee TO emp;</span><br><span class="line"></span><br><span class="line">#修改表的字符集和校对</span><br><span class="line">ALTER TABLE emp CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</span><br><span class="line"></span><br><span class="line">#修改列中的数据类型</span><br><span class="line">ALTER TABLE emp</span><br><span class="line">CHANGE `name` `user_name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2023/04/17/DataBase/MySql/JDBC/"/>
      <url>/2023/04/17/DataBase/MySql/JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>JDBC为了访问不同数据库提供同一接口，为使用者屏蔽了细节问题</p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务</title>
      <link href="/2023/04/17/DataBase/MySql/%E4%BA%8B%E5%8A%A1/"/>
      <url>/2023/04/17/DataBase/MySql/%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Transaction-事务"><a href="#Transaction-事务" class="headerlink" title="Transaction 事务"></a>Transaction 事务</h2><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.事务就是由单独单元的一个或多个sql语句组成，在这个单元中，每个sql语句都是相互依赖的。而整个单独单元是作为一个不可分割的整体存在，类似于物理当中的原子（一种不可分割的最小单位）。</span><br><span class="line">2.这种原子操作不 可分割，要么都执行成功，要么都不成功</span><br><span class="line">3.只有innodb支持事务相关操作</span><br></pre></td></tr></table></figure><p>查看存储引擎：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW engines</span><br></pre></td></tr></table></figure><h2 id="事务的四个特性（ACID）"><a href="#事务的四个特性（ACID）" class="headerlink" title="事务的四个特性（ACID）"></a>事务的四个特性（ACID）</h2><p>这部分特性和多线程很相似：</p><ul><li><p>原子性（Atomicity）：事务操作都是一个整体，不可分割</p></li><li><p>一致性（Consistency）：事务操作数据库，状态只有两种，提交后的状态，事务开启前的状态，中间索引操作都不可见</p></li><li><p>隔离性（Isolation）：事务相互之间不因被影响</p></li><li><p>持久性（Durability）：一个事务提交后对数据库的影响是永久的</p></li></ul><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>当执行事务操作时，mysql会在表上加锁，防止其他用户更改表的数据，和同步锁功能相似</p><h2 id="事务的操作"><a href="#事务的操作" class="headerlink" title="事务的操作"></a>事务的操作</h2><p>开始一个事务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION</span><br><span class="line"># set autocommit = off   也可以开启事务</span><br></pre></td></tr></table></figure><p>设置保存点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAVEPOINT name</span><br></pre></td></tr></table></figure><p>回退事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ROLLBACK TO name</span><br><span class="line">ROLLBACK # 回退到事务开始</span><br></pre></td></tr></table></figure><p>提交事务：</p><p>提交事务后自动删除保存点，并释放锁，数据生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMIT </span><br></pre></td></tr></table></figure><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>先来了解下名词：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脏读：一个事务读取了另一个事务还没有提交的dml操作时，产生脏读（多线程常见问题）；</span><br><span class="line">不可重复读：同一查询在同一事务多次进行，由于有其他的事务所做的修改或删除操作，导致前者查询结果每次都不同，此时叫做不可重复读；</span><br><span class="line">幻读：同一查询在同一事务多次进行，由于其他提交事务所做的插入操作，每次返回不同结果集，此时发送幻读；</span><br></pre></td></tr></table></figure><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>mysql事务隔离级别有一下4种</p><ul><li>READ-UNCOMMITTED 允许读未提交</li><li>READ-COMMITTED只允许读已提交</li><li>REPEATABLE-READ  可重复读</li><li>SERIALIZABLE  可串行化</li></ul><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>是否加锁</th></tr></thead><tbody><tr><td>读取未提交</td><td>会出现</td><td>会出现</td><td>会出现</td><td>不加锁</td></tr><tr><td>读取已提交</td><td>X</td><td>会出现</td><td>会出现</td><td>不加锁</td></tr><tr><td>可重复读</td><td>X</td><td>X</td><td>会出现</td><td>不加锁</td></tr><tr><td>可串行化</td><td>X</td><td>X</td><td>X</td><td>加锁</td></tr></tbody></table><p>查询当前事务隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select @@transaction_isolation;</span><br><span class="line">#查询全局隔离级别</span><br><span class="line">select @@global.transaction_isolation; </span><br></pre></td></tr></table></figure><p>设置隔离等级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#设置当前mysql连接的隔离级别:</span><br><span class="line">set session transaction isolation level read uncommitted;</span><br><span class="line">#设置数据库系统的全局的隔离级别:</span><br><span class="line">set global transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure><p>在目录下的my.ini配置文件也可以设置默认隔离等级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">transaction-isolation = 隔离等级</span><br></pre></td></tr></table></figure><h2 id="表类型和存储引擎"><a href="#表类型和存储引擎" class="headerlink" title="表类型和存储引擎"></a>表类型和存储引擎</h2><p>MySql表类型由存储引擎（Storage Engines）决定。</p><p>Mysql主要支持以下常用六种类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CSV</span><br><span class="line">MEMORY</span><br><span class="line">ARCHIVE</span><br><span class="line">MRG_MYISAM</span><br><span class="line">MYISAM</span><br><span class="line">InnoDB</span><br></pre></td></tr></table></figure><p>这六种引擎分为两类：</p><ul><li>事务安全型(innodb)</li><li>非事务安全型(myisam, memory..)</li></ul><p>查看所有引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES</span><br></pre></td></tr></table></figure><p>修改表的存储引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ENGINE = enginename</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密和系统函数</title>
      <link href="/2023/04/17/DataBase/MySql/%E5%8A%A0%E5%AF%86%E5%92%8C%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0/"/>
      <url>/2023/04/17/DataBase/MySql/%E5%8A%A0%E5%AF%86%E5%92%8C%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="加密和系统函数"><a href="#加密和系统函数" class="headerlink" title="加密和系统函数"></a>加密和系统函数</h2><p><code>user()</code> 查询用户 以及IP信息</p><p><code>database()</code>查询当前使用数据库名称</p><p><code>md5(str)</code>为指定字符串算出一个md5 32位的字符串，一般用于密码加密</p><p><code>password(str)</code> mysql默认的加密函数  新版本没得</p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外连接</title>
      <link href="/2023/04/17/DataBase/MySql/%E5%A4%96%E8%BF%9E%E6%8E%A5/"/>
      <url>/2023/04/17/DataBase/MySql/%E5%A4%96%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>先了解一下内连接:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">合并两个具有同一列两个以上表的行，通过WHERE条件进行匹配（只会得到匹配成功的行，这样的连接我称为内连接，比较常用）</span><br></pre></td></tr></table></figure><p>通常避免笛卡尔集我们使用where条件限制过滤，但其中有些数据并不存在于前表或后表中，它单独存在于自己表内。</p><p>外连接定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两个表在连接过程中除了返回满足连接条件的行以外还返回左（或右）表中不满足条件的 行 ，这种连接称为左（或右） 外连接。没有匹配的行时, 结果表中相应的列为空(NULL)。（查询所有数据一定会用到外连接）</span><br></pre></td></tr></table></figure><p>左外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">左侧表行完全显示，我称为左外连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#语法:</span><br><span class="line">SELECT ...</span><br><span class="line">FROM left_table LEFT JOIN right_table </span><br><span class="line">ON 条件</span><br></pre></td></tr></table></figure><p>右外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">右侧表行完全显示，我称为右外连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#语法 </span><br><span class="line">SELECT ...</span><br><span class="line">FROM left_table RIGHT JOIN right_table </span><br><span class="line">ON 条件</span><br></pre></td></tr></table></figure><p>满外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满外连接的结果 = 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</span><br></pre></td></tr></table></figure><p>由于mysql不支持FULL JOIN，于是我们需要用 FULL OUTER JOIN tablename ON ex代替。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多表查询</title>
      <link href="/2023/04/17/DataBase/MySql/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/04/17/DataBase/MySql/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>测试数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#tables</span><br><span class="line"></span><br><span class="line">CREATE TABLE `emp`( `empno` INT NOT NULL, `ename` VARCHAR(32) NOT NULL, `job` VARCHAR(32) NOT NULL, `mgr` INT, `hiredate` VARCHAR(32) NOT NULL, `sal` DECIMAL(7, 2) NOT NULL, `comm` DECIMAL(6, 2), `deptno` INT NOT NULL )CHAR SET utf8mb4 COLLATE utf8mb4_bin; </span><br><span class="line">CREATE TABLE dept( deptno INT NOT NULL, dname VARCHAR(32) NOT NULL, loc VARCHAR(32) NOT NULL )CHAR SET utf8mb4 COLLATE utf8mb4_bin; </span><br><span class="line">CREATE TABLE salgrade( grade INT NOT NULL, losal DECIMAL(6, 2), hisal DECIMAL(7, 2) )CHAR SET utf8mb4 COLLATE utf8mb4_bin; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#test data</span><br><span class="line"></span><br><span class="line">INSERT INTO `emp` (`empno`, `ename`, `job`, `mgr`, `hiredate`, `sal`, `comm`, `deptno`) VALUES</span><br><span class="line">(7369, &#x27;SMITH&#x27;, &#x27;CLERK&#x27;, 7902, &#x27;1980-12-17&#x27;, 800.00, NULL, 20),</span><br><span class="line">(7499, &#x27;ALLEN&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-02-20&#x27;, 1600.00, 300.00, 30),</span><br><span class="line">(7521, &#x27;WARD&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-02-22&#x27;, 1250.00, 500.00, 30),</span><br><span class="line">(7566, &#x27;JONES&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-04-02&#x27;, 2975.00, NULL, 20),</span><br><span class="line">(7654, &#x27;MARTIN&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-09-28&#x27;, 1250.00, 1400.00, 30),</span><br><span class="line">(7698, &#x27;BLAKE&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-05-01&#x27;, 2850.00, NULL, 30);</span><br><span class="line">INSERT INTO `dept` (`deptno`, `dname`, `loc`) VALUES</span><br><span class="line">(10, &#x27;ACCOUNTING&#x27;, &#x27;NEW YORK&#x27;),</span><br><span class="line">(20, &#x27;RESEARCH&#x27;, &#x27;DALLAS&#x27;),</span><br><span class="line">(30, &#x27;SALES&#x27;, &#x27;CHICAGO&#x27;),</span><br><span class="line">(40, &#x27;OPERATIONS&#x27;, &#x27;BOSTON&#x27;),</span><br><span class="line">(50, &#x27;MARKETING&#x27;, &#x27;LOS ANGELES&#x27;),</span><br><span class="line">(60, &#x27;IT&#x27;, &#x27;SAN FRANCISCO&#x27;);</span><br><span class="line">INSERT INTO `salgrade` (`grade`, `losal`, `hisal`) VALUES</span><br><span class="line">(1, 700.00, 1200.00),</span><br><span class="line">(2, 1201.00, 1400.00),</span><br><span class="line">(3, 1401.00, 2000.00),</span><br><span class="line">(4, 2001.00, 3000.00),</span><br><span class="line">(5, 3001.00, 4000.00),</span><br><span class="line">(6, 4001.00, 5000.00);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="笛卡尔集"><a href="#笛卡尔集" class="headerlink" title="笛卡尔集"></a>笛卡尔集</h2><p>场景1：查询员工信息和所在部门信息</p><p><code>查询多个表会产生此问题</code>:</p><p>员工表中的每一行数据都会与部门表中每一行数据  拼接形成一行新的数据</p><p>员工表和部门表各有6行数据 因此此查询会生成36行数据的一个新表，这种多表查询问题称为<code>笛卡尔集</code>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM emp, dept </span><br></pre></td></tr></table></figure><p>解决此问题添加一个<code>过滤条件</code>:</p><p>员工部门编号和部门表编号一致时才是我们希望得到的数据</p><p>此时表会有两个字段都为deptno，一个是员工表的一个是部门表的，select查询字段时指定一个就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename, emp.deptno</span><br><span class="line">FROM emp, dept </span><br><span class="line">WHERE emp.`deptno` = dept.`deptno` </span><br></pre></td></tr></table></figure><p><code>N</code>个表至少需要<code>N-1</code>个 过滤条件才不会出现笛卡尔集！</p><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>场景2：查询工资等级在3到5所有员工信息以及部门信息，并按工资升序</p><p>此时需要查询3个表，至少需要2两个条件 </p><p>1.部门编号连接员工表和部门表</p><p>2.员工工资连接工资等级表</p><p>最后加入 等级3到等级5条件  并升序   得到结果，sql代码如下；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECTename, sal</span><br><span class="line">FROM emp, dept, salgrade </span><br><span class="line">WHERE emp.`deptno` = dept.`deptno` </span><br><span class="line">AND  emp.`sal` BETWEEN losal AND hisal </span><br><span class="line">AND salgrade.`grade` </span><br><span class="line">BETWEEN 3 AND 5</span><br><span class="line">ORDER BY sal;</span><br></pre></td></tr></table></figure><p>一表分多表查询</p><p>场景3：输出员工和他上级的信息</p><p>上级和下级都在员工表中</p><p>相当于把一个表分为两个，为了表示两个相同表，这里需要使用别名，让系统好区分</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT worker.`empno` AS &#x27;员工&#x27;, boss.`ename` AS &#x27;上级&#x27; # 查询的列也要使用别名查询</span><br><span class="line">FROM emp worker, emp boss # worker boss 相当于两个相同的表</span><br><span class="line">WHERE worker.`mgr` = boss.`empno`</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>嵌套查询，将查询结果作为另一查询的条件或来源</p><h2 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h2><p>场景1：查询某一员工所在部门的同事名字</p><p>首先查询员工部门号</p><p>将查询结果作为另一查询的条件，sql代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename, deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE deptno = (SELECT deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE emp.`ename` = &#x27;SMITH&#x27;) </span><br><span class="line">AND ename != &#x27;SMITH&#x27;</span><br></pre></td></tr></table></figure><p>场景2：查询部门编号为30，工作为推销员的员工有哪些</p><p>1.查询部门编号为30的员工</p><p>2.在生成的表中查询条件为推销员的员工</p><p>sql代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT temp.ename, temp.job, temp.deptno</span><br><span class="line">FROM (</span><br><span class="line">SELECT ename, job, deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE deptno = 30</span><br><span class="line">) temp</span><br><span class="line">WHERE temp.job = &#x27;SALESMAN&#x27;;</span><br></pre></td></tr></table></figure><h2 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h2><p>把一个子查询结果作为一个临时表来使用，完成另一个查询操作</p><p>场景：查询每一个部门高出部门平均工资人的资料</p><p>1.首先使用group by 得到部门平均工资</p><p>2.将得到临时表与员工表合成一个新表，加入where条件 &gt; avg_sal</p><p>代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT emp.`ename`, emp.`empno`,emp.`deptno`, emp.`sal`</span><br><span class="line">FROM emp, (SELECT AVG(sal) AS sal, deptno</span><br><span class="line">FROM emp</span><br><span class="line">GROUP BY deptno) avg_sal</span><br><span class="line">WHERE emp.`sal` &gt; avg_sal.sal AND emp.`deptno` = avg_sal.deptno</span><br></pre></td></tr></table></figure><h2 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h2><p>mysql中in常用于where表达式中,其作用是查询某个范围内的数据；</p><p>场景1：查询与30号部门工作职业相同的员工不包括30号部门</p><p>1.首先查询30部门下所有职业 并去重 </p><p>2.得到多条数据使用IN 查询 </p><p>代码如下： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename , deptno, job, deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE job IN (</span><br><span class="line">SELECT DISTINCT job</span><br><span class="line">FROM emp</span><br><span class="line">WHERE deptno = &#x27;30&#x27;)</span><br><span class="line">AND deptno != &#x27;30&#x27;</span><br></pre></td></tr></table></figure><h2 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h2><h2 id="ANY"><a href="#ANY" class="headerlink" title="ANY"></a>ANY</h2>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程控制函数</title>
      <link href="/2023/04/17/DataBase/MySql/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0/"/>
      <url>/2023/04/17/DataBase/MySql/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><p><code>if(expr1, expr2, expr3)</code> 判断函数，expr1为true 返回expr2的值，否则返回exp3的值</p><p><code>ifnull(expr1, expr2)</code>expr1判断为空，则返回expr2的值 ，否则返回expr1的值</p><p><code>WHEN expr1 THEN expr2 WHEN expr3 THEN expr4 ELSE expr5 END</code> 相当于多重分支当expr1为真 执行expre2结束后面内容，否则执行下一个when ..then</p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户管理</title>
      <link href="/2023/04/17/DataBase/MySql/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
      <url>/2023/04/17/DataBase/MySql/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>mysql用户存储在系统数据库mysql中user表中</p><p>重要字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host：允许登录的位置</span><br><span class="line">user：用户名</span><br><span class="line">authentication：加密后的密码</span><br></pre></td></tr></table></figure><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;允许登录位置&#x27; IDENTIFIED BY &#x27;密码&#x27;</span><br></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#x27;temp_user&#x27;@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#8.0的语法，set password=password()老版本可用</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;111111&#x27;</span><br></pre></td></tr></table></figure><h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant 权限列表 on 库.对象名 to 用户名@登录地址 [(同时修改密码) IDENTIFIED BY 密码]</span><br><span class="line">#低版本需要刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">所有数据库的所有对象 *.*</span><br><span class="line">库.* ：某个数据库中的所有对象</span><br></pre></td></tr></table></figure><p>比如给user用户 shop_db库中goods对象的权限 并修改密码为123</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant select on shop_db.goods &#x27;user&#x27;@&#x27;localhost&#x27; identified by &#x27;123&#x27;</span><br></pre></td></tr></table></figure><p>回收权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE SELECT, .. [ALL] ON 库.对象 FROM &#x27;name&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><p>创建用户不指定host，则为%，表示所有IP都有登录权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER all_host_login;</span><br></pre></td></tr></table></figure><p>指定具体IP段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;all_host_login&#x27;@&#x27;192.168.1.%&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表复制</title>
      <link href="/2023/04/17/DataBase/MySql/%E8%A1%A8%E5%A4%8D%E5%88%B6/"/>
      <url>/2023/04/17/DataBase/MySql/%E8%A1%A8%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="表复制"><a href="#表复制" class="headerlink" title="表复制"></a>表复制</h2><p>蠕虫复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有一张emp员工表，要将部分数据迁移至new_emp表中，代码如下：</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO new_emp(empno, ename, job, sal)</span><br><span class="line">SELECT empno, ename, job, sal</span><br><span class="line">FROM emp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自添加 自我复制</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO new_emp</span><br><span class="line">SELECT * FROM new_emp;</span><br></pre></td></tr></table></figure><h2 id="如何删除一张表中重复记录"><a href="#如何删除一张表中重复记录" class="headerlink" title="如何删除一张表中重复记录"></a>如何删除一张表中重复记录</h2><p>以上面表为例</p><p>简单的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.LIKE关键字构建一个与原本表结构一样的distinct_emp</span><br><span class="line">2.向distinct_emp 插入new_emp表中数据 使用DISTINCT关键字去重</span><br><span class="line">3.删除原本new_emp表</span><br><span class="line">4.distinct_emp 改名</span><br></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#1</span><br><span class="line">CREATE TABLE distinct_emp LIKE new_emp;</span><br><span class="line"></span><br><span class="line">#2</span><br><span class="line">INSERT INTO distinct_emp </span><br><span class="line">SELECT DISTINCT * FROM new_emp;</span><br><span class="line">#3</span><br><span class="line">DROP TABLE new_emp;</span><br><span class="line">#4</span><br><span class="line">ALTER TABLE distinct_emp</span><br><span class="line">RENAME new_emp;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM new_emp;</span><br></pre></td></tr></table></figure><h2 id="UNION-和-UNION-ALL"><a href="#UNION-和-UNION-ALL" class="headerlink" title="UNION  和  UNION ALL"></a>UNION  和  UNION ALL</h2><p>联合，合并查询</p><p>用于将两个表或者两个查询结果连接成一个整体显示出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用使严格遵守一下3点</span><br><span class="line">1、相同数量的列，同时名称也要相等；</span><br><span class="line">2、列也必须拥有相似的数据类型；</span><br><span class="line">3、同时，每条 SELECT 语句中的列的顺序必须相同。</span><br></pre></td></tr></table></figure><p>union 去重合并（每个字段完全相等 判定为重复元素）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM new_emp</span><br><span class="line">UNION</span><br><span class="line">SELECT empno, ename, job, sal FROM emp;</span><br></pre></td></tr></table></figure><p>union all不去重合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM new_emp</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT empno, ename, job, sal FROM emp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">区别：</span><br><span class="line">union 会自动压缩多个结果集合中的重复结果，相对的效率相对较低</span><br><span class="line">union all 则将所有的结果全部显示出来，不管是不是重复。 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引</title>
      <link href="/2023/04/17/DataBase/MySql/%E7%B4%A2%E5%BC%95/"/>
      <url>/2023/04/17/DataBase/MySql/%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>为指定的字段建立索引，数据规模很大的情况下查询速度会提升</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name ON table(column)</span><br></pre></td></tr></table></figure><p>复合索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name ON table(column1, colunm2)</span><br></pre></td></tr></table></figure><p>唯一索引（如果确定字段不重复优先使用唯一索引）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX index_name ON table(column)</span><br></pre></td></tr></table></figure><p>在原表基础上添加索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE goods</span><br><span class="line">ADD INDEX index_name(column1, ..)</span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用索引字段构建了一棵BT</span><br></pre></td></tr></table></figure><p>缺陷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.磁盘占用变大</span><br><span class="line">2.对删除，插入，更改会对索引进行维护，对执行速度有影响</span><br></pre></td></tr></table></figure><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1，主键索引，主键自动视为主键索引</span><br><span class="line">2.UNIQUE唯一索引</span><br><span class="line">3.INDEX普通索引</span><br><span class="line">4.FULLTEXT全文索引</span><br></pre></td></tr></table></figure><p>添加全文索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )</span><br></pre></td></tr></table></figure><p>删除索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_name ON table_name</span><br></pre></td></tr></table></figure><p>修改索引先删除后添加即可：</p><p>查询索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM table_name</span><br><span class="line">SHOW KEYS FROM table_name</span><br><span class="line">DESC table_name</span><br></pre></td></tr></table></figure><h2 id="适合添加索引字段"><a href="#适合添加索引字段" class="headerlink" title="适合添加索引字段"></a>适合添加索引字段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.频繁作为条件来查询的字段</span><br><span class="line">2.不容易重复的字段</span><br><span class="line">3.不常更新的字段</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约束</title>
      <link href="/2023/04/17/DataBase/MySql/%E7%BA%A6%E6%9D%9F/"/>
      <url>/2023/04/17/DataBase/MySql/%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h2 id="PRIMARY-KEY-主键"><a href="#PRIMARY-KEY-主键" class="headerlink" title="PRIMARY KEY 主键"></a>PRIMARY KEY 主键</h2><p>主键列必须满足以下2个规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.primary key 字段不允许重复且不能为null</span><br><span class="line">2.一张表只能有一个主键，但可为复合主键</span><br></pre></td></tr></table></figure><p>约束声明方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE students(</span><br><span class="line">id INT PRIMARY KEY,# 主键</span><br><span class="line">`name` VARCHAR(32)</span><br><span class="line">  #也可以声明在最后 PRIMARY KEY(&#x27;id&#x27;) </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>复合主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE students(</span><br><span class="line">id INT,</span><br><span class="line">`name` VARCHAR(32),</span><br><span class="line">PRIMARY KEY(id, `name`) #id 和 name 共同组成主键</span><br><span class="line">)</span><br><span class="line"># 复合主键两个列都相同，才视为相同字段</span><br><span class="line"># 任何主键字段都不允许为null</span><br></pre></td></tr></table></figure><h2 id="NOT-NULL非空"><a href="#NOT-NULL非空" class="headerlink" title="NOT NULL非空"></a>NOT NULL非空</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义非空字段不允许添加null</span><br></pre></td></tr></table></figure><h2 id="UNIQUE唯一"><a href="#UNIQUE唯一" class="headerlink" title="UNIQUE唯一"></a>UNIQUE唯一</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不允许添加重复的数据，但可以添加多个null</span><br></pre></td></tr></table></figure><h2 id="FOREIGN-KEY-外键"><a href="#FOREIGN-KEY-外键" class="headerlink" title="FOREIGN KEY 外键"></a>FOREIGN KEY 外键</h2><p>用于定义主表和从表的关系约束</p><p>外键使用规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.外键约束要定义在从表上</span><br><span class="line">2.主表列必须存在PRIMAR KEY 或者 UNIQUE 约束</span><br><span class="line">3.外键列数据必须在主表中对应列存在</span><br></pre></td></tr></table></figure><p>定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOREIGN KEY (从表字段) REFERENCES 主表名(primary key | unique column)</span><br></pre></td></tr></table></figure><p>注意事项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.一旦建立外键关系，数据不能随意删除：</span><br><span class="line">主表不可以删除与从表数据有关系的行；</span><br><span class="line">同样从表不能插入外键不存在的值，但可以null（前提外键字段允许为null）；</span><br><span class="line">2.表的类型必须是innode，才支持外键约束</span><br><span class="line">3.外键约束和主表中字段类型需要一致（长度可不同）</span><br></pre></td></tr></table></figure><h2 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h2><p>以下代码限制sex列，只能为check约束的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHECK( sex in (&#x27;男&#x27;, &#x27;女&#x27;))</span><br></pre></td></tr></table></figure><p>ENUM 也能实习类似的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENUM(&#x27;男&#x27;, &#x27;女&#x27;)</span><br></pre></td></tr></table></figure><h2 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h2><p>设置自增长的字段，会随添加数据而自动增长</p><p>使用规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.自增长一般配和PRIMARY KEY使用</span><br><span class="line">2.自增长也可以单独使用但需要配和UNIQUE</span><br><span class="line">3.自增长字段也可以为浮点型</span><br></pre></td></tr></table></figure><p>自增长默认从1开始，也可以指定开始位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name auto_increment = 10;</span><br></pre></td></tr></table></figure><p>添加数据到自增长字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.null和0指定为自增长字段时，系统为其赋值</span><br><span class="line">2.指定自增长字段值，则为指定的值（下次添加默认自增值为当前最大值+1）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视图</title>
      <link href="/2023/04/17/DataBase/MySql/%E8%A7%86%E5%9B%BE/"/>
      <url>/2023/04/17/DataBase/MySql/%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是一个虚拟表，其内容由查询定义，其数据来自基表，是基表的映射。</p><p>通过视图可以修改基表数据，基表的改变也会影响视图的数据。</p><p>用户  —-操作—–&gt; view &lt;—–关联—–&gt; 基表</p><p>创建视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW view_name AS SELECT ..;</span><br></pre></td></tr></table></figure><p>修改视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER VIEW view_name AS SELECT ..;</span><br></pre></td></tr></table></figure><p>显示视图创建指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE VIEW view_name</span><br></pre></td></tr></table></figure><p>查询视图结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC view_name</span><br></pre></td></tr></table></figure><p>删除视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW view1, view2</span><br></pre></td></tr></table></figure><p>以员工表为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 创建视图</span><br><span class="line">CREATE VIEW emp_view </span><br><span class="line">AS SELECT empno, ename, job, deptno</span><br><span class="line">FROM emp;</span><br><span class="line"></span><br><span class="line"># 查询视图创建指令</span><br><span class="line">SHOW CREATE VIEW emp_view</span><br><span class="line">#查询视图结构</span><br><span class="line">DESC emp_view</span><br><span class="line">#查询视图数据</span><br><span class="line">SELECT * FROM emp_view</span><br><span class="line"></span><br><span class="line">#修改视图</span><br><span class="line">ALTER VIEW emp_view </span><br><span class="line">AS SELECT ename, empno</span><br><span class="line">FROM emp;</span><br><span class="line"></span><br><span class="line">#删除视图</span><br><span class="line">DROP VIEW emp_view;</span><br></pre></td></tr></table></figure><h2 id="视图可以套娃"><a href="#视图可以套娃" class="headerlink" title="视图可以套娃"></a>视图可以套娃</h2><p>这是一个由员工表生成的视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW emp_view </span><br><span class="line">AS SELECT empno, ename, job, deptno</span><br><span class="line">FROM emp;</span><br></pre></td></tr></table></figure><p>这是一个由视图生成的视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW emp_view2 </span><br><span class="line">AS SELECT empno, ename FROM emp_view</span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1.安全</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一些数据字段有重要信息，用视图提取次要字段，重要字段可以隐藏起来</span><br></pre></td></tr></table></figure><p>2.性能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">合理使用视图可以减少使用JOIN连接 ，从而提高查询效率</span><br></pre></td></tr></table></figure><p>3.灵活</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有些表因为设计缺陷问题，可能会废弃，但因为之前很多应用基于这张表，此时可以建立视图映射建立新的表替代设计缺陷的表，这样做了很少的改动，也达到了升级作用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/%E7%BA%A6%E6%9D%9F/"/>
      <url>/2023/04/17/%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h2 id="PRIMARY-KEY-主键"><a href="#PRIMARY-KEY-主键" class="headerlink" title="PRIMARY KEY 主键"></a>PRIMARY KEY 主键</h2><p>主键列必须满足以下2个规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.primary key 字段不允许重复且不能为null</span><br><span class="line">2.一张表只能有一个主键，但可为复合主键</span><br></pre></td></tr></table></figure><p>约束声明方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE students(</span><br><span class="line">id INT PRIMARY KEY,# 主键</span><br><span class="line">`name` VARCHAR(32)</span><br><span class="line">  #也可以声明在最后 PRIMARY KEY(&#x27;id&#x27;) </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>复合主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE students(</span><br><span class="line">id INT,</span><br><span class="line">`name` VARCHAR(32),</span><br><span class="line">PRIMARY KEY(id, `name`) #id 和 name 共同组成主键</span><br><span class="line">)</span><br><span class="line"># 复合主键两个列都相同，才视为相同字段</span><br><span class="line"># 任何主键字段都不允许为null</span><br></pre></td></tr></table></figure><h2 id="NOT-NULL非空"><a href="#NOT-NULL非空" class="headerlink" title="NOT NULL非空"></a>NOT NULL非空</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义非空字段不允许添加null</span><br></pre></td></tr></table></figure><h2 id="UNIQUE唯一"><a href="#UNIQUE唯一" class="headerlink" title="UNIQUE唯一"></a>UNIQUE唯一</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不允许添加重复的数据，但可以添加多个null</span><br></pre></td></tr></table></figure><h2 id="FOREIGN-KEY-外键"><a href="#FOREIGN-KEY-外键" class="headerlink" title="FOREIGN KEY 外键"></a>FOREIGN KEY 外键</h2><p>用于定义主表和从表的关系约束</p><p>外键使用规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.外键约束要定义在从表上</span><br><span class="line">2.主表列必须存在PRIMAR KEY 或者 UNIQUE 约束</span><br><span class="line">3.外键列数据必须在主表中对应列存在</span><br></pre></td></tr></table></figure><p>定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOREIGN KEY (从表字段) REFERENCES 主表名(primary key | unique column)</span><br></pre></td></tr></table></figure><p>注意事项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.一旦建立外键关系，数据不能随意删除：</span><br><span class="line">主表不可以删除与从表数据有关系的行；</span><br><span class="line">同样从表不能插入外键不存在的值，但可以null（前提外键字段允许为null）；</span><br><span class="line">2.表的类型必须是innode，才支持外键约束</span><br><span class="line">3.外键约束和主表中字段类型需要一致（长度可不同）</span><br></pre></td></tr></table></figure><h2 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h2><p>以下代码限制sex列，只能为check约束的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHECK( sex in (&#x27;男&#x27;, &#x27;女&#x27;))</span><br></pre></td></tr></table></figure><p>ENUM 也能实习类似的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENUM(&#x27;男&#x27;, &#x27;女&#x27;)</span><br></pre></td></tr></table></figure><h2 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h2><p>设置自增长的字段，会随添加数据而自动增长</p><p>使用规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.自增长一般配和PRIMARY KEY使用</span><br><span class="line">2.自增长也可以单独使用但需要配和UNIQUE</span><br><span class="line">3.自增长字段也可以为浮点型</span><br></pre></td></tr></table></figure><p>自增长默认从1开始，也可以指定开始位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name auto_increment = 10;</span><br></pre></td></tr></table></figure><p>添加数据到自增长字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.null和0指定为自增长字段时，系统为其赋值</span><br><span class="line">2.指定自增长字段值，则为指定的值（下次添加默认自增值为当前最大值+1）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
      <url>/2023/04/17/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>mysql用户存储在系统数据库mysql中user表中</p><p>重要字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host：允许登录的位置</span><br><span class="line">user：用户名</span><br><span class="line">authentication：加密后的密码</span><br></pre></td></tr></table></figure><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;允许登录位置&#x27; IDENTIFIED BY &#x27;密码&#x27;</span><br></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#x27;temp_user&#x27;@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#8.0的语法，set password=password()老版本可用</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;111111&#x27;</span><br></pre></td></tr></table></figure><h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant 权限列表 on 库.对象名 to 用户名@登录地址 [(同时修改密码) IDENTIFIED BY 密码]</span><br><span class="line">#低版本需要刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">所有数据库的所有对象 *.*</span><br><span class="line">库.* ：某个数据库中的所有对象</span><br></pre></td></tr></table></figure><p>比如给user用户 shop_db库中goods对象的权限 并修改密码为123</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant select on shop_db.goods &#x27;user&#x27;@&#x27;localhost&#x27; identified by &#x27;123&#x27;</span><br></pre></td></tr></table></figure><p>回收权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE SELECT, .. [ALL] ON 库.对象 FROM &#x27;name&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><p>创建用户不指定host，则为%，表示所有IP都有登录权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER all_host_login;</span><br></pre></td></tr></table></figure><p>指定具体IP段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;all_host_login&#x27;@&#x27;192.168.1.%&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/%E5%A4%96%E8%BF%9E%E6%8E%A5/"/>
      <url>/2023/04/17/%E5%A4%96%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>先了解一下内连接:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">合并两个具有同一列两个以上表的行，通过WHERE条件进行匹配（只会得到匹配成功的行，这样的连接我称为内连接，比较常用）</span><br></pre></td></tr></table></figure><p>通常避免笛卡尔集我们使用where条件限制过滤，但其中有些数据并不存在于前表或后表中，它单独存在于自己表内。</p><p>外连接定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两个表在连接过程中除了返回满足连接条件的行以外还返回左（或右）表中不满足条件的 行 ，这种连接称为左（或右） 外连接。没有匹配的行时, 结果表中相应的列为空(NULL)。（查询所有数据一定会用到外连接）</span><br></pre></td></tr></table></figure><p>左外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">左侧表行完全显示，我称为左外连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#语法:</span><br><span class="line">SELECT ...</span><br><span class="line">FROM left_table LEFT JOIN right_table </span><br><span class="line">ON 条件</span><br></pre></td></tr></table></figure><p>右外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">右侧表行完全显示，我称为右外连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#语法 </span><br><span class="line">SELECT ...</span><br><span class="line">FROM left_table RIGHT JOIN right_table </span><br><span class="line">ON 条件</span><br></pre></td></tr></table></figure><p>满外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满外连接的结果 = 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</span><br></pre></td></tr></table></figure><p>由于mysql不支持FULL JOIN，于是我们需要用 FULL OUTER JOIN tablename ON ex代替。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/%E7%B4%A2%E5%BC%95/"/>
      <url>/2023/04/17/%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>为指定的字段建立索引，数据规模很大的情况下查询速度会提升</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name ON table(column)</span><br></pre></td></tr></table></figure><p>复合索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name ON table(column1, colunm2)</span><br></pre></td></tr></table></figure><p>唯一索引（如果确定字段不重复优先使用唯一索引）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX index_name ON table(column)</span><br></pre></td></tr></table></figure><p>在原表基础上添加索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE goods</span><br><span class="line">ADD INDEX index_name(column1, ..)</span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用索引字段构建了一棵BT</span><br></pre></td></tr></table></figure><p>缺陷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.磁盘占用变大</span><br><span class="line">2.对删除，插入，更改会对索引进行维护，对执行速度有影响</span><br></pre></td></tr></table></figure><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1，主键索引，主键自动视为主键索引</span><br><span class="line">2.UNIQUE唯一索引</span><br><span class="line">3.INDEX普通索引</span><br><span class="line">4.FULLTEXT全文索引</span><br></pre></td></tr></table></figure><p>添加全文索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )</span><br></pre></td></tr></table></figure><p>删除索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_name ON table_name</span><br></pre></td></tr></table></figure><p>修改索引先删除后添加即可：</p><p>查询索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM table_name</span><br><span class="line">SHOW KEYS FROM table_name</span><br><span class="line">DESC table_name</span><br></pre></td></tr></table></figure><h2 id="适合添加索引字段"><a href="#适合添加索引字段" class="headerlink" title="适合添加索引字段"></a>适合添加索引字段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.频繁作为条件来查询的字段</span><br><span class="line">2.不容易重复的字段</span><br><span class="line">3.不常更新的字段</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/%E8%A7%86%E5%9B%BE/"/>
      <url>/2023/04/17/%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是一个虚拟表，其内容由查询定义，其数据来自基表，是基表的映射。</p><p>通过视图可以修改基表数据，基表的改变也会影响视图的数据。</p><p>用户  —-操作—–&gt; view &lt;—–关联—–&gt; 基表</p><p>创建视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW view_name AS SELECT ..;</span><br></pre></td></tr></table></figure><p>修改视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER VIEW view_name AS SELECT ..;</span><br></pre></td></tr></table></figure><p>显示视图创建指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE VIEW view_name</span><br></pre></td></tr></table></figure><p>查询视图结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC view_name</span><br></pre></td></tr></table></figure><p>删除视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW view1, view2</span><br></pre></td></tr></table></figure><p>以员工表为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 创建视图</span><br><span class="line">CREATE VIEW emp_view </span><br><span class="line">AS SELECT empno, ename, job, deptno</span><br><span class="line">FROM emp;</span><br><span class="line"></span><br><span class="line"># 查询视图创建指令</span><br><span class="line">SHOW CREATE VIEW emp_view</span><br><span class="line">#查询视图结构</span><br><span class="line">DESC emp_view</span><br><span class="line">#查询视图数据</span><br><span class="line">SELECT * FROM emp_view</span><br><span class="line"></span><br><span class="line">#修改视图</span><br><span class="line">ALTER VIEW emp_view </span><br><span class="line">AS SELECT ename, empno</span><br><span class="line">FROM emp;</span><br><span class="line"></span><br><span class="line">#删除视图</span><br><span class="line">DROP VIEW emp_view;</span><br></pre></td></tr></table></figure><h2 id="视图可以套娃"><a href="#视图可以套娃" class="headerlink" title="视图可以套娃"></a>视图可以套娃</h2><p>这是一个由员工表生成的视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW emp_view </span><br><span class="line">AS SELECT empno, ename, job, deptno</span><br><span class="line">FROM emp;</span><br></pre></td></tr></table></figure><p>这是一个由视图生成的视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW emp_view2 </span><br><span class="line">AS SELECT empno, ename FROM emp_view</span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1.安全</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一些数据字段有重要信息，用视图提取次要字段，重要字段可以隐藏起来</span><br></pre></td></tr></table></figure><p>2.性能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">合理使用视图可以减少使用JOIN连接 ，从而提高查询效率</span><br></pre></td></tr></table></figure><p>3.灵活</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有些表因为设计缺陷问题，可能会废弃，但因为之前很多应用基于这张表，此时可以建立视图映射建立新的表替代设计缺陷的表，这样做了很少的改动，也达到了升级作用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/%E4%BA%8B%E5%8A%A1/"/>
      <url>/2023/04/17/%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Transaction-事务"><a href="#Transaction-事务" class="headerlink" title="Transaction 事务"></a>Transaction 事务</h2><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.事务就是由单独单元的一个或多个sql语句组成，在这个单元中，每个sql语句都是相互依赖的。而整个单独单元是作为一个不可分割的整体存在，类似于物理当中的原子（一种不可分割的最小单位）。</span><br><span class="line">2.这种原子操作不 可分割，要么都执行成功，要么都不成功</span><br><span class="line">3.只有innodb支持事务相关操作</span><br></pre></td></tr></table></figure><p>查看存储引擎：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW engines</span><br></pre></td></tr></table></figure><h2 id="事务的四个特性（ACID）"><a href="#事务的四个特性（ACID）" class="headerlink" title="事务的四个特性（ACID）"></a>事务的四个特性（ACID）</h2><p>这部分特性和多线程很相似：</p><ul><li><p>原子性（Atomicity）：事务操作都是一个整体，不可分割</p></li><li><p>一致性（Consistency）：事务操作数据库，状态只有两种，提交后的状态，事务开启前的状态，中间索引操作都不可见</p></li><li><p>隔离性（Isolation）：事务相互之间不因被影响</p></li><li><p>持久性（Durability）：一个事务提交后对数据库的影响是永久的</p></li></ul><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>当执行事务操作时，mysql会在表上加锁，防止其他用户更改表的数据，和同步锁功能相似</p><h2 id="事务的操作"><a href="#事务的操作" class="headerlink" title="事务的操作"></a>事务的操作</h2><p>开始一个事务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION</span><br><span class="line"># set autocommit = off   也可以开启事务</span><br></pre></td></tr></table></figure><p>设置保存点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAVEPOINT name</span><br></pre></td></tr></table></figure><p>回退事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ROLLBACK TO name</span><br><span class="line">ROLLBACK # 回退到事务开始</span><br></pre></td></tr></table></figure><p>提交事务：</p><p>提交事务后自动删除保存点，并释放锁，数据生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMIT </span><br></pre></td></tr></table></figure><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>先来了解下名词：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脏读：一个事务读取了另一个事务还没有提交的dml操作时，产生脏读（多线程常见问题）；</span><br><span class="line">不可重复读：同一查询在同一事务多次进行，由于有其他的事务所做的修改或删除操作，导致前者查询结果每次都不同，此时叫做不可重复读；</span><br><span class="line">幻读：同一查询在同一事务多次进行，由于其他提交事务所做的插入操作，每次返回不同结果集，此时发送幻读；</span><br></pre></td></tr></table></figure><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>mysql事务隔离级别有一下4种</p><ul><li>READ-UNCOMMITTED 允许读未提交</li><li>READ-COMMITTED只允许读已提交</li><li>REPEATABLE-READ  可重复读</li><li>SERIALIZABLE  可串行化</li></ul><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>是否加锁</th></tr></thead><tbody><tr><td>读取未提交</td><td>会出现</td><td>会出现</td><td>会出现</td><td>不加锁</td></tr><tr><td>读取已提交</td><td>X</td><td>会出现</td><td>会出现</td><td>不加锁</td></tr><tr><td>可重复读</td><td>X</td><td>X</td><td>会出现</td><td>不加锁</td></tr><tr><td>可串行化</td><td>X</td><td>X</td><td>X</td><td>加锁</td></tr></tbody></table><p>查询当前事务隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select @@transaction_isolation;</span><br><span class="line">#查询全局隔离级别</span><br><span class="line">select @@global.transaction_isolation; </span><br></pre></td></tr></table></figure><p>设置隔离等级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#设置当前mysql连接的隔离级别:</span><br><span class="line">set session transaction isolation level read uncommitted;</span><br><span class="line">#设置数据库系统的全局的隔离级别:</span><br><span class="line">set global transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure><p>在目录下的my.ini配置文件也可以设置默认隔离等级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">transaction-isolation = 隔离等级</span><br></pre></td></tr></table></figure><h2 id="表类型和存储引擎"><a href="#表类型和存储引擎" class="headerlink" title="表类型和存储引擎"></a>表类型和存储引擎</h2><p>MySql表类型由存储引擎（Storage Engines）决定。</p><p>Mysql主要支持以下常用六种类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CSV</span><br><span class="line">MEMORY</span><br><span class="line">ARCHIVE</span><br><span class="line">MRG_MYISAM</span><br><span class="line">MYISAM</span><br><span class="line">InnoDB</span><br></pre></td></tr></table></figure><p>这六种引擎分为两类：</p><ul><li>事务安全型(innodb)</li><li>非事务安全型(myisam, memory..)</li></ul><p>查看所有引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES</span><br></pre></td></tr></table></figure><p>修改表的存储引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ENGINE = enginename</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0/"/>
      <url>/2023/04/17/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><p><code>if(expr1, expr2, expr3)</code> 判断函数，expr1为true 返回expr2的值，否则返回exp3的值</p><p><code>ifnull(expr1, expr2)</code>expr1判断为空，则返回expr2的值 ，否则返回expr1的值</p><p><code>WHEN expr1 THEN expr2 WHEN expr3 THEN expr4 ELSE expr5 END</code> 相当于多重分支当expr1为真 执行expre2结束后面内容，否则执行下一个when ..then</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/%E5%8A%A0%E5%AF%86%E5%92%8C%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0/"/>
      <url>/2023/04/17/%E5%8A%A0%E5%AF%86%E5%92%8C%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="加密和系统函数"><a href="#加密和系统函数" class="headerlink" title="加密和系统函数"></a>加密和系统函数</h2><p><code>user()</code> 查询用户 以及IP信息</p><p><code>database()</code>查询当前使用数据库名称</p><p><code>md5(str)</code>为指定字符串算出一个md5 32位的字符串，一般用于密码加密</p><p><code>password(str)</code> mysql默认的加密函数  新版本没得</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/04/17/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>测试数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#tables</span><br><span class="line"></span><br><span class="line">CREATE TABLE `emp`( `empno` INT NOT NULL, `ename` VARCHAR(32) NOT NULL, `job` VARCHAR(32) NOT NULL, `mgr` INT, `hiredate` VARCHAR(32) NOT NULL, `sal` DECIMAL(7, 2) NOT NULL, `comm` DECIMAL(6, 2), `deptno` INT NOT NULL )CHAR SET utf8mb4 COLLATE utf8mb4_bin; </span><br><span class="line">CREATE TABLE dept( deptno INT NOT NULL, dname VARCHAR(32) NOT NULL, loc VARCHAR(32) NOT NULL )CHAR SET utf8mb4 COLLATE utf8mb4_bin; </span><br><span class="line">CREATE TABLE salgrade( grade INT NOT NULL, losal DECIMAL(6, 2), hisal DECIMAL(7, 2) )CHAR SET utf8mb4 COLLATE utf8mb4_bin; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#test data</span><br><span class="line"></span><br><span class="line">INSERT INTO `emp` (`empno`, `ename`, `job`, `mgr`, `hiredate`, `sal`, `comm`, `deptno`) VALUES</span><br><span class="line">(7369, &#x27;SMITH&#x27;, &#x27;CLERK&#x27;, 7902, &#x27;1980-12-17&#x27;, 800.00, NULL, 20),</span><br><span class="line">(7499, &#x27;ALLEN&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-02-20&#x27;, 1600.00, 300.00, 30),</span><br><span class="line">(7521, &#x27;WARD&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-02-22&#x27;, 1250.00, 500.00, 30),</span><br><span class="line">(7566, &#x27;JONES&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-04-02&#x27;, 2975.00, NULL, 20),</span><br><span class="line">(7654, &#x27;MARTIN&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-09-28&#x27;, 1250.00, 1400.00, 30),</span><br><span class="line">(7698, &#x27;BLAKE&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-05-01&#x27;, 2850.00, NULL, 30);</span><br><span class="line">INSERT INTO `dept` (`deptno`, `dname`, `loc`) VALUES</span><br><span class="line">(10, &#x27;ACCOUNTING&#x27;, &#x27;NEW YORK&#x27;),</span><br><span class="line">(20, &#x27;RESEARCH&#x27;, &#x27;DALLAS&#x27;),</span><br><span class="line">(30, &#x27;SALES&#x27;, &#x27;CHICAGO&#x27;),</span><br><span class="line">(40, &#x27;OPERATIONS&#x27;, &#x27;BOSTON&#x27;),</span><br><span class="line">(50, &#x27;MARKETING&#x27;, &#x27;LOS ANGELES&#x27;),</span><br><span class="line">(60, &#x27;IT&#x27;, &#x27;SAN FRANCISCO&#x27;);</span><br><span class="line">INSERT INTO `salgrade` (`grade`, `losal`, `hisal`) VALUES</span><br><span class="line">(1, 700.00, 1200.00),</span><br><span class="line">(2, 1201.00, 1400.00),</span><br><span class="line">(3, 1401.00, 2000.00),</span><br><span class="line">(4, 2001.00, 3000.00),</span><br><span class="line">(5, 3001.00, 4000.00),</span><br><span class="line">(6, 4001.00, 5000.00);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="笛卡尔集"><a href="#笛卡尔集" class="headerlink" title="笛卡尔集"></a>笛卡尔集</h2><p>场景1：查询员工信息和所在部门信息</p><p><code>查询多个表会产生此问题</code>:</p><p>员工表中的每一行数据都会与部门表中每一行数据  拼接形成一行新的数据</p><p>员工表和部门表各有6行数据 因此此查询会生成36行数据的一个新表，这种多表查询问题称为<code>笛卡尔集</code>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM emp, dept </span><br></pre></td></tr></table></figure><p>解决此问题添加一个<code>过滤条件</code>:</p><p>员工部门编号和部门表编号一致时才是我们希望得到的数据</p><p>此时表会有两个字段都为deptno，一个是员工表的一个是部门表的，select查询字段时指定一个就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename, emp.deptno</span><br><span class="line">FROM emp, dept </span><br><span class="line">WHERE emp.`deptno` = dept.`deptno` </span><br></pre></td></tr></table></figure><p><code>N</code>个表至少需要<code>N-1</code>个 过滤条件才不会出现笛卡尔集！</p><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>场景2：查询工资等级在3到5所有员工信息以及部门信息，并按工资升序</p><p>此时需要查询3个表，至少需要2两个条件 </p><p>1.部门编号连接员工表和部门表</p><p>2.员工工资连接工资等级表</p><p>最后加入 等级3到等级5条件  并升序   得到结果，sql代码如下；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECTename, sal</span><br><span class="line">FROM emp, dept, salgrade </span><br><span class="line">WHERE emp.`deptno` = dept.`deptno` </span><br><span class="line">AND  emp.`sal` BETWEEN losal AND hisal </span><br><span class="line">AND salgrade.`grade` </span><br><span class="line">BETWEEN 3 AND 5</span><br><span class="line">ORDER BY sal;</span><br></pre></td></tr></table></figure><p>一表分多表查询</p><p>场景3：输出员工和他上级的信息</p><p>上级和下级都在员工表中</p><p>相当于把一个表分为两个，为了表示两个相同表，这里需要使用别名，让系统好区分</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT worker.`empno` AS &#x27;员工&#x27;, boss.`ename` AS &#x27;上级&#x27; # 查询的列也要使用别名查询</span><br><span class="line">FROM emp worker, emp boss # worker boss 相当于两个相同的表</span><br><span class="line">WHERE worker.`mgr` = boss.`empno`</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>嵌套查询，将查询结果作为另一查询的条件或来源</p><h2 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h2><p>场景1：查询某一员工所在部门的同事名字</p><p>首先查询员工部门号</p><p>将查询结果作为另一查询的条件，sql代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename, deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE deptno = (SELECT deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE emp.`ename` = &#x27;SMITH&#x27;) </span><br><span class="line">AND ename != &#x27;SMITH&#x27;</span><br></pre></td></tr></table></figure><p>场景2：查询部门编号为30，工作为推销员的员工有哪些</p><p>1.查询部门编号为30的员工</p><p>2.在生成的表中查询条件为推销员的员工</p><p>sql代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT temp.ename, temp.job, temp.deptno</span><br><span class="line">FROM (</span><br><span class="line">SELECT ename, job, deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE deptno = 30</span><br><span class="line">) temp</span><br><span class="line">WHERE temp.job = &#x27;SALESMAN&#x27;;</span><br></pre></td></tr></table></figure><h2 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h2><p>把一个子查询结果作为一个临时表来使用，完成另一个查询操作</p><p>场景：查询每一个部门高出部门平均工资人的资料</p><p>1.首先使用group by 得到部门平均工资</p><p>2.将得到临时表与员工表合成一个新表，加入where条件 &gt; avg_sal</p><p>代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT emp.`ename`, emp.`empno`,emp.`deptno`, emp.`sal`</span><br><span class="line">FROM emp, (SELECT AVG(sal) AS sal, deptno</span><br><span class="line">FROM emp</span><br><span class="line">GROUP BY deptno) avg_sal</span><br><span class="line">WHERE emp.`sal` &gt; avg_sal.sal AND emp.`deptno` = avg_sal.deptno</span><br></pre></td></tr></table></figure><h2 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h2><p>mysql中in常用于where表达式中,其作用是查询某个范围内的数据；</p><p>场景1：查询与30号部门工作职业相同的员工不包括30号部门</p><p>1.首先查询30部门下所有职业 并去重 </p><p>2.得到多条数据使用IN 查询 </p><p>代码如下： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename , deptno, job, deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE job IN (</span><br><span class="line">SELECT DISTINCT job</span><br><span class="line">FROM emp</span><br><span class="line">WHERE deptno = &#x27;30&#x27;)</span><br><span class="line">AND deptno != &#x27;30&#x27;</span><br></pre></td></tr></table></figure><h2 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h2><h2 id="ANY"><a href="#ANY" class="headerlink" title="ANY"></a>ANY</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/%E8%A1%A8%E5%A4%8D%E5%88%B6/"/>
      <url>/2023/04/17/%E8%A1%A8%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="表复制"><a href="#表复制" class="headerlink" title="表复制"></a>表复制</h2><p>蠕虫复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有一张emp员工表，要将部分数据迁移至new_emp表中，代码如下：</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO new_emp(empno, ename, job, sal)</span><br><span class="line">SELECT empno, ename, job, sal</span><br><span class="line">FROM emp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自添加 自我复制</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO new_emp</span><br><span class="line">SELECT * FROM new_emp;</span><br></pre></td></tr></table></figure><h2 id="如何删除一张表中重复记录"><a href="#如何删除一张表中重复记录" class="headerlink" title="如何删除一张表中重复记录"></a>如何删除一张表中重复记录</h2><p>以上面表为例</p><p>简单的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.LIKE关键字构建一个与原本表结构一样的distinct_emp</span><br><span class="line">2.向distinct_emp 插入new_emp表中数据 使用DISTINCT关键字去重</span><br><span class="line">3.删除原本new_emp表</span><br><span class="line">4.distinct_emp 改名</span><br></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#1</span><br><span class="line">CREATE TABLE distinct_emp LIKE new_emp;</span><br><span class="line"></span><br><span class="line">#2</span><br><span class="line">INSERT INTO distinct_emp </span><br><span class="line">SELECT DISTINCT * FROM new_emp;</span><br><span class="line">#3</span><br><span class="line">DROP TABLE new_emp;</span><br><span class="line">#4</span><br><span class="line">ALTER TABLE distinct_emp</span><br><span class="line">RENAME new_emp;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM new_emp;</span><br></pre></td></tr></table></figure><h2 id="UNION-和-UNION-ALL"><a href="#UNION-和-UNION-ALL" class="headerlink" title="UNION  和  UNION ALL"></a>UNION  和  UNION ALL</h2><p>联合，合并查询</p><p>用于将两个表或者两个查询结果连接成一个整体显示出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用使严格遵守一下3点</span><br><span class="line">1、相同数量的列，同时名称也要相等；</span><br><span class="line">2、列也必须拥有相似的数据类型；</span><br><span class="line">3、同时，每条 SELECT 语句中的列的顺序必须相同。</span><br></pre></td></tr></table></figure><p>union 去重合并（每个字段完全相等 判定为重复元素）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM new_emp</span><br><span class="line">UNION</span><br><span class="line">SELECT empno, ename, job, sal FROM emp;</span><br></pre></td></tr></table></figure><p>union all不去重合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM new_emp</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT empno, ename, job, sal FROM emp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">区别：</span><br><span class="line">union 会自动压缩多个结果集合中的重复结果，相对的效率相对较低</span><br><span class="line">union all 则将所有的结果全部显示出来，不管是不是重复。 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/17/JDBC/"/>
      <url>/2023/04/17/JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>JDBC为了访问不同数据库提供同一接口，为使用者屏蔽了细节问题</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/22/Temp/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/03/22/Temp/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ul><li>也称作列类型</li></ul><p>引入一下整形 范围和 正负的 理解，我们都知道1byte等于8bit</p><p>char c;  这个字符c 能表示的范围为 2^8 也就是0-255</p><p>short int i; 短整形 站2byte  2^16 也就是 -32768 —  + 32767 </p><p>unsigned  short int； 这个无符号类型 则是 0-65535</p><p>在二进制中正负实现规则为下，任意一个非unsigned整形 最高位是用来存放0   1     0表示没有符号也就是为正  1表示有符号也就为负</p><p>所以 实际存放数值的只有15位二进制数，2^15 就为 0-32767了  </p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><ul><li><p>整形</p><ul><li>bit(M) [m指定位数 默认1 范围1-64]是以二进制输出的 比如 bit(8) &#x3D;255  输出的  ‘11111111’</li><li>tinyint [1byte]</li><li>smallint [2byte]</li><li>mediumint [3byte]</li><li>int [4byte]</li><li>bigint [8byte]</li></ul></li><li><p>小数类型</p><ul><li>float [单精度 4byte]</li><li>double [双精度 8byte]</li><li>decimal(M,D) [大小不确定]</li></ul></li><li><p>文本类型</p><ul><li>char [0-255 字符]</li><li>varchar [0-65535 字节 utf8编码 最大为21844字符 1-3个字节用于记录大小 如果编码为gbk 2个字符用记录大小]</li><li>text [0-65535]</li><li>longtext[0-2^32-1]</li></ul></li><li><p>二进制数据类型</p><ul><li>blob [0- 2^16-1]</li><li>longblob [0-2^32-1]</li></ul></li><li><p>时期类型</p><ul><li>date [日期 年月日]</li><li>year [年]</li><li>time [时间 时分秒]</li><li>datetime [年月日 时分秒]</li><li>timestamp [时间戳]</li></ul></li></ul><h3 id="使用规则：保小不保大"><a href="#使用规则：保小不保大" class="headerlink" title="使用规则：保小不保大"></a>使用规则：保小不保大</h3><p>在满足需求的情况下，经常选择占用空间较小的类型</p><h3 id="decimal-M-D"><a href="#decimal-M-D" class="headerlink" title="decimal(M,D)"></a>decimal(M,D)</h3><p>定点数精度非常高</p><p>双精度，两个参数decimal(m,d)   m &lt;&#x3D; 65 D &lt;&#x3D; 30 D默认为0 M默认为10</p><p>M为总位数  D为小数点后位数 D为0则内有小数点或者分数部分。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>char(size )  size 表示的是字符数（不论是否是中文还是其他）而不是字节</p><p>varchar(size) 同理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb`(</span><br><span class="line">`<span class="type">char</span>` <span class="type">CHAR</span>(),</span><br><span class="line">    `<span class="type">varchar</span>` <span class="type">VARCHAR</span>()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb` <span class="keyword">VALUES</span>(<span class="string">&#x27;四个字符&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221106221218148.png" alt="image-20221106221218148"></p><h4 id="1-CHAR-和-VARCHAR"><a href="#1-CHAR-和-VARCHAR" class="headerlink" title="1_CHAR 和 VARCHAR"></a>1_CHAR 和 VARCHAR</h4><p>char() 类型和数组一样 是定长的不可改变其大小，如果超出就会报错</p><p>优点：适合定长的字符串 并且执行效率很高 </p><p>缺点：长度不定时容易产生错误</p><p>varchar() 类型 是一种可边长数组 不定长 </p><p>优点：varchar 在对于不知道字符有多长时 有用处  </p><p>缺点：搜索没有char快速，并且空间利用也没有char高效</p><h4 id="2-TEXT、MEDIUMTEXT、LONGTEXT"><a href="#2-TEXT、MEDIUMTEXT、LONGTEXT" class="headerlink" title="2_TEXT、MEDIUMTEXT、LONGTEXT"></a>2_TEXT、MEDIUMTEXT、LONGTEXT</h4><p>text   0-2^16</p><p>mediumtext   0-2^24</p><p>longtext  [0-2^32-1]</p><p>文本类型，可替换varchar类型也是不定长字符串。适合用于非常长的字符串比如文章</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `tb3` (</span><br><span class="line">`text` TEXT,</span><br><span class="line">`mediumtext` MEDIUMTEXT,</span><br><span class="line">`longtext` LONGTEXT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>  [IF <span class="keyword">NOT</span>] `tb3` <span class="keyword">VALUE</span>(<span class="string">&#x27;这个类型很长&#x27;</span>, <span class="string">&#x27;可变长字符串&#x27;</span>, <span class="string">&#x27;汉子3字节1111这个一字节编码不同可能不一样&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221106222840415.png" alt="image-20221106222840415"></p><p>—-注意后面的字节数变化</p><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><ul><li>DATE</li><li>DATETIME</li><li>TIEMSTAMP （时间戳  可选项 NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE 没有指定时间会将当前时间加入 CURRENT_TIMESTAMP）</li></ul><h4 id="TIMESTAMP详解"><a href="#TIMESTAMP详解" class="headerlink" title="TIMESTAMP详解"></a>TIMESTAMP详解</h4><p>自动更新 时间为当期时间</p><p>TIMESTAMP 声明  NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</p><p>insert updata 时候 会将该字段的这一列 所有timestamp 类型的变量更改为当期时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (</span><br><span class="line">  birthday <span class="type">DATE</span>,</span><br><span class="line">  <span class="comment">-- 年月 </span></span><br><span class="line">  job_DATATIME DATETIME,</span><br><span class="line">  <span class="comment">-- 年月时间</span></span><br><span class="line">  TIME_STAMP <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="comment">-- 更新这个表某条记录  会自动更新这一列的所有字段 以当前时间更新</span></span><br><span class="line">  TIME_STAMP2 <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (birthday, job_DATATIME) <span class="keyword">VALUES</span> (<span class="string">&#x27;2000-01-02&#x27;</span>,<span class="string">&#x27;2022-01-01 10:12:30&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (birthday, job_DATATIME) <span class="keyword">VALUES</span> (<span class="string">&#x27;2001-01-02&#x27;</span>,<span class="string">&#x27;2020-01-01 10:12:30&#x27;</span>);</span><br><span class="line"><span class="comment">-- 插入两条记录 </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/22/Temp/%E5%8A%9F%E8%83%BD%E6%80%A7%E5%87%BD%E6%95%B0/"/>
      <url>/2023/03/22/Temp/%E5%8A%9F%E8%83%BD%E6%80%A7%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="功能性函数"><a href="#功能性函数" class="headerlink" title="功能性函数"></a>功能性函数</h2><h2 id="字符串常用操作"><a href="#字符串常用操作" class="headerlink" title="字符串常用操作"></a>字符串常用操作</h2><p><code>dual</code>  系统自带亚原表  没有实际意义 用于测试</p><p><code>CHARSET(str)</code> 返回字符串  -&gt;字符集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CHARSET(&#x27;张三&#x27;) FROM dual;</span><br></pre></td></tr></table></figure><p><code>CONCAT(str1, str2...)</code> -&gt; 拼接字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(&#x27;A&#x27;， &#x27;B&#x27;， &#x27;C&#x27;) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>STRCMP(str1, str2) </code>-&gt;  比较字符串  比较的是二进制数大小  不区分大小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT STRCMP(&#x27;abc&#x27;,&#x27;ABC&#x27;) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>SUBSTRING(str, position, length)</code>  截取字符串 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTRING(&#x27;abcdef&#x27;, 2, 4) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>LTRIM(str)</code>  &amp;  <code>RTRIM</code>(str)  &amp;  <code>TRIM(str)</code>   去除多余空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LTRIM(&#x27;   a&#x27;), RTRIM(&#x27;b   &#x27;), TRIM(&#x27;  ab  &#x27;) FROM DUAL; -- -&gt;a,b,ab</span><br></pre></td></tr></table></figure><p><code>INSTR(str1, str2)</code> -&gt;查找子串在str1中的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSTR(&#x27;ABCD&#x27;, &#x27;C&#x27;) FROM DUAL; -- -&gt;3</span><br></pre></td></tr></table></figure><p>转换大小写  <code>UCASE(str)</code>  &amp;&amp; <code>LCASE(str)</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT UCASE(&#x27;abcde&#x27;), LCASE(&#x27;ABCDE&#x27;) FROM DUAL;</span><br></pre></td></tr></table></figure><p> 返回字符串长度 **返回的是字节长度 并非实际长度 <code>LENGTH(str)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(&#x27;你好世界&#x27;) FROM DUAL;  -- 3 * 4  --- &gt; 12</span><br></pre></td></tr></table></figure><p><code>REPLACE(str1, serch_str, replace_str)</code> 在原str字符串 查找子串serch_str 并替换成replace_str</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPLACE(&#x27;abcde&#x27;, &#x27;c&#x27;, &#x27;第三个字符&#x27;) FROM DUAL; -- ab第三个字符de</span><br></pre></td></tr></table></figure><p>栗子： name 首字母大写其余小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT( UCASE( SUBSTRING(`name`, 1, 1) ) , LCASE( SUBSTRING(`name`, 2) ) )  FROM students;</span><br></pre></td></tr></table></figure><h2 id="MATH常用函数"><a href="#MATH常用函数" class="headerlink" title="MATH常用函数"></a>MATH常用函数</h2><p><code>ABS(num)</code> 返回绝对值 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ABS(-233.333) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>BIN()</code>   十进制转二进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT BIN(10) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>CONV(num, from_case, to_case)</code> -》 将num  （from_case 当前进制）  转换为 to_case 进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONV(16, 10, 16) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>HEX(num)</code>   转换为16进制 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT HEX(16) FROM DUAL;</span><br></pre></td></tr></table></figure><p>上下取整 <code>CEIL(float)</code>  &amp;&amp; <code>FLOOR(float)</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CEIL(-11.111) FROM DUAL;</span><br></pre></td></tr></table></figure><p>保留几位小数<code>FROMAT(num, bit) </code> 自动四舍五入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FORMAT(12.2225, 3) FROM DUAL;</span><br></pre></td></tr></table></figure><p>取模<code>mod(num, num)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MOD(10, 3) FROM DUAL;</span><br></pre></td></tr></table></figure><p>返回随机数 ， 默认种子 时间真随机 ，自己参数种子 自添加伪随机</p><p><code>rand(种子)</code>  0 ≤ n ≤ 1.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT RAND() FROM DUAL;</span><br></pre></td></tr></table></figure><h2 id="时间日期相关函数"><a href="#时间日期相关函数" class="headerlink" title="时间日期相关函数"></a>时间日期相关函数</h2><p><code>CURRENT()</code> 返回当前日期</p><p><code>CURRENT_TIME()</code> 返回当前时间</p><p><code>CURRENT_TIMESTAMP()</code> 当前时间戳</p><p><code>NOW()</code> 返回当期时间和日期</p><p><code>DATE(datetime)</code> 返回 datetime的日期部分</p><p><code>DATE_ADD(date2, INTERVAL d_value d_type)</code> date2基础上加日期或者时间  d_type 年月日 时分秒 周都可以</p><p><code>DATE_Sub(date2, INTERVAL d_value d_type)</code> date2基础上减日期或者时间d_type 年月日 时分秒 周都可以</p><p><code>DATEDIF(date1, date2)</code> 两个日期差(结果是天) -&gt; <code>TIMEDIF()</code> 时间差值  </p><p>截取时间<code>YEAR|DAY|MONTH(datetime)</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/22/Temp/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/03/22/Temp/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>没有主键等约束的情况，对单表查分进行查询</p><h2 id="LIKE模糊查询"><a href="#LIKE模糊查询" class="headerlink" title="LIKE模糊查询"></a>LIKE模糊查询</h2><p><code>LIKE</code>关键字</p><p>通配符</p><p><code>%</code>任意多个字符包括0个</p><p><code>_</code>表示一个字符</p><p>1.查询name第一个字符为M的员工，sql代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename FROM emp</span><br><span class="line">WHERE ename LIKE &#x27;M%&#x27;</span><br></pre></td></tr></table></figure><p>2.查询name第三个字符为I的员工，sql代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename FROM emp</span><br><span class="line">WHERE ename LIKE &#x27;__I%&#x27;</span><br></pre></td></tr></table></figure><h2 id="ORDER-BY排序"><a href="#ORDER-BY排序" class="headerlink" title="ORDER BY排序"></a>ORDER BY排序</h2><p>多字段升降序</p><p>默认为ascent 升序</p><p>降序为descent </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp</span><br><span class="line">ORDER BY sal DESC, deptno ASC; # 工资降序 部门号升序</span><br></pre></td></tr></table></figure><h2 id="LIMIT分页"><a href="#LIMIT分页" class="headerlink" title="LIMIT分页"></a>LIMIT分页</h2><p>分页查询</p><p>每页显示两个数据 查询第一页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp</span><br><span class="line">ORDER BY sal DESC</span><br><span class="line">LIMIT 0, 2; # LIMIT start_index count  需要查询下一页改为2  需要查询n  就是（n-1）*每页显示数</span><br></pre></td></tr></table></figure><h2 id="GROUP-BY分组"><a href="#GROUP-BY分组" class="headerlink" title="GROUP BY分组"></a>GROUP BY分组</h2><p>根据一个或多个列对结果集进行分组</p><p>需求：显示每种岗位 雇员的总数、平均工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT job AS &#x27;工种&#x27;,COUNT(empno) AS &#x27;总人数&#x27;, AVG(IFNULL(sal, 0)) AS &#x27;平均工资&#x27;  FROM emp </span><br><span class="line">GROUP BY job;</span><br></pre></td></tr></table></figure><h2 id="HAVING过滤"><a href="#HAVING过滤" class="headerlink" title="HAVING过滤"></a>HAVING过滤</h2><p>HAVING用于分组后的再次筛选,只能用于分组。(注意：分组后)</p><p>练习：求工资总和大于9000的部门,并按照工资总和排序。</p><p>sql语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT deptno, SUM(sal) FROM emp</span><br><span class="line">GROUP BY deptno</span><br><span class="line">HAVING SUM(sal)</span><br><span class="line">ORDER BY SUM(sal) ASC;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.having是分组后，where是分组前</span><br><span class="line">2.where不用使用聚合函数，having可以使用聚合函数。</span><br><span class="line">3.where在分组之前就会进行筛选，过滤掉的数据不会进入分组。</span><br></pre></td></tr></table></figure><h2 id="关键字的执行顺序总结"><a href="#关键字的执行顺序总结" class="headerlink" title="关键字的执行顺序总结"></a>关键字的执行顺序总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">书写顺序</span><br><span class="line">1.select </span><br><span class="line">2.from</span><br><span class="line">3.where</span><br><span class="line">4.group by</span><br><span class="line">5.having</span><br><span class="line">6.order by</span><br><span class="line">7. limit</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  # 执行顺序</span><br><span class="line">  1.from//行过滤</span><br><span class="line">2.where</span><br><span class="line">3.group by</span><br><span class="line">4.having</span><br><span class="line">5.select//列过滤</span><br><span class="line">6.order by//排序</span><br><span class="line">7.limit//附加</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/22/CURD/"/>
      <url>/2023/03/22/CURD/</url>
      
        <content type="html"><![CDATA[<h2 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h2><h2 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h2><p>INSERT INTO table_name [column1,column2] VALUES [value1, value2]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE goods(</span><br><span class="line">`id`  INT,</span><br><span class="line">`goods_name` VARCHAR(10),</span><br><span class="line">price DECIMAL(8,2)</span><br><span class="line"></span><br><span class="line">)CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</span><br><span class="line"></span><br><span class="line">DESC goods;</span><br><span class="line"></span><br><span class="line">INSERT INTO `goods` (`id`, `goods_name`, `price`) </span><br><span class="line">Values (1001, &#x27;rtx-4090&#x27;, 20000.0);</span><br><span class="line">INSERT INTO `goods` (`id`, `goods_name`, `price`) </span><br><span class="line">VALUES (1002, &#x27;rtx-4080&#x27;, 10000.0);</span><br><span class="line"></span><br><span class="line">SELECT * FROM `goods`;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employe (id, user_name, brithday, job, salary)</span><br><span class="line">VALUES (001, &#x27;张三&#x27;, &quot;2001-01-02&quot;, &#x27;xxx&#x27;, 10000.0);</span><br><span class="line">INSERT INTO employe (id, user_name, brithday, job, salary)</span><br><span class="line">VALUE (002, &#x27;李四&#x27;, &#x27;2000-01-02&#x27;, &#x27;xxx&#x27;, 0.0);</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimages%5Cimage-20221112104637491.png" alt="image-20221112104637491"></p><ul><li><p>插入数据类型 必须  与字符串匹配</p><ul><li>如果字段为 <code>int</code> 数据项为<code>&#39;字符串&#39;</code> mysql会尝试进行转换，字符串字符必须为数字</li></ul></li><li><p>数据项的长度必须 在规定范围中</p></li><li><p>列1，列2 <code>VALUES</code>data1，data2   列出的字段 必须 与数据项一 一对应</p></li><li><p>date datetime 时间类型 本质是字符串 </p></li><li><p>数据项可以<code>null</code> 前提是字段没有设置<code>not null</code></p></li><li><p>添加多条数据</p><ul><li>&#96;&#96;&#96;mysql<br>INSERT INTO table_name (….)<br>VALUES (),(),()..;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 给表中所有字段添加数据项可以 不用列出其`column`</span><br><span class="line"></span><br><span class="line">- 字段中有默认值，可以不用添加，如果没有则会报错</span><br><span class="line"></span><br><span class="line">  ```mysql</span><br><span class="line">  CREATE TABLE test(</span><br><span class="line">  head CHAR(2),</span><br><span class="line">  `default` INT DEFAULT 1,</span><br><span class="line">  `end` CHAR(2)</span><br><span class="line">  )CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</span><br><span class="line">  </span><br><span class="line">  INSERT INTO test (head, &#x27;default&#x27;, &#x27;end&#x27;)</span><br><span class="line">  VALUES (&#x27;-&gt;&#x27;, &#x27;&lt;-&#x27;); # 列段有三个 实际添加了2个字段</span><br></pre></td></tr></table></figure></li></ul></li><li><p>PS， column 字段如果是关键字 用&#96;&#96; 包裹</p></li></ul><h2 id="UPDATE语句"><a href="#UPDATE语句" class="headerlink" title="UPDATE语句"></a>UPDATE语句</h2><ul><li><p>UPDATE table_name SET column &#x3D; data .. WHERE 条件;</p><p>没有使用where语句 表中所有字段值都会改变</p></li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employe</span><br><span class="line">SET salary = salary + 1000</span><br><span class="line">WHERE user_name = &#x27;张三&#x27;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimages%5Cimage-20221112113213852.png" alt="image-20221112113213852"></p><h2 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h2><ul><li>删除表中的某条   记录</li></ul><blockquote><p>DELETE FROM 表明</p><pre><code>WHERE 条件</code></pre></blockquote><ul><li>WHERE 条件不存在即删除所有记录</li></ul><p><img src="/%5Cimages%5Cimages%5Cimage-20221112150757034.png" alt="image-20221112150757034"></p><h2 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h2><h3 id="SELECT-查询语句"><a href="#SELECT-查询语句" class="headerlink" title="SELECT 查询语句"></a>SELECT 查询语句</h3><blockquote><p>SELECT [DISTINCT] (去除重复项) * | [列命1，列命2] FORM 表明</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE students( id INT NOT NULL DEFAULT 1, `name` VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;, chinese FLOAT NOT NULL DEFAULT 0.0, english FLOAT NOT NULL DEFAULT 0.0, math FLOAT NOT NULL DEFAULT 0.0 )CHARACTER SET utf8mb3 COLLATE utf8mb3_bin ENGINE INNOBASE; </span><br><span class="line">/*[15:17:14][16 ms]*/ ALTER TABLE students CHARACTER SET utf8mb4 COLLATE utf8mb4_bin; </span><br><span class="line">INSERT INTO students </span><br><span class="line">VALUES( 1, &#x27;张三&#x27;, 50, 50, 50),</span><br><span class="line">(2, &#x27;李四&#x27;, 40,40,40),</span><br><span class="line">(3, &#x27;李白&#x27;, 100,0,0),</span><br><span class="line">(4, &#x27;图灵&#x27;, 0, 100, 100),</span><br><span class="line">(5, &#x27;爱因斯坦&#x27;, 0, 100, 100),</span><br><span class="line">(6, &#x27;牛顿&#x27;, 0, 100, 100),</span><br><span class="line">(7, &#x27;我&#x27;, 30, 10, 10);</span><br></pre></td></tr></table></figure><ul><li><p>查询表中所有数据元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students;</span><br></pre></td></tr></table></figure></li><li><p>按列查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, `math` FROM students;</span><br></pre></td></tr></table></figure></li><li><p>查询中过滤重复数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT * FROM students;</span><br></pre></td></tr></table></figure></li></ul><h4 id="SELECT-查询结果运算"><a href="#SELECT-查询结果运算" class="headerlink" title="SELECT 查询结果运算"></a>SELECT 查询结果运算</h4><ul><li>使用表达式对查询的列进行运算</li></ul><blockquote><pre><code>    SELECT * | &#123;column1 | expression , column2 | expression ..&#125;            FROM table_name；</code></pre></blockquote><ul><li><p>SLECT 查询中使用别名 as</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name as new_name FROM table_name;</span><br></pre></td></tr></table></figure></li></ul><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, (`math` + `english` + `chinese`) AS &#x27;总成绩&#x27; FROM students;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimages%5Cimage-20221112155104264.png" alt="image-20221112155104264"></p><h4 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h4><ul><li><img src="/%5Cimages%5Cimages%5Cimage-20221112155319919.png" alt="image-20221112155319919"></li></ul><h4 id="ORDER-BY-子句"><a href="#ORDER-BY-子句" class="headerlink" title="ORDER BY 子句"></a>ORDER BY 子句</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112162230170.png" alt="image-20221112162230170"></p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, (math + english + chinese) AS socre</span><br><span class="line">FROM students</span><br><span class="line">ORDER BY socre DESC;</span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="Count-合计-x2F-统计函数"><a href="#Count-合计-x2F-统计函数" class="headerlink" title="Count 合计&#x2F;统计函数"></a>Count 合计&#x2F;统计函数</h3><p><img src="/%5Cimages%5Cimages%5Cimage-20221112163021546.png" alt="image-20221112163021546"></p><p>count(column) 统计单个列时会 排除为null的记录 而如果是 查询表中全部 有一条记录为空 也会算做一条记录</p><p>与底层逻辑有关</p><ul><li><p>统计表中有多少条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) FROM students;</span><br></pre></td></tr></table></figure></li><li><p>统计总数学＞90的有多少人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(`name`) FROM students </span><br><span class="line">WHERE math &gt; 90</span><br><span class="line">ORDER BY `math`</span><br></pre></td></tr></table></figure></li></ul><h4 id="SUM（）"><a href="#SUM（）" class="headerlink" title="SUM（）"></a>SUM（）</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112164038972.png" alt="image-20221112164038972"></p><ul><li>只对数值有效，用法和count()一致</li></ul><h4 id="AVG（）"><a href="#AVG（）" class="headerlink" title="AVG（）"></a>AVG（）</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112164528616.png" alt="image-20221112164528616"></p><p> MAX（）&amp; MIN（）</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/%5Cimages%5Cimages%5Cimage-20221112165955897.png" alt="image-20221112165955897"></h4><h4 id="GROUP-BY-amp-HAVING（）"><a href="#GROUP-BY-amp-HAVING（）" class="headerlink" title="GROUP BY &amp; HAVING（）"></a>GROUP BY &amp; HAVING（）</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112170304566.png" alt="image-20221112170304566"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>纯Java    控制台 聊天程序  可联网（半成品）</title>
      <link href="/2023/01/20/Demo/%E7%BA%AFJava%20%20%20%20%E6%8E%A7%E5%88%B6%E5%8F%B0%20%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F%20%20%E5%8F%AF%E8%81%94%E7%BD%91%EF%BC%88%E5%8D%8A%E6%88%90%E5%93%81%EF%BC%89/"/>
      <url>/2023/01/20/Demo/%E7%BA%AFJava%20%20%20%20%E6%8E%A7%E5%88%B6%E5%8F%B0%20%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F%20%20%E5%8F%AF%E8%81%94%E7%BD%91%EF%BC%88%E5%8D%8A%E6%88%90%E5%93%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="纯Java-控制台-聊天程序"><a href="#纯Java-控制台-聊天程序" class="headerlink" title="纯Java 控制台 聊天程序"></a>纯Java 控制台 聊天程序</h1><p>Java 学习告一段， 用自己目前学到的知识做了一个小Demo</p><p>写之前没有很好地规划，至于后面太乱了写其实没用多久，因为过年走情访友，回来都快不认识了，还好注释挺多的..</p><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><h4 id="草图"><a href="#草图" class="headerlink" title="草图"></a>草图</h4><p><img src="C:\Users\XP\AppData\Roaming\Typora\typora-user-images\image-20230201173852819.png" alt="image-20230201173852819"></p><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><ul><li>Java基础</li><li>IO</li><li>多线程</li><li>Socket网络编程</li><li>..</li></ul><h4 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h4><ul><li>登录</li><li>注册</li><li>发消息</li><li>群发</li><li>发文件(没写完)</li></ul><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>​服务器用socket 指定一个端口建立一个线程接受客户端数据，客户端通过服务器的网络地址与服务器建立连接，服务器接受到客户端连接时首先是验证登录，账户信息保存在文本文件中，客户端发送一个序列化的用户信息类，服务器检验，注册同理；</p><p>​服务器用一个数据结构来存储socket对象(服务器和客户端链接通道) 方便维护， 我这里 用的HashMap，感觉用一个栈也行，可能没那么方便，HashMap，key存储用户信息类，value 存储socket对象以及一些需要的方法，比如发送数据，接受数据等；</p><p>​发送信息，通过客户端发送一个DataPacket封装类 包含一些发送信息的内容和类型，由服务器来判断是执行什么功能，Message表示发送信息，然后DataPacket 下有个子类TextPacket 有文本的内容和发件人收件人的Id ，服务器在线程池找到用户就转发对应的收件人。群发消息，就在发送消息的基础上转发给服务器在线的所有人；</p><p>​发送文件，这个确实不想写了，思路也很简单，DataPacket子类有个FilePacket 把需要传输的文件打包成一个二维数组发送给服务器由其转发，但后面想了想很繁琐，而且占用了大量的网络资源，文件还不能太大。不如由服务器发送收件人ip，让客户端连接另一个客户端，客户端与客户端自己发送。</p><p>原本想联网测试下的，后面发现联网没那么简单，需要一个公网IP，我家里好像没有（联通应该有，我家宽带居然是广电的），如果想联网测试，需要公网ip，也可以尝试下内网击穿。</p><p>没有图形化界面，纯控制台</p><p>server:</p><p><img src="C:\Users\XP\AppData\Roaming\Typora\typora-user-images\image-20230201181720278.png" alt="image-20230201181720278"></p><p>client:</p><p><img src="C:\Users\XP\AppData\Roaming\Typora\typora-user-images\image-20230201181335511.png" alt="image-20230201181335511"></p><p>聊天：</p><p>server：</p><p><img src="C:\Users\XP\AppData\Roaming\Typora\typora-user-images\image-20230201181922808.png" alt="image-20230201181922808"></p><p>client：</p><p><img src="C:\Users\XP\AppData\Roaming\Typora\typora-user-images\image-20230201181847090.png" alt="image-20230201181847090"></p><p><img src="C:\Users\XP\AppData\Roaming\Typora\typora-user-images\image-20230201181956211.png" alt="image-20230201181956211"></p>]]></content>
      
      
      <categories>
          
          <category> Demo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>功能性函数</title>
      <link href="/2023/01/20/DataBase/MySql/%E5%8A%9F%E8%83%BD%E6%80%A7%E5%87%BD%E6%95%B0/"/>
      <url>/2023/01/20/DataBase/MySql/%E5%8A%9F%E8%83%BD%E6%80%A7%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="功能性函数"><a href="#功能性函数" class="headerlink" title="功能性函数"></a>功能性函数</h2><h2 id="字符串常用操作"><a href="#字符串常用操作" class="headerlink" title="字符串常用操作"></a>字符串常用操作</h2><p><code>dual</code>  系统自带亚原表  没有实际意义 用于测试</p><p><code>CHARSET(str)</code> 返回字符串  -&gt;字符集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CHARSET(&#x27;张三&#x27;) FROM dual;</span><br></pre></td></tr></table></figure><p><code>CONCAT(str1, str2...)</code> -&gt; 拼接字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(&#x27;A&#x27;， &#x27;B&#x27;， &#x27;C&#x27;) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>STRCMP(str1, str2) </code>-&gt;  比较字符串  比较的是二进制数大小  不区分大小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT STRCMP(&#x27;abc&#x27;,&#x27;ABC&#x27;) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>SUBSTRING(str, position, length)</code>  截取字符串 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTRING(&#x27;abcdef&#x27;, 2, 4) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>LTRIM(str)</code>  &amp;  <code>RTRIM</code>(str)  &amp;  <code>TRIM(str)</code>   去除多余空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LTRIM(&#x27;   a&#x27;), RTRIM(&#x27;b   &#x27;), TRIM(&#x27;  ab  &#x27;) FROM DUAL; -- -&gt;a,b,ab</span><br></pre></td></tr></table></figure><p><code>INSTR(str1, str2)</code> -&gt;查找子串在str1中的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSTR(&#x27;ABCD&#x27;, &#x27;C&#x27;) FROM DUAL; -- -&gt;3</span><br></pre></td></tr></table></figure><p>转换大小写  <code>UCASE(str)</code>  &amp;&amp; <code>LCASE(str)</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT UCASE(&#x27;abcde&#x27;), LCASE(&#x27;ABCDE&#x27;) FROM DUAL;</span><br></pre></td></tr></table></figure><p> 返回字符串长度 **返回的是字节长度 并非实际长度 <code>LENGTH(str)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(&#x27;你好世界&#x27;) FROM DUAL;  -- 3 * 4  --- &gt; 12</span><br></pre></td></tr></table></figure><p><code>REPLACE(str1, serch_str, replace_str)</code> 在原str字符串 查找子串serch_str 并替换成replace_str</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPLACE(&#x27;abcde&#x27;, &#x27;c&#x27;, &#x27;第三个字符&#x27;) FROM DUAL; -- ab第三个字符de</span><br></pre></td></tr></table></figure><p>栗子： name 首字母大写其余小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT( UCASE( SUBSTRING(`name`, 1, 1) ) , LCASE( SUBSTRING(`name`, 2) ) )  FROM students;</span><br></pre></td></tr></table></figure><h2 id="MATH常用函数"><a href="#MATH常用函数" class="headerlink" title="MATH常用函数"></a>MATH常用函数</h2><p><code>ABS(num)</code> 返回绝对值 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ABS(-233.333) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>BIN()</code>   十进制转二进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT BIN(10) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>CONV(num, from_case, to_case)</code> -》 将num  （from_case 当前进制）  转换为 to_case 进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONV(16, 10, 16) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>HEX(num)</code>   转换为16进制 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT HEX(16) FROM DUAL;</span><br></pre></td></tr></table></figure><p>上下取整 <code>CEIL(float)</code>  &amp;&amp; <code>FLOOR(float)</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CEIL(-11.111) FROM DUAL;</span><br></pre></td></tr></table></figure><p>保留几位小数<code>FROMAT(num, bit) </code> 自动四舍五入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FORMAT(12.2225, 3) FROM DUAL;</span><br></pre></td></tr></table></figure><p>取模<code>mod(num, num)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MOD(10, 3) FROM DUAL;</span><br></pre></td></tr></table></figure><p>返回随机数 ， 默认种子 时间真随机 ，自己参数种子 自添加伪随机</p><p><code>rand(种子)</code>  0 ≤ n ≤ 1.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT RAND() FROM DUAL;</span><br></pre></td></tr></table></figure><h2 id="时间日期相关函数"><a href="#时间日期相关函数" class="headerlink" title="时间日期相关函数"></a>时间日期相关函数</h2><p><code>CURRENT()</code> 返回当前日期</p><p><code>CURRENT_TIME()</code> 返回当前时间</p><p><code>CURRENT_TIMESTAMP()</code> 当前时间戳</p><p><code>NOW()</code> 返回当期时间和日期</p><p><code>DATE(datetime)</code> 返回 datetime的日期部分</p><p><code>DATE_ADD(date2, INTERVAL d_value d_type)</code> date2基础上加日期或者时间  d_type 年月日 时分秒 周都可以</p><p><code>DATE_Sub(date2, INTERVAL d_value d_type)</code> date2基础上减日期或者时间d_type 年月日 时分秒 周都可以</p><p><code>DATEDIF(date1, date2)</code> 两个日期差(结果是天) -&gt; <code>TIMEDIF()</code> 时间差值  </p><p>截取时间<code>YEAR|DAY|MONTH(datetime)</code></p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础数据类型</title>
      <link href="/2023/01/20/DataBase/MySql/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/01/20/DataBase/MySql/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ul><li>也称作列类型</li></ul><p>引入一下整形 范围和 正负的 理解，我们都知道1byte等于8bit</p><p>char c;  这个字符c 能表示的范围为 2^8 也就是0-255</p><p>short int i; 短整形 站2byte  2^16 也就是 -32768 —  + 32767 </p><p>unsigned  short int； 这个无符号类型 则是 0-65535</p><p>在二进制中正负实现规则为下，任意一个非unsigned整形 最高位是用来存放0   1     0表示没有符号也就是为正  1表示有符号也就为负</p><p>所以 实际存放数值的只有15位二进制数，2^15 就为 0-32767了  </p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><ul><li><p>整形</p><ul><li>bit(M) [m指定位数 默认1 范围1-64]是以二进制输出的 比如 bit(8) &#x3D;255  输出的  ‘11111111’</li><li>tinyint [1byte]</li><li>smallint [2byte]</li><li>mediumint [3byte]</li><li>int [4byte]</li><li>bigint [8byte]</li></ul></li><li><p>小数类型</p><ul><li>float [单精度 4byte]</li><li>double [双精度 8byte]</li><li>decimal(M,D) [大小不确定]</li></ul></li><li><p>文本类型</p><ul><li>char [0-255 字符]</li><li>varchar [0-65535 字节 utf8编码 最大为21844字符 1-3个字节用于记录大小 如果编码为gbk 2个字符用记录大小]</li><li>text [0-65535]</li><li>longtext[0-2^32-1]</li></ul></li><li><p>二进制数据类型</p><ul><li>blob [0- 2^16-1]</li><li>longblob [0-2^32-1]</li></ul></li><li><p>时期类型</p><ul><li>date [日期 年月日]</li><li>year [年]</li><li>time [时间 时分秒]</li><li>datetime [年月日 时分秒]</li><li>timestamp [时间戳]</li></ul></li></ul><h3 id="使用规则：保小不保大"><a href="#使用规则：保小不保大" class="headerlink" title="使用规则：保小不保大"></a>使用规则：保小不保大</h3><p>在满足需求的情况下，经常选择占用空间较小的类型</p><h3 id="decimal-M-D"><a href="#decimal-M-D" class="headerlink" title="decimal(M,D)"></a>decimal(M,D)</h3><p>定点数精度非常高</p><p>双精度，两个参数decimal(m,d)   m &lt;&#x3D; 65 D &lt;&#x3D; 30 D默认为0 M默认为10</p><p>M为总位数  D为小数点后位数 D为0则内有小数点或者分数部分。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>char(size )  size 表示的是字符数（不论是否是中文还是其他）而不是字节</p><p>varchar(size) 同理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb`(</span><br><span class="line">`<span class="type">char</span>` <span class="type">CHAR</span>(),</span><br><span class="line">    `<span class="type">varchar</span>` <span class="type">VARCHAR</span>()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb` <span class="keyword">VALUES</span>(<span class="string">&#x27;四个字符&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221106221218148.png" alt="image-20221106221218148"></p><h4 id="1-CHAR-和-VARCHAR"><a href="#1-CHAR-和-VARCHAR" class="headerlink" title="1_CHAR 和 VARCHAR"></a>1_CHAR 和 VARCHAR</h4><p>char() 类型和数组一样 是定长的不可改变其大小，如果超出就会报错</p><p>优点：适合定长的字符串 并且执行效率很高 </p><p>缺点：长度不定时容易产生错误</p><p>varchar() 类型 是一种可边长数组 不定长 </p><p>优点：varchar 在对于不知道字符有多长时 有用处  </p><p>缺点：搜索没有char快速，并且空间利用也没有char高效</p><h4 id="2-TEXT、MEDIUMTEXT、LONGTEXT"><a href="#2-TEXT、MEDIUMTEXT、LONGTEXT" class="headerlink" title="2_TEXT、MEDIUMTEXT、LONGTEXT"></a>2_TEXT、MEDIUMTEXT、LONGTEXT</h4><p>text   0-2^16</p><p>mediumtext   0-2^24</p><p>longtext  [0-2^32-1]</p><p>文本类型，可替换varchar类型也是不定长字符串。适合用于非常长的字符串比如文章</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `tb3` (</span><br><span class="line">`text` TEXT,</span><br><span class="line">`mediumtext` MEDIUMTEXT,</span><br><span class="line">`longtext` LONGTEXT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>  [IF <span class="keyword">NOT</span>] `tb3` <span class="keyword">VALUE</span>(<span class="string">&#x27;这个类型很长&#x27;</span>, <span class="string">&#x27;可变长字符串&#x27;</span>, <span class="string">&#x27;汉子3字节1111这个一字节编码不同可能不一样&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221106222840415.png" alt="image-20221106222840415"></p><p>—-注意后面的字节数变化</p><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><ul><li>DATE</li><li>DATETIME</li><li>TIEMSTAMP （时间戳  可选项 NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE 没有指定时间会将当前时间加入 CURRENT_TIMESTAMP）</li></ul><h4 id="TIMESTAMP详解"><a href="#TIMESTAMP详解" class="headerlink" title="TIMESTAMP详解"></a>TIMESTAMP详解</h4><p>自动更新 时间为当期时间</p><p>TIMESTAMP 声明  NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</p><p>insert updata 时候 会将该字段的这一列 所有timestamp 类型的变量更改为当期时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (</span><br><span class="line">  birthday <span class="type">DATE</span>,</span><br><span class="line">  <span class="comment">-- 年月 </span></span><br><span class="line">  job_DATATIME DATETIME,</span><br><span class="line">  <span class="comment">-- 年月时间</span></span><br><span class="line">  TIME_STAMP <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="comment">-- 更新这个表某条记录  会自动更新这一列的所有字段 以当前时间更新</span></span><br><span class="line">  TIME_STAMP2 <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (birthday, job_DATATIME) <span class="keyword">VALUES</span> (<span class="string">&#x27;2000-01-02&#x27;</span>,<span class="string">&#x27;2022-01-01 10:12:30&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (birthday, job_DATATIME) <span class="keyword">VALUES</span> (<span class="string">&#x27;2001-01-02&#x27;</span>,<span class="string">&#x27;2020-01-01 10:12:30&#x27;</span>);</span><br><span class="line"><span class="comment">-- 插入两条记录 </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分组查询</title>
      <link href="/2023/01/20/DataBase/MySql/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/01/20/DataBase/MySql/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>没有主键等约束的情况，对单表查分进行查询</p><h2 id="LIKE模糊查询"><a href="#LIKE模糊查询" class="headerlink" title="LIKE模糊查询"></a>LIKE模糊查询</h2><p><code>LIKE</code>关键字</p><p>通配符</p><p><code>%</code>任意多个字符包括0个</p><p><code>_</code>表示一个字符</p><p>1.查询name第一个字符为M的员工，sql代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename FROM emp</span><br><span class="line">WHERE ename LIKE &#x27;M%&#x27;</span><br></pre></td></tr></table></figure><p>2.查询name第三个字符为I的员工，sql代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename FROM emp</span><br><span class="line">WHERE ename LIKE &#x27;__I%&#x27;</span><br></pre></td></tr></table></figure><h2 id="ORDER-BY排序"><a href="#ORDER-BY排序" class="headerlink" title="ORDER BY排序"></a>ORDER BY排序</h2><p>多字段升降序</p><p>默认为ascent 升序</p><p>降序为descent </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp</span><br><span class="line">ORDER BY sal DESC, deptno ASC; # 工资降序 部门号升序</span><br></pre></td></tr></table></figure><h2 id="LIMIT分页"><a href="#LIMIT分页" class="headerlink" title="LIMIT分页"></a>LIMIT分页</h2><p>分页查询</p><p>每页显示两个数据 查询第一页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp</span><br><span class="line">ORDER BY sal DESC</span><br><span class="line">LIMIT 0, 2; # LIMIT start_index count  需要查询下一页改为2  需要查询n  就是（n-1）*每页显示数</span><br></pre></td></tr></table></figure><h2 id="GROUP-BY分组"><a href="#GROUP-BY分组" class="headerlink" title="GROUP BY分组"></a>GROUP BY分组</h2><p>根据一个或多个列对结果集进行分组</p><p>需求：显示每种岗位 雇员的总数、平均工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT job AS &#x27;工种&#x27;,COUNT(empno) AS &#x27;总人数&#x27;, AVG(IFNULL(sal, 0)) AS &#x27;平均工资&#x27;  FROM emp </span><br><span class="line">GROUP BY job;</span><br></pre></td></tr></table></figure><h2 id="HAVING过滤"><a href="#HAVING过滤" class="headerlink" title="HAVING过滤"></a>HAVING过滤</h2><p>HAVING用于分组后的再次筛选,只能用于分组。(注意：分组后)</p><p>练习：求工资总和大于9000的部门,并按照工资总和排序。</p><p>sql语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT deptno, SUM(sal) FROM emp</span><br><span class="line">GROUP BY deptno</span><br><span class="line">HAVING SUM(sal)</span><br><span class="line">ORDER BY SUM(sal) ASC;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.having是分组后，where是分组前</span><br><span class="line">2.where不用使用聚合函数，having可以使用聚合函数。</span><br><span class="line">3.where在分组之前就会进行筛选，过滤掉的数据不会进入分组。</span><br></pre></td></tr></table></figure><h2 id="关键字的执行顺序总结"><a href="#关键字的执行顺序总结" class="headerlink" title="关键字的执行顺序总结"></a>关键字的执行顺序总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">书写顺序</span><br><span class="line">1.select </span><br><span class="line">2.from</span><br><span class="line">3.where</span><br><span class="line">4.group by</span><br><span class="line">5.having</span><br><span class="line">6.order by</span><br><span class="line">7. limit</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  # 执行顺序</span><br><span class="line">  1.from//行过滤</span><br><span class="line">2.where</span><br><span class="line">3.group by</span><br><span class="line">4.having</span><br><span class="line">5.select//列过滤</span><br><span class="line">6.order by//排序</span><br><span class="line">7.limit//附加</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea 快捷键</title>
      <link href="/2022/11/20/Other/Idea%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/11/20/Other/Idea%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Idea-快捷键"><a href="#Idea-快捷键" class="headerlink" title="Idea 快捷键"></a>Idea 快捷键</h1><ul><li><p>删除整行ctrl + y </p></li><li><p>运行ctrl + shift + f11</p></li><li><p>新建&#x2F;添加 alt + insert</p></li><li><p>窗口变大变小ctrl + shift + f12</p></li><li><p>切换文件alt + 左右箭头</p></li><li><p>移动本行代码shift + alt +上下键  </p></li><li><p>切换窗口 alt + 数字键</p></li><li><p>提示方法参数类型ctrl + p （在括号里面有效）</p></li><li><p>光标位置</p><ul><li>home 回到头位置</li><li>end回到尾位置</li></ul></li><li><p>多行注释 ctrl + shift + &#x2F;</p></li><li><p>单行注释ctrl + &#x2F;</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hello-world</title>
      <link href="/2022/11/20/Other/hello-world/"/>
      <url>/2022/11/20/Other/hello-world/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>用于测试</p><p>data：2022年11月2日19:51:27</p></blockquote><h1 id="凸-艹皿艹-搞了2天终于搞好了！我太蠢了！"><a href="#凸-艹皿艹-搞了2天终于搞好了！我太蠢了！" class="headerlink" title="凸(艹皿艹 ) 搞了2天终于搞好了！我太蠢了！"></a>凸(艹皿艹 ) 搞了2天终于搞好了！我太蠢了！</h1><p><img src="/images/nxd.jpg"></p><h3 id="为什么写博客呢？"><a href="#为什么写博客呢？" class="headerlink" title="为什么写博客呢？"></a>为什么写博客呢？</h3><p>我觉得学东西总是要输出的，傻傻的学不做点笔记以后很容易忘记！</p><p>博客是一种很好的记录工具！！</p><p>致—–以后的自己</p><hr>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySql 基础</title>
      <link href="/2022/11/20/DataBase/MySql/MySql%20%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/11/20/DataBase/MySql/MySql%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql-基础"><a href="#MySql-基础" class="headerlink" title="MySql 基础"></a>MySql 基础</h1><h2 id="1-认识Mysql"><a href="#1-认识Mysql" class="headerlink" title="1.认识Mysql "></a>1.认识Mysql </h2><ol><li>MySql 三层结构</li></ol><ul><li><p>DBMS 数据库管理系统</p><ul><li>DataBase1<ul><li>表</li><li>表2…..</li></ul></li><li>DataBase2<ul><li>表1</li><li>表2…..</li></ul></li><li>DataBase……</li></ul></li><li><p>MySql 不区分大小写</p></li></ul><p>我们所说的数据库包含上述三层结构，当然除了上述内容外还有些其他功能结构。</p><p>客户端——&gt;    通过port 3306 —–&gt;数据库（数据存储的各种数据）</p><p>数据库分为；</p><ol><li><p>关系型数据库</p><p> 通过表和表之间，行和列之间的关系进行数据的存储</p></li><li><p>非关系型数据库</p><p>Redis，MongDB</p></li></ol><h2 id="2-创建一个数据库"><a href="#2-创建一个数据库" class="headerlink" title=" 2.创建一个数据库"></a> 2.创建一个数据库</h2><ul><li>CHARACTER SET：指定数据采用的字符集如果不指定 默认为uft_8</li><li>COLLATE：指定数据可字符集的校对规则(常用utf_bin【严格区分大小写】、utf8_general_ci  【不区大小写 默认】)</li></ul><hr><p>注意:</p><p>​校对 不区分大小写，如果表中数据存在相同字段但大小写不同，只会显示一条结果；</p><hr><blockquote><p>CREATE DATABASE [IF NOT EXISTS] name CHARACTER 字符集名称 COLLATE 校对规则</p><p>[IF NOT EXISTS] 如果DB存在不会执行</p><p>省略后如果创建书库存在则会报错，</p></blockquote><p>创建数据库&amp;删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#创建数据库  不指定字符集 和 校对规则 则默认 一般为utf8(mb3)  新版的utf8mb4</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_db01</span><br><span class="line"></span><br><span class="line">#删除数据库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE hs_db01</span><br><span class="line"><span class="keyword">DROP</span> DATABASE hsp_da02</span><br><span class="line"></span><br><span class="line">#创建一个使用utf8mb4 的字符集 的 hsp_da02数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_da02 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4</span><br><span class="line"></span><br><span class="line">#创建一个使用utf8mb4  校对规则为utf8mb4_bin 不区分大小写</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_da03 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#显数DB</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br><span class="line">#显示差创建的数据库语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE db_name</span><br><span class="line">#删除 DB</span><br><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] name </span><br></pre></td></tr></table></figure><h2 id="3-备份数据库"><a href="#3-备份数据库" class="headerlink" title="3.备份数据库"></a>3.备份数据库</h2><p>Dos命令行</p><p>​备份数据库</p><blockquote><p>mysqldump -u user_name -p -B DB1 DB2 … &gt; file_name.sql</p></blockquote><p>​备份数据库中的表</p><blockquote><p>mysqldump -u user_name -p DB1 tb1 tb2 … &gt; file_name.sql</p></blockquote><p>注意：</p><ol><li>添加环境，每天加去bin目录启动</li><li>不要在sql控制台输入 会报错</li><li>-p 后密码不要输入  回车后输入</li></ol><p>恢复数据库</p><blockquote><p>Source file_name</p></blockquote><hr><h2 id="4-创建表"><a href="#4-创建表" class="headerlink" title="4.创建表"></a>4.创建表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE (</span><br><span class="line">file1 datatype,</span><br><span class="line">    file2 datatype,</span><br><span class="line">...</span><br><span class="line">)character set 字符集 collate 校对规则 engine 引擎</span><br><span class="line"></span><br><span class="line">#character set 默认与数据库一致</span><br><span class="line">#collate 默认与数据库一致</span><br></pre></td></tr></table></figure><p>创建表示注意确认当前是在那个数据库</p><hr><h2 id="5-MySql-数据类型"><a href="#5-MySql-数据类型" class="headerlink" title="5.MySql 数据类型"></a>5.MySql 数据类型</h2><ul><li>也称作列类型</li></ul><p>引入一下整形 范围和 正负的 理解，我们都知道1byte等于8bit</p><p>char c;  这个字符c 能表示的范围为 2^8 也就是0-255</p><p>short int i; 短整形 站2byte  2^16 也就是 -32768 —  + 32767 </p><p>unsigned  short int； 这个无符号类型 则是 0-65535</p><p>在二进制中正负实现规则为下，任意一个非unsigned整形 最高位是用来存放0   1     0表示没有符号也就是为正  1表示有符号也就为负</p><p>所以 实际存放数值的只有15位二进制数，2^15 就为 0-32767了  </p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><ul><li><p>整形</p><ul><li>bit(M) [m指定位数 默认1 范围1-64]是以二进制输出的 比如 bit(8) &#x3D;255  输出的  ‘11111111’</li><li>tinyint [1byte]</li><li>smallint [2byte]</li><li>mediumint [3byte]</li><li>int [4byte]</li><li>bigint [8byte]</li></ul></li><li><p>小数类型</p><ul><li>float [单精度 4byte]</li><li>double [双精度 8byte]</li><li>decimal(M,D) [大小不确定]</li></ul></li><li><p>文本类型</p><ul><li>char [0-255 字符]</li><li>varchar [0-65535 字节 utf8编码 最大为21844字符 1-3个字节用于记录大小 如果编码为gbk 2个字符用记录大小]</li><li>text [0-65535]</li><li>longtext[0-2^32-1]</li></ul></li><li><p>二进制数据类型</p><ul><li>blob [0- 2^16-1]</li><li>longblob [0-2^32-1]</li></ul></li><li><p>时期类型</p><ul><li>date [日期 年月日]</li><li>year [年]</li><li>time [时间 时分秒]</li><li>datetime [年月日 时分秒]</li><li>timestamp [时间戳]</li></ul></li></ul><h3 id="使用规则：保小不保大"><a href="#使用规则：保小不保大" class="headerlink" title="使用规则：保小不保大"></a>使用规则：保小不保大</h3><p>在满足需求的情况下，经理选择占用空间较小的类型</p><h3 id="decimal-M-D"><a href="#decimal-M-D" class="headerlink" title="decimal(M,D)"></a>decimal(M,D)</h3><p>定点数精度非常高</p><p>双精度，两个参数decimal(m,d)   m &lt;&#x3D; 65 D &lt;&#x3D; 30 D默认为0 M默认为10</p><p>M为总小数位数  D为小数点后位数 D为0则内有小数点或者分数部分。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>char(size )  size 表示的是字符数（不论是否是中文还是其他）而不是字节，注意不好搞混了</p><p>varchar(size) 同理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb`(</span><br><span class="line">`<span class="type">char</span>` <span class="type">CHAR</span>(),</span><br><span class="line">    `<span class="type">varchar</span>` <span class="type">VARCHAR</span>()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb` <span class="keyword">VALUES</span>(<span class="string">&#x27;四个字符&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221106221218148.png" alt="image-20221106221218148"></p><h4 id="1-CHAR-和-VARCHAR"><a href="#1-CHAR-和-VARCHAR" class="headerlink" title="1_CHAR 和 VARCHAR"></a>1_CHAR 和 VARCHAR</h4><p>char() 类型和数组一样 是定长的不可改变其大小，如果超出就会报错</p><p>优点：适合定长的字符串 并且执行效率很高 </p><p>缺点：长度不定时容易产生错误</p><p>varchar() 类型 是一种可边长数组 不定长 </p><p>优点：varchar 在对于不知道字符有多长时 有用处  </p><p>缺点：搜索没有char快速，并且空间利用也没有char高效</p><h4 id="2-TEXT、MEDIUMTEXT、LONGTEXT"><a href="#2-TEXT、MEDIUMTEXT、LONGTEXT" class="headerlink" title="2_TEXT、MEDIUMTEXT、LONGTEXT"></a>2_TEXT、MEDIUMTEXT、LONGTEXT</h4><p>text   0-2^16</p><p>mediumtext   0-2^24</p><p>longtext  [0-2^32-1]</p><p>文本类型，可替换varchar类型也是不定长字符串。适合用于非常长的字符串比如文章</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `tb3` (</span><br><span class="line">`text` TEXT,</span><br><span class="line">`mediumtext` MEDIUMTEXT,</span><br><span class="line">`longtext` LONGTEXT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>  [IF <span class="keyword">NOT</span>] `tb3` <span class="keyword">VALUE</span>(<span class="string">&#x27;这个类型很长&#x27;</span>, <span class="string">&#x27;可变长字符串&#x27;</span>, <span class="string">&#x27;汉子3字节1111这个一字节编码不同可能不一样&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221106222840415.png" alt="image-20221106222840415"></p><p>—-注意后面的字节数</p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构(栈，链表，字符匹配)</title>
      <link href="/2022/11/20/Basic/Data%20Structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E6%A0%88%EF%BC%8C%E9%93%BE%E8%A1%A8%EF%BC%8C%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D)/"/>
      <url>/2022/11/20/Basic/Data%20Structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E6%A0%88%EF%BC%8C%E9%93%BE%E8%A1%A8%EF%BC%8C%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D)/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="一、概念和术语"><a href="#一、概念和术语" class="headerlink" title="一、概念和术语"></a>一、概念和术语</h2><ol><li>数据结构是一门研究非数值计算的程序的操作对象，以及他们之间关系和操作问题的学科。</li></ol><p>数据：</p><ul><li><p>能输入到计算机</p></li><li><p>能被计算机处理</p><ul><li>int ，字符串， 图片等等都属于数据</li></ul></li></ul><p>数据元素：</p><ul><li>组成数据的基本单位<ul><li>对象就是一个数据元素</li></ul></li></ul><p>数据项：</p><ul><li>组成数据元素的基本单位，是不可分割的最小单位</li></ul><p>数据对象：（是性质相同的数据元素对象集合，是数据的子集）</p><p>数据结构：是相互之间存在一种或多种特定关系的数据元素集合。</p><p>2.逻辑结构和物理结构</p><ul><li>逻辑结构顾名思义是指数据对象中数据元素之间的相互关系 （实例化类的相互关系）<ul><li>集合结构   同一个集合  没有什么关系 终生平等</li><li>线性结构 一一对应</li><li>树形结构 各个数据元素之间存在一种多对多的关系</li><li>图形结构 数据元素是多对多的关系</li></ul></li><li>物理结构 （内存中的排列）<ul><li>顺序存储结构  数组就是一种典型的</li><li>链式存储结构</li></ul></li></ul><p>总结</p><ul><li>类（数据对象）<ul><li>对象（数据元素）<ul><li>元数据 （数据项）</li><li>元数据2</li></ul></li><li>对象2..</li></ul></li></ul><h2 id="二、算法"><a href="#二、算法" class="headerlink" title="二、算法"></a>二、算法</h2><p>以后再填</p><h2 id="三、线性表List"><a href="#三、线性表List" class="headerlink" title="三、线性表List"></a>三、线性表List</h2><h3 id="1-顺序存储结构"><a href="#1-顺序存储结构" class="headerlink" title="1.顺序存储结构"></a>1.顺序存储结构</h3><p>线性表：0个或者多个数据元素组成的有序序列</p><p>最简单的一种数据结构 线性表：</p><p>头结点只有且仅有一个直接后继，尾结点有且只有一个直接前驱</p><p>数组是一种典型的线性表 、顺序存储结构</p><p>线性表：</p><ul><li>地址连续</li><li>依次存放</li><li>随机读取</li><li>类型相同</li></ul><p>存储位置计算（只适用于顺序存储）</p><p>​第i个元素下1位地址计算书</p><p>​loc(ai + 1) &#x3D;  loc（ai） * (一个元素所需要的存储空间 C中可以使用sizeof()来获取)</p><blockquote><p>ADT 线性表 （list）</p><p>operation：（基本操作）</p><p>​initList()；初始化链表</p><p>​listEmpty();若线性表为空返回</p><p>​clearList（） 清空线性表</p><p>​getElem（） 返回第i个元素的值</p><p>​*localElem（）查找一个元素</p><p>​*listInsert（）在第i个位置插入新元素</p><p>​*listDelete() 删除线性表第i个元素，并获取删除的值</p><p>​listLength（）获取线性表长度  </p></blockquote><p>以上是最基本的操作，但也完全足够，复杂的操作我们可以将他们复合在一起实现</p><p>实现：基于Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.xml.crypto.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataType</span>&#123;<span class="comment">//数据域 可以根据自己需要调整</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataType</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataType</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>&#123;</span><br><span class="line">    DataType[] elem;</span><br><span class="line">    <span class="comment">//表示线性表长度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//operation</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">initList</span><span class="params">(<span class="type">int</span> count)</span>&#123;<span class="comment">//初始化一个拥有count个数据元素的 线性表</span></span><br><span class="line">        <span class="comment">//为数据域分配空间</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.elem = <span class="keyword">new</span> <span class="title class_">DataType</span>[count];</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;内存分配失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">destroyList</span><span class="params">()</span>&#123;<span class="comment">//销毁线性表 java拥有垃圾自动回收 相比于C、c++ 动态内存管理要好实现</span></span><br><span class="line">        <span class="built_in">this</span>.elem = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getLength</span><span class="params">()</span>&#123;<span class="comment">//返回线性表长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;<span class="comment">//判断线性表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DataType <span class="title function_">getElem</span><span class="params">(<span class="type">int</span> i)</span>&#123;<span class="comment">//根据i的位置获取相应内容</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="built_in">this</span>.length || i &lt; <span class="number">1</span>)   <span class="comment">//下标越界 返回空值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回元素的值为&quot;</span>+<span class="built_in">this</span>.elem[i - <span class="number">1</span>].value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.elem[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">locateElem</span><span class="params">(DataType f)</span>&#123;  <span class="comment">//查找 数据是否在线性表中</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty())<span class="comment">//判断线性表是否为空</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//线性表为空直接返回-1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f.value == <span class="built_in">this</span>.elem[i].value)</span><br><span class="line">                    <span class="keyword">return</span> i;<span class="comment">//找到元素返回该元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;    <span class="comment">//未找到 返回空</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过重载插入函数实现参数默认值</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">listInsert</span><span class="params">(DataType insert)</span>&#123;<span class="comment">//表中插入一个元素</span></span><br><span class="line">        <span class="keyword">return</span> listInsert(insert, <span class="built_in">this</span>.length + <span class="number">1</span>);    <span class="comment">//重载函数实现默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">listInsert</span><span class="params">(DataType insert, <span class="type">int</span> index)</span>&#123;<span class="comment">//核心思想 把从最后线性表后依次向前移元素</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span> || <span class="built_in">this</span>.length &gt;= <span class="number">20</span>)  <span class="comment">//这里我默认为20位最大</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//下表越界</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//核心</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> length - <span class="number">1</span>; i &gt;= index - <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="built_in">this</span>.elem[i] = <span class="built_in">this</span>.elem[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.elem[index - <span class="number">1</span>] = insert;</span><br><span class="line">        <span class="built_in">this</span>.length ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除线性表中第index个元素</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">deleteElem</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deleteElem(index, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span>  <span class="title function_">deleteElem</span><span class="params">(<span class="type">int</span> index, DataType dele_temp)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; <span class="built_in">this</span>.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//判断下表是否合法  也返回空</span></span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//核心</span></span><br><span class="line">            dele_temp = <span class="built_in">this</span>.elem[index - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index - <span class="number">1</span>; i &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="built_in">this</span>.elem[i] = <span class="built_in">this</span>.elem[i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="built_in">this</span>.length --;<span class="comment">//表长减一</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//核心</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示数据元素</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">showElem</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">            System.out.print(<span class="built_in">this</span>.elem[i].value+<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">List</span>();</span><br><span class="line">        l.initList(<span class="number">20</span>);</span><br><span class="line">        DataType[] data = <span class="keyword">new</span> <span class="title class_">DataType</span>[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            data[i] = <span class="keyword">new</span> <span class="title class_">DataType</span>();</span><br><span class="line">            data[i].value = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (l.listInsert(data[i]))</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;插入了&quot;</span>+l.getLength()+<span class="string">&quot;个数据元素&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找 22这个元素</span></span><br><span class="line">        l.showElem();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> l.locateElem(<span class="keyword">new</span> <span class="title class_">DataType</span>(<span class="number">22</span>));</span><br><span class="line">        <span class="keyword">if</span> (b != -<span class="number">1</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;找到了值为这个元素&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到&quot;</span>);</span><br><span class="line"></span><br><span class="line">        l.deleteElem(<span class="number">10</span>);</span><br><span class="line">        l.showElem();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前长度&quot;</span>+l.getLength());</span><br><span class="line"></span><br><span class="line">        l.listInsert(<span class="keyword">new</span> <span class="title class_">DataType</span>(<span class="number">10</span>), <span class="number">10</span>);</span><br><span class="line">        l.showElem();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前长度&quot;</span>+l.getLength());</span><br><span class="line">        <span class="keyword">if</span> (!l.listInsert(<span class="keyword">new</span> <span class="title class_">DataType</span>(<span class="number">20</span>)))</span><br><span class="line">            System.out.println(<span class="string">&quot;插入失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        l.destroyList();<span class="comment">//销毁线性表</span></span><br><span class="line">        l.showElem();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上顺序存储的线性表依旧存在很多缺陷</li><li>Java方法没有默认值，因此实现默认值用的是重载方法实现</li><li>基本实现了增删改查等功能</li><li>本质还是引用传递（Java是值传递），所以各元素内存值并不是连续的，但无伤大雅思想是对的</li></ul><p>优点：</p><ul><li>随机去表中任意元素 O（1）</li><li>存储密度大（节点本身所占存储量&#x2F;节点结构所占的存储量）</li></ul><p>缺点：</p><ul><li>增加删除元素 O(n) 最坏的情况就是对表头操作</li><li>浪费存储空间</li><li>数据元素最大值固定，属于静态存储形式</li></ul><hr><h3 id="2-链式存储"><a href="#2-链式存储" class="headerlink" title="2.链式存储"></a>2.链式存储</h3><p>对比顺讯存储结构:</p><p>优点：</p><ul><li>长度不定义 可以扩容</li><li>插入删除结点 O(1)</li><li>内存地址不连续</li></ul><p>缺点:</p><ul><li><p>无法随机读取</p></li><li><p>每个结点需要占用一部分空间存储指针</p></li></ul><h4 id="2-1单链表"><a href="#2-1单链表" class="headerlink" title="2.1单链表"></a>2.1单链表</h4><p>对顺序存储结构的链表优化，可以自由扩充链表</p><blockquote><p>Node (单链表)</p><p>​Data:数据域</p><pre><code> Ptr:指针域</code></pre></blockquote><ul><li>每个数据元素有数据域和指针域（引用）</li><li>通过一个头指针来指定线性表也叫作单链表（有头结点（为空时头指正指向null），无头结点 都一样（头结点其指针域null））</li><li>最后一个节点指向null，头结点指向链表的第一个节点</li><li>逻辑结构 和 物理结构不在相等</li></ul><p>Java 实现：</p><ul><li>数据域</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ElemType</span>&#123; <span class="comment">//自定义数据类型</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElemType</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElemType</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>结点类</li></ul><p>static int length； 可不定义  </p><p>需要自定义getLength() 方法  每次获取时间复杂度为O（n） </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;<span class="comment">//结点</span></span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">//指针域</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(ElemType data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(ElemType data, Node next)</span> &#123;<span class="comment">//初始化方便插入 造的构造</span></span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>基本方法</p><ul><li>基于Java类实现，其他语言需要传入头指针参数  this改为head</li></ul><p>isEmpty()检查是否为空链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​getLength()获取链表长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;<span class="comment">//获取链表长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;<span class="comment">//自定义的静态int 每个结点需要单独的增加一块int 空间 并且每次添加删除 都需要单独递增 递减</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initLinkList（） 初始化化链表</p><ul><li>Java 没有默认值，用重载方法 为其添加默认值</li><li>这里使用的头插法 初始化链表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Node <span class="title function_">initList</span><span class="params">()</span> &#123;<span class="comment">//初始化一个链表</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> initList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node <span class="title function_">initList</span><span class="params">(<span class="type">int</span> count)</span> &#123;<span class="comment">//创建count个node 的链表并使其递增赋值</span></span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;    <span class="comment">//创建失败返回空值</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="built_in">this</span>;  <span class="comment">//头结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        head.next = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="keyword">new</span> <span class="title class_">ElemType</span>(i + <span class="number">1</span>), head.next);</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="built_in">this</span>.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;    <span class="comment">//返回头结点引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>initLinkList_end（） 尾插法实现的链表初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">initList_end</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.destoryList(); <span class="comment">//清空链表</span></span><br><span class="line"><span class="comment">//        核心</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            head.next = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="keyword">new</span> <span class="title class_">ElemType</span>(i + <span class="number">1</span>), head.next);</span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="built_in">this</span>.length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//        核心</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>insertList(int index, Node data)  插入一个元素 在index位置前 插入一个结点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">boolean</span> <span class="title function_">insertList</span><span class="params">(<span class="type">int</span> index, Node data)</span> &#123;<span class="comment">//插入 链表结点</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="built_in">this</span>.getLength() || index &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//判断下标是否合法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="built_in">this</span>.next;<span class="comment">//头指遍历链表</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//        核心</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; count &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        data.next = head.next;</span><br><span class="line">        head.next = data;</span><br><span class="line">        <span class="built_in">this</span>.length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//        h核心</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>getNode(int index ) 获取下标为index 的数据元素 并返回其地址（引用）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Node <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> index)</span>&#123;<span class="comment">//获取下标为index 的元素 返回改结点</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; <span class="built_in">this</span>.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;    <span class="comment">//下标越界</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">ret_val</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (ret_val != <span class="literal">null</span> || i &lt; index)&#123;<span class="comment">//为空 小于下标结束</span></span><br><span class="line">            ret_val = ret_val.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret_val.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>删除一个结点 deleteNode（） 返回成功与否</li></ul><p>可改返回删除Node，方便回溯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">deleteNode</span><span class="params">(<span class="type">int</span> index)</span>&#123; <span class="comment">//删除第index 个结点</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; <span class="built_in">this</span>.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//访问越界</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="built_in">this</span>; <span class="comment">//定义一个头指针来遍历</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; i &lt; index - <span class="number">1</span>)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        head.next = head.next.next; <span class="comment">//删除元素</span></span><br><span class="line">        <span class="built_in">this</span>.length --;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>查找一个元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在链表中查找一个数据元素  这里通过java 重载实现默认参数</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">locaList</span><span class="params">(ElemType loacl)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.locaList(loacl, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">locaList</span><span class="params">(ElemType local, ElemType value)</span>&#123;<span class="comment">//查找一元素是否存在不存在返回其下标 没有返回</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="built_in">this</span>.next;<span class="comment">//创建头指针用于访问</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//返回的下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        核心</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (local.value == head.data.value)&#123;<span class="comment">//数据元素相等</span></span><br><span class="line">                value.value = head.data.value;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;   <span class="comment">//未找到</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-2静态链表"><a href="#2-2静态链表" class="headerlink" title="2.2静态链表"></a>2.2静态链表</h4><p>数组实现的链表 <code>statickLinkList</code></p><p>结点类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;<span class="comment">//结点</span></span><br><span class="line">    <span class="comment">//    下标为0 是一个备用链表 模拟内存中的剩余空间</span></span><br><span class="line"><span class="comment">//    下标MaxSIze - 1 存储当前链表中第一个数据元素 充当头结点的功能 为0 时标识链表为空</span></span><br><span class="line">    ElemType arrNode;<span class="comment">//数据域</span></span><br><span class="line">    <span class="type">int</span> cur;  <span class="comment">//游标  相当于单链表中的next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> i)</span>&#123;  <span class="comment">//重载实现 参数默认值</span></span><br><span class="line">        <span class="built_in">this</span>.arrNode = <span class="keyword">new</span> <span class="title class_">ElemType</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据域:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElemType</span> &#123;<span class="comment">//数据域</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElemType</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElemType</span><span class="params">(<span class="type">int</span> vlaue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = vlaue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init</code>初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node[] initStaticLinkList(Node[] sl, <span class="type">int</span> length)&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;   <span class="comment">//创建备用链表</span></span><br><span class="line">           <span class="comment">//创建数据域引用</span></span><br><span class="line">           sl[i] = <span class="keyword">new</span> <span class="title class_">Node</span>(i + <span class="number">0</span>);<span class="comment">// 分配内存地址</span></span><br><span class="line">           sl[i].cur = i + <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       sl[length - <span class="number">2</span>].cur = -<span class="number">1</span>; <span class="comment">//-1表示 线性表已经满了</span></span><br><span class="line">       sl[length - <span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">       sl[length - <span class="number">1</span>].cur = <span class="number">0</span>;  <span class="comment">// 头结点 游标为0表示空</span></span><br><span class="line">       System.out.println(<span class="string">&quot;初始化成功&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> sl;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>insertStaticLinkList</code>插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertStaticLinkList</span><span class="params">(Node[] sl ,<span class="type">int</span> index, ElemType insert)</span>&#123;<span class="comment">//插入一个数据元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> malloc(sl);<span class="comment">//获取空结点的下标</span></span><br><span class="line">        <span class="keyword">if</span> (i == -<span class="number">1</span>)    <span class="comment">//内存不足分配失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> sl.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; index &amp;&amp; sl[head].cur != <span class="number">0</span>)&#123;</span><br><span class="line">            head = sl[head].cur;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">        sl[<span class="number">0</span>].cur = sl[i].cur;  <span class="comment">//新结点从备用结点中删除</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入新的结点</span></span><br><span class="line">        sl[i].cur = sl[head].cur;</span><br><span class="line">        sl[head].cur = i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>delectNode</code>删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deletNode</span><span class="params">(Node[] ls, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty(ls))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//空表</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> ls.length - <span class="number">1</span>;   <span class="comment">//头结点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ls[head].cur != <span class="number">0</span> &amp;&amp; count &lt; index)&#123;</span><br><span class="line">            head = ls[head].cur;    <span class="comment">//下一个结点</span></span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ls[head].cur &lt;= <span class="number">0</span>)  <span class="comment">//添加这句是为了 index 为负值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除前记录其下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> ls[head].cur;</span><br><span class="line">        ls[head].cur = ls[ls[head].cur].cur;    <span class="comment">//将删除前结点 指向删除后一个结点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将空闲的这个结点添加到 备用链表（可用内存中）</span></span><br><span class="line">        ls[next].cur = ls[<span class="number">0</span>].cur;</span><br><span class="line">        ls[<span class="number">0</span>].cur = next;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>localNode</code> 查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">localElem</span><span class="params">(Node[] sl, ElemType getElem)</span>&#123;<span class="comment">//查找找到getElem 这个数据元素</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty(sl)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//为空链表 结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 返回的数据元素位置</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> sl.length - <span class="number">1</span>;   <span class="comment">//头指针</span></span><br><span class="line">        <span class="keyword">while</span> (sl[head].cur != <span class="number">0</span>)&#123;  <span class="comment">//游标指向0为空值</span></span><br><span class="line">            head = sl[head].cur;    <span class="comment">//游标（next） 指向下一个元</span></span><br><span class="line">            <span class="keyword">if</span> (sl[head].arrNode.data == getElem.data)</span><br><span class="line">                <span class="keyword">return</span> count + <span class="number">1</span>;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>getLength() &amp; destoryList() &amp;  isEmpty()</code> 基本方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLength</span><span class="params">(Node[] sl)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sl.length;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyStaticLinkList</span><span class="params">(Node[] sl)</span>&#123;<span class="comment">//这里我直接调用初始化函数 销毁</span></span><br><span class="line">        <span class="built_in">this</span>.initStaticLinkList(sl, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Node[] sl)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sl[sl.length - <span class="number">1</span>].cur == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-2双链表"><a href="#2-2双链表" class="headerlink" title="2.2双链表"></a>2.2双链表</h4><blockquote><p>Node (单链表)</p><p>​ 数据域: 自定义数据类型</p><p>​ 指针域:</p><pre><code>Ptr: nextPtr2: prior </code></pre><p>​</p></blockquote><p>数据域：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DuLinkList</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;<span class="comment">// 数据域</span></span><br><span class="line"></span><br><span class="line">    DuLinkList prior;<span class="comment">//前驱</span></span><br><span class="line">    DuLinkList next;<span class="comment">//后继</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DuLinkList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="keyword">new</span> <span class="title class_">ElemType</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DuLinkList</span><span class="params">(ElemType data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//operation</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElemType</span>&#123;<span class="comment">// 数据域</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElemType</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElemType</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本方法实现：</p><ul><li>getLength</li><li>isEmpty</li><li>destroyList</li><li>inser, delect, local,getElem</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        DuLinkList head;</span><br><span class="line">        head = initDuLinkList();</span><br><span class="line">        System.out.println(<span class="string">&quot;链表初始化成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            insertDuLinkList(head, i + <span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">ElemType</span>(i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前链表长度&quot;</span> + getLength(head));</span><br><span class="line">        show(head);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;在链表最后插入一个数据&quot;</span>);</span><br><span class="line">        insertDuLinkList(head, <span class="number">11</span>,<span class="keyword">new</span> <span class="title class_">ElemType</span>(<span class="number">99</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前链表长度&quot;</span> + getLength(head));</span><br><span class="line">        show(head);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;在链表中查找99这个元素&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">serch</span> <span class="operator">=</span> locaNode(head, <span class="keyword">new</span> <span class="title class_">ElemType</span>(<span class="number">99</span>));</span><br><span class="line">        <span class="keyword">if</span> (serch &gt; <span class="number">0</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;在第&quot;</span>+serch+<span class="string">&quot;个位置找到该元素&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;No find&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获得第11个元素值&quot;</span>);</span><br><span class="line">        <span class="type">ElemType</span> <span class="variable">data</span> <span class="operator">=</span> getElem(head, <span class="number">11</span>);</span><br><span class="line">        <span class="keyword">if</span> (data != <span class="literal">null</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;get value = &quot;</span> + data.value);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;删除第11个元素&quot;</span>);</span><br><span class="line">        delectNode(head, <span class="number">11</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除后的链表&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前链表长度&quot;</span> + getLength(head));</span><br><span class="line">        show(head);</span><br><span class="line"></span><br><span class="line">        destoryDuLinkList(head);</span><br><span class="line">        <span class="keyword">if</span>(isEmpty(head))</span><br><span class="line">            System.out.println(<span class="string">&quot;当前链表为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DuLinkList <span class="title function_">initDuLinkList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DuLinkList</span> <span class="variable">lists</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DuLinkList</span>();    <span class="comment">//初始化头指针</span></span><br><span class="line">        lists.next = lists;</span><br><span class="line">        lists.prior = lists;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(DuLinkList head)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == head)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getLength</span><span class="params">(DuLinkList list)</span>&#123;<span class="comment">// 获取长度</span></span><br><span class="line">        <span class="keyword">if</span> (!isEmpty(list))&#123;</span><br><span class="line">            <span class="type">DuLinkList</span> <span class="variable">head</span> <span class="operator">=</span> list; <span class="comment">//头指针</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//length</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (head.next != list)&#123;</span><br><span class="line">                head = head.next;    <span class="comment">// 下一个结点</span></span><br><span class="line">                length++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">insertDuLinkList</span><span class="params">(DuLinkList list, <span class="type">int</span> index, ElemType data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">DuLinkList</span> <span class="variable">head</span> <span class="operator">=</span> list; <span class="comment">//头指针</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; index - <span class="number">1</span> &amp;&amp; head.next != list)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 默认 输入长度超过实际长度 插入到末尾</span></span><br><span class="line">        <span class="type">DuLinkList</span> <span class="variable">New</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DuLinkList</span>(data);</span><br><span class="line">        New.prior = head;   <span class="comment">//新结点前驱</span></span><br><span class="line">        New.next = head.next;   <span class="comment">//新结点 后继</span></span><br><span class="line">        head.next.prior = New;  <span class="comment">//后继的prior 指向新结点</span></span><br><span class="line">        head.next = New;    <span class="comment">//前驱的next 指向新结点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(DuLinkList list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty(list))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">DuLinkList</span> <span class="variable">head</span> <span class="operator">=</span> list; <span class="comment">//头指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head.next != list)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            count ++;</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;个元素值:&quot;</span>);</span><br><span class="line">            System.out.print(head.data.value + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">delectNode</span><span class="params">(DuLinkList list, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delectNode(list, index, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">delectNode</span><span class="params">(DuLinkList list, <span class="type">int</span> index, ElemType get_elem)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getLength(list) &lt; index || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;下标不合法&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//核心</span></span><br><span class="line">        <span class="type">DuLinkList</span> <span class="variable">head</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head.next != list &amp;&amp; count &lt; index -<span class="number">1</span>)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除元素十分简单 如果是C 这里需要定义一个指向删除结点的指针 并释放内存</span></span><br><span class="line">        head.next = head.next.next;</span><br><span class="line">        head.next.prior = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">locaNode</span><span class="params">(DuLinkList list,ElemType serch_elem)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> locaNode(list, serch_elem,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">locaNode</span><span class="params">(DuLinkList list, ElemType serch_elem,ElemType get_data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty(list))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">DuLinkList</span> <span class="variable">head</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head.next != list)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            ret++;</span><br><span class="line">            <span class="keyword">if</span> (head.data.value == serch_elem.value )</span><br><span class="line">                <span class="keyword">return</span>  ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ElemType <span class="title function_">getElem</span><span class="params">(DuLinkList list, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; getLength(list) || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;下标越界&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">DuLinkList</span> <span class="variable">head</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head.next != list &amp;&amp; count &lt;= index)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head == list)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> head.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">destoryDuLinkList</span><span class="params">(DuLinkList list)</span>&#123;</span><br><span class="line">        <span class="comment">//销毁链表 这里模仿了c的流程</span></span><br><span class="line">        <span class="type">DuLinkList</span> <span class="variable">head</span> <span class="operator">=</span> list.next;</span><br><span class="line">        <span class="type">DuLinkList</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head != list)&#123;<span class="comment">//伪释放内存 temp等于头指针时</span></span><br><span class="line">            temp = head.next;   <span class="comment">// 记录下一个结点地址</span></span><br><span class="line">            head = <span class="literal">null</span>;   <span class="comment">//这里相当于free(Node)</span></span><br><span class="line">            head = temp;    <span class="comment">// 释放头指针指向下一个结点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后初始化一下头指针  其实只需调用初始化函数就可以完成 这样做接近底层逻辑</span></span><br><span class="line">        list.next = list;</span><br><span class="line">        list.prior = list;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3循环链表"><a href="#2-3循环链表" class="headerlink" title="2.3循环链表"></a>2.3循环链表</h4><p>在线性表基础上 next -&gt; null 改为指向头结点</p><p>重构方法中null 结束遍历的循环 改为头结点</p><p>优点:</p><ul><li>不需额外再开设空间</li><li>优化了一些操作</li></ul><p>以下实现两个链表组合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环链表 实现两个链表拼接 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listConnet</span><span class="params">(LoopNode list, LoopNode list2)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(list) || isEmpty(list2))  </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">LoopNode</span> <span class="variable">head</span> <span class="operator">=</span> list;</span><br><span class="line">    <span class="comment">// 遍历到链表最后 如果有尾指针 传入尾指针参数即可</span></span><br><span class="line">    <span class="keyword">while</span> (head.next != list)&#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---！！！ 链表1 的末端结点1 是指向 list2第一个元素而不是头结点</span></span><br><span class="line">    head.next = list2.next;</span><br><span class="line">    head = list2;</span><br><span class="line">    <span class="comment">// 遍历链表二 将末端元素next 指向链表1的头结点</span></span><br><span class="line">    <span class="keyword">while</span> (head.next != list2)</span><br><span class="line">        head = head.next;</span><br><span class="line">    head.next = list;   <span class="comment">//末端结点指向链表1头指针</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>两种结构是互补的，没有哪一种存储方式最优，相对不同问题使用不同结构才是正解</p><p>链式存储结构：</p><ul><li>优点：<ul><li>不定长扩容非常方便</li><li>插入删除操作效率高O(1）</li></ul></li><li>缺点：<ul><li>失去了顺序结构的随机读取O(n)</li><li>有一部分指针域空间开销</li></ul></li></ul><p>顺序存储结构:</p><ul><li>优点<ul><li>随机读取 </li><li>存储密度大（连续存储）</li></ul></li><li>缺点<ul><li>占用内存大</li><li>定长扩容很麻烦</li><li>插入删除操作O(n)</li></ul></li></ul><h2 id="四、栈Stack"><a href="#四、栈Stack" class="headerlink" title="四、栈Stack"></a>四、栈Stack</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是一种线性表，线性表特性他都有</p><ul><li><p>First in Last out  先进后出的线性表</p></li><li><p>插入操作都在top进行</p></li><li><p>由于插入删除都在栈顶，所以顺序存储和链式存储结构无差异</p></li></ul><p>顺序存储结构实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackDataType</span> &#123;</span><br><span class="line">    <span class="comment">//数据域</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StackDataType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StackDataType</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Operation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Demo1.Stack s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">initStack</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        <span class="comment">//这里原本有开辟数组的 被添加到构造方法里</span></span><br><span class="line">        <span class="comment">//栈顶 为0 空栈</span></span><br><span class="line">        s.top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">push</span><span class="params">(Stack s, StackDataType data)</span>&#123;</span><br><span class="line">        <span class="comment">//插入操作</span></span><br><span class="line">        <span class="keyword">if</span> (s.top == s.data.length)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈溢出&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s.data[s.top] = data;</span><br><span class="line">        s.top++;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.top == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//弹出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StackDataType <span class="title function_">pop</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        s.top--;</span><br><span class="line">        <span class="keyword">return</span> s.data[s.top];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">show_stack</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;栈：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.data.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != s.top)</span><br><span class="line">                System.out.print(<span class="string">&quot; --&gt; &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; Top &quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.top; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%5s&quot;</span>, s.data[i].value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向栈"><a href="#双向栈" class="headerlink" title="双向栈"></a>双向栈</h3><ul><li>相比栈 多一个栈顶，一个栈顶位于0， 另一头栈顶位于MAXSIZE +1</li><li>用数组更好实现</li><li>判断空栈和满栈 <ul><li>空 Top1 &#x3D; 0 &amp;&amp; Top2 &#x3D; MAXSIZE -1 </li><li>满栈Top1 + 1 &#x3D; Top2</li></ul></li></ul><p>基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Demo1.Stack s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">initStack</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        <span class="comment">//这里原本有开辟数组的 被添加到构造方法里</span></span><br><span class="line">        <span class="comment">//栈顶 为0 空栈</span></span><br><span class="line">        s.top1 = <span class="number">0</span>;</span><br><span class="line">        s.top2 = s.data.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">push</span><span class="params">(Stack s, StackDataType data, <span class="type">int</span> stack_number)</span>&#123;</span><br><span class="line">        <span class="comment">//判断栈是否满</span></span><br><span class="line">        <span class="keyword">if</span> (s.top1 + <span class="number">1</span> == s.top2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈溢出&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stack_number == <span class="number">1</span>)&#123;</span><br><span class="line">            s.data[s.top1] = data;</span><br><span class="line">            s.top1++;</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s.data[s.top2] = data;</span><br><span class="line">            s.top2--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.top1 == <span class="number">0</span> &amp;&amp; s.top2 == s.data.length - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//弹出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StackDataType <span class="title function_">pop</span><span class="params">(Stack s, <span class="type">int</span> stack_number)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (isEmpty(s))</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">if</span> (stack_number == <span class="number">1</span>)&#123;</span><br><span class="line">           s.top1 --;</span><br><span class="line">           <span class="keyword">return</span> s.data[s.top1+<span class="number">1</span>];</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           s.top2--;</span><br><span class="line">           <span class="keyword">return</span> s.data[s.top2-<span class="number">1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">show_stack</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;栈：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.data.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != s.top1)</span><br><span class="line">                System.out.print(<span class="string">&quot; --&gt; &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; Top &quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.top2; i &lt; s.data.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != s.top2)</span><br><span class="line">                System.out.print(<span class="string">&quot; &lt;-- &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; Top2 &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//栈1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.top1; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%5s&quot;</span>, s.data[i].value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//栈二</span></span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;         &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.top2 + <span class="number">1</span>; i &lt; s.data.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%5s&quot;</span>, s.data[i].value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        Operation.initStack(stack);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向第一个栈插入元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Operation.push(stack, <span class="keyword">new</span> <span class="title class_">StackDataType</span>(i + <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Operation.push(stack, <span class="keyword">new</span> <span class="title class_">StackDataType</span>(i + <span class="number">1</span>), <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Operation.push(stack, <span class="keyword">new</span> <span class="title class_">StackDataType</span>(<span class="number">22</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Operation.show_stack(stack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表节点定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">    StackDataType[] data;</span><br><span class="line">    <span class="comment">//两个栈顶</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="type">int</span> top1;</span><br><span class="line">    <span class="type">int</span> top2;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Stack</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="keyword">new</span> <span class="title class_">StackDataType</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="built_in">this</span>.top1 = -<span class="number">1</span>; <span class="comment">//栈不存在-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="keyword">new</span> <span class="title class_">StackDataType</span>[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackDataType</span> &#123;</span><br><span class="line">    <span class="comment">//数据域</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StackDataType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StackDataType</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221117100709344.png" alt="image-20221117100709344"></p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li>和栈对立的一种线性结构</li><li>First in First out  先进先出</li><li>插入表尾，出表表头</li><li>同样有顺序结构和链式结构</li></ul><p>数组实现：</p><p>难点用数组实现队列的反复重用，链式存储结构就没这么复杂</p><ul><li><p>空队列判断rear &#x3D;&#x3D; front</p></li><li><p>满队列(rear  + 1 ) % MAXSIZE &#x3D;&#x3D; front</p></li></ul><h2 id="五、字符串匹配String"><a href="#五、字符串匹配String" class="headerlink" title="五、字符串匹配String"></a>五、字符串匹配String</h2><h3 id="朴素字符串匹配"><a href="#朴素字符串匹配" class="headerlink" title="朴素字符串匹配"></a>朴素字符串匹配</h3><p>母串<code>abeabcabce</code>  子串为<code>abcabce</code></p><p>最坏的情况下O(n-m)*n     </p><p>分析一下我们就能得出 每次匹配母串字符 需要一个一个的对比 其中不乏有重复的对比（母串每次与子串匹配如果不相同会回溯至开头下一个位置 而子串是回溯到0） 下面的各种算法就是裁剪掉不必要的回溯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_String</span> &#123;<span class="comment">// 字符串匹配</span></span><br><span class="line">    <span class="comment">//朴素的字符串匹配</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">comp</span><span class="params">(<span class="type">char</span>[] str, <span class="type">char</span>[] str2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">strlength</span> <span class="operator">=</span> str.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">str2lengh</span> <span class="operator">=</span> str2.length;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt; strlength)&#123;</span><br><span class="line">            <span class="comment">// 记录前一个i 值方便回溯</span></span><br><span class="line">            j = i;</span><br><span class="line">            System.out.print(<span class="string">&quot;运行第&quot;</span>);</span><br><span class="line">            System.out.println(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//匹配子串str2 字符是否相等</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; k &lt; str2lengh;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[i] == str2[k])</span><br><span class="line">                    k++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k == str2lengh) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;字符串匹配&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            i = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] ary = &#123;</span><br><span class="line">                <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">char</span>[] str = &#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span> &#125;;</span><br><span class="line">        <span class="type">_String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">_String</span>();</span><br><span class="line"></span><br><span class="line">        s.comp(ary, str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP-字符串匹配"><a href="#KMP-字符串匹配" class="headerlink" title="KMP 字符串匹配"></a>KMP 字符串匹配</h3><p>相对于朴素的字符串匹配，KMP算法 会优化不必要的回溯  </p><ul><li>依据子串的字符串重复率构建 一个next数组 (前缀 和 后缀的相似程度) 优化匹配串不必要的回溯</li></ul><p>求<code>abcabf</code> 的next数组  -&gt; 011123 </p><h4 id="推导next数组-第一步"><a href="#推导next数组-第一步" class="headerlink" title="推导next数组 第一步"></a>推导next数组 第一步</h4><p>在网上看到不少实现数组下标都是从1开始的，我习惯从0开始 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] get_next(<span class="type">char</span>[] str)&#123;</span><br><span class="line">        <span class="comment">//next数组</span></span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[str.length];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">//后缀字符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//前缀字符</span></span><br><span class="line"></span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;  <span class="comment">//字符串第一个位置 必为0  方便访问下标所以-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>  (i &lt; str.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[j] == str[i] || j-<span class="number">1</span> == -<span class="number">1</span>)  <span class="comment">//j 前缀      i 后缀</span></span><br><span class="line">            &#123;</span><br><span class="line">                j ++;</span><br><span class="line">                i ++;</span><br><span class="line">                next[i - <span class="number">1</span>] = j - <span class="number">1</span>; <span class="comment">//更新next 数组</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>i 表示子串后缀字符下标  j表示前缀字符下标</p><p>思路：</p><p>后缀位置不断后移 判断是否与前缀字符相同 相同就一起地址比对下一个位置，不相同就回溯j值 一直不相同就回溯到0 继续匹配</p><p><code>abcdef</code> 得到next 数组为<code>011111</code>   next数组中的值就是回溯的依据 （这里我改成了-10000）</p><h4 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h4><p>有了next 这个数组 我们就可以使用这个数组来帮助我们减少不必要的回溯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在字符串中查找子串 并返回下标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">index_Kpm</span><span class="params">(<span class="type">char</span>[] str, <span class="type">char</span>[] str2, <span class="type">int</span> pos)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i;  <span class="comment">//遍历母串下标</span></span><br><span class="line">        <span class="type">int</span> j;  <span class="comment">//子串下标</span></span><br><span class="line"></span><br><span class="line">        i = pos ; <span class="comment">// pos为开始下标</span></span><br><span class="line">        j = -<span class="number">1</span>;  <span class="comment">//子串下标 0开始 这里-1 原因是因为next 习惯下标为0 开始 所以 第一个元素给定-1</span></span><br><span class="line">        <span class="type">int</span>[] next = <span class="built_in">this</span>.get_next(str2); <span class="comment">//获取我们的next数组</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; str.length &amp;&amp; str2.length &gt; j)&#123;<span class="comment">//满足i j下标都在母串 和子串区间 时 循环对比</span></span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || str[i] == str2[j])&#123;<span class="comment">//相比朴素算法就多 j == -1 的判断 ，这很重要</span></span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                j = next[j]; <span class="comment">//回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == str2.length)</span><br><span class="line">            <span class="keyword">return</span> i - str2.length; <span class="comment">//返回子串在母串开始下标</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="KMP优化"><a href="#KMP优化" class="headerlink" title="KMP优化"></a>KMP优化</h4><p>母串<code>aaaabcd</code> 匹配子串<code>aaaac</code>  </p><p>aaaac next 数组 结果为01231 </p><p>当i &#x3D; 4 j &#x3D; 4    时字符 b ！&#x3D; a  但是字符串中会不停对比回溯 直到j &#x3D; 0 从头开始匹配，其实这部分回溯我们也可以裁剪掉只需在求next数组时添加一个 如果后缀串等于前缀字符 我们就把偏移位置 和前缀的偏移位置一样 如果不相等正常执行next 数组求值即可</p><p>只需要更改next 数组 让前缀字符 等于后缀字符时 母串[i] &#x3D;&#x3D; 子串[j] 时 next 相应位置的next[i] &#x3D; next[j]即可</p><p>next -&gt; <code>01234</code>     优化后结果 next -&gt; <code>01114</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] get_nextval(<span class="type">char</span>[] str)&#123;</span><br><span class="line">    <span class="comment">//next数组</span></span><br><span class="line">    <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[str.length];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//后缀字符</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> -<span class="number">1</span>;  <span class="comment">//前缀字符</span></span><br><span class="line"></span><br><span class="line">    next[<span class="number">0</span>] = -<span class="number">1</span>;  <span class="comment">//字符串第一个位置 必为0  方便访问下标所以-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>  (i &lt; str.length - <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>( j == -<span class="number">1</span> || str[j] == str[i])  <span class="comment">//j 前缀      i 后缀</span></span><br><span class="line">        &#123;</span><br><span class="line">            j ++;</span><br><span class="line">            i ++;</span><br><span class="line">            <span class="keyword">if</span> (str[j] == str[i])</span><br><span class="line">                next[i] = next[j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                next[i] = j; <span class="comment">//更新next 数组</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串匹配没有图是真的难受后期把图补上会更好理解一点</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>KMP算法 优化了字符串匹配的一些特殊情况，适用于子串中有很高重复率的字符 才能体现KMP算法优势，否则效率并没有比传统字符串匹配高多少</p><h2 id="六、树Tree"><a href="#六、树Tree" class="headerlink" title="六、树Tree"></a>六、树Tree</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>学到树形结构了，先看看这又臭又长的定义</p><p>Tree 是n≥0有限集合 ， n&#x3D;0为空，非空数只有一个根节点，同深度的子树之间没有任何关系</p><h4 id="度（Degree）："><a href="#度（Degree）：" class="headerlink" title="度（Degree）："></a>度（Degree）：</h4><p>度等于一个结点的拥有的子树或者孩子</p><p>leaf 叶结点或者叫终端结点  度为0</p><p>非终端结点或称为者分支结点，除根结点之外，分支结点也称为内部结点。</p><p>数的度 是结点度的最大值</p><h3 id="结点关系"><a href="#结点关系" class="headerlink" title="结点关系"></a>结点关系</h3><p>线性结构是一对一，树形结构是一对多，同一个双亲结点的孩子互称兄弟，任意子树的根节点是所有结点的祖先</p><h3 id="结点层次Level"><a href="#结点层次Level" class="headerlink" title="结点层次Level"></a>结点层次Level</h3><p>根为第一层 往下递增。</p><p>双亲在同一层，互称堂兄弟。</p><p>数中结点最大深度为该树的深度</p><h3 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h3><p>有序树：每个结点有严格的顺序之分 ，左子树右子树 不能互换，否则就是一个无序树</p><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>两者都能采用但是对于顺序结构 操作有点不同</p><p>顺序存储结构：对于数顺序结构并不能直接表现树存储关系，简单的顺序存储不能满足需要</p><p>链式存储结构:  同顺序存储结构一样</p>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构(树)</title>
      <link href="/2022/11/20/Basic/Data%20Structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E6%A0%91)/"/>
      <url>/2022/11/20/Basic/Data%20Structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E6%A0%91)/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构（2）"><a href="#数据结构（2）" class="headerlink" title="数据结构（2）"></a>数据结构（2）</h1><h2 id="六、数Tree"><a href="#六、数Tree" class="headerlink" title="六、数Tree"></a>六、数Tree</h2><h3 id="数的表示方法"><a href="#数的表示方法" class="headerlink" title="数的表示方法"></a>数的表示方法</h3><h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><p>每个结点除了自身的数据域外，添加一个指示器，指向双亲在数组中的位置(链式存储结构则是指针域)</p><p>根结点的为-1 链表则是null</p><p>灵魂画师</p><p>  <img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221123001919199.png" alt="image-20221123001919199"></p><table><thead><tr><th>index</th><th>data</th><th>parent</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>-1</td></tr><tr><td>1</td><td>B</td><td>0</td></tr><tr><td>2</td><td>C</td><td>0</td></tr><tr><td>3</td><td>D</td><td>1</td></tr><tr><td>4</td><td>E</td><td>1</td></tr><tr><td>5</td><td>F</td><td>2</td></tr><tr><td>…</td><td></td><td></td></tr></tbody></table><p>通过上述数组表我们找到当前结点的双亲结点时间复杂度为O(1) ，但如果要查找孩子需要遍历整个树</p><p>如果我们需要知道结点的孩子肿么办，再新增一个firstchild 长子域 左边孩子 不存在同样可以值设置为-1</p><table><thead><tr><th>index</th><th>data</th><th>parent</th><th>firstchild</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>-1</td><td>1</td></tr><tr><td>1</td><td>B</td><td>0</td><td>3</td></tr><tr><td>2</td><td>C</td><td>0</td><td>6</td></tr><tr><td>3</td><td>D</td><td>1</td><td>8</td></tr><tr><td>4</td><td>E</td><td>1</td><td>-1</td></tr><tr><td>5</td><td>F</td><td>2</td><td>-1</td></tr><tr><td>…</td><td></td><td></td><td></td></tr></tbody></table><ul><li>如果你还想知道一个结点的更多信息 比如 右孩子 ，兄弟 只需在数组接触上继续添加这些域即可</li></ul><h4 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h4><blockquote><p>data</p><p>chiled head 孩子链表的头指针</p></blockquote><p>每个结点指针域个数等于该结点的度，顺序结构单独定义一个数组长度为所有结点的长度 用于存放孩子结点下标</p><p>而原数组中孩子结点的指针域作为头指针 指向chiled数组 直到这个线性表指向空</p><p>同样如果需要知道双亲结点我们也可以添加一个双亲域</p><h4 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h4><p>任意一个结点有自身数据域 ，它的左孩子存在就是唯一，右孩子也是一样</p><blockquote><p>data数据</p><p>firstchild左孩子</p><p>rightchild右孩子</p></blockquote><ul><li><p>如果一个树并不是二叉树，每个结点的度差值都很大，因为数组结构所以会浪费一大部分空间</p><p>解决方法，再建立一个数组 大小为 结点数，这个数组的目的是建立一个孩子结点的链表，而链表的头指针就是数组中的孩子域 </p><p><img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221123232443510.png" alt="image-20221123232443510"></p></li></ul><table><thead><tr><th>index</th><th>data</th><th>parent</th><th>firstchild(充当头索引)</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>-1</td><td>1</td></tr><tr><td>1</td><td>B</td><td>0</td><td>3</td></tr><tr><td>2</td><td>C</td><td>0</td><td>4</td></tr><tr><td>3</td><td>D</td><td>1</td><td>6</td></tr><tr><td>4</td><td>E</td><td>2</td><td>9</td></tr><tr><td>5</td><td>F</td><td>2</td><td>^</td></tr><tr><td>6</td><td>G</td><td>3</td><td>^</td></tr><tr><td>7</td><td>H</td><td>3</td><td>^</td></tr><tr><td>8</td><td>I</td><td>3</td><td>^</td></tr><tr><td>9</td><td>J</td><td>4</td><td>^</td></tr></tbody></table><p>孩子结点静态链表</p><table><thead><tr><th>index_child</th><th>next</th></tr></thead><tbody><tr><td>0</td><td>^</td></tr><tr><td>1（B）</td><td>2</td></tr><tr><td>2 ( C )</td><td>^</td></tr><tr><td>3  （ D）</td><td>^</td></tr><tr><td>4 (E)</td><td>5(F)</td></tr><tr><td>5(F)</td><td>^</td></tr><tr><td>6</td><td>^</td></tr><tr><td>7</td><td>^</td></tr><tr><td>8</td><td>^</td></tr><tr><td>9(E)</td><td>^</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面是孩子表示法结点定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElemType</span>&#123;<span class="comment">//数据域</span></span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElemType</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElemType</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ch = ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>&#123;<span class="comment">//孩子链表</span></span><br><span class="line">    <span class="type">int</span> child;</span><br><span class="line">    Child next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CTNode</span>&#123;<span class="comment">//孩子表示法 </span></span><br><span class="line">    ElemType data;</span><br><span class="line">    Child firstchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CTree</span>&#123;<span class="comment">//顺序存储结构  </span></span><br><span class="line">    <span class="comment">//链式结构需要在每个结点再添加一个next指针域</span></span><br><span class="line">    CTNode[] data;  <span class="comment">//数组</span></span><br><span class="line">    <span class="type">int</span> root;   <span class="comment">//根结点位置</span></span><br><span class="line">    <span class="type">int</span> node_count; <span class="comment">//总结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树Binary-Tree"><a href="#二叉树Binary-Tree" class="headerlink" title="二叉树Binary Tree"></a>二叉树Binary Tree</h2><ul><li><p>特殊的树 一个结点最多只能有两个子树</p></li><li><p>左右子树是有序的不可改变</p></li><li><p>树中左右树严格区分即使只有一个树</p></li></ul><p>五种基本形态：</p><p>空，只有一个根节点，根结点只有左子树，根结点只有右子树，根结点左右都有</p><h4 id="斜树"><a href="#斜树" class="headerlink" title="斜树"></a>斜树</h4><p>所有结点只能有左或者右的二叉树称为斜树，左子树就是左斜，右子树就是右斜</p><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>在一棵二叉树中所有叶子结点都在同一层，所有分支结点度为2，这样二叉树称为满二叉树</p><p>同样深度情况下满二叉树节点数最多</p><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>对一棵具有n个结点的二叉树按层编号，如果与满二叉树中编号完全对于，则这颗二叉树就是完全二叉树</p><p>满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树</p><p>叶结点只能出现在最下面2层</p><p>最下层的叶子结点一定都是向右连续的</p><p>如果完全二叉树中有结点度为1，则该结点只有左孩子，不存在右孩子而且还是最后一个结点的双亲</p><h2 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h2><p>由满二叉树可以推导</p><p>1层：1个结点  2^0 &#x3D; 1</p><p>2层：2个结点   2^1 &#x3D; 2</p><p>3层：4个结点   2^2 &#x3D; 4</p><p>4层：8个鸡蛋   2^3 &#x3D; 4</p><h5 id="在二叉树中第i层至多有2-i-1-个结点"><a href="#在二叉树中第i层至多有2-i-1-个结点" class="headerlink" title="在二叉树中第i层至多有2^(i-1) 个结点"></a>在二叉树中第i层至多有2^(i-1) 个结点</h5><p>满二叉树</p><p>1层：1            2^1  -1</p><p>2层：2+12^2 - 1</p><p>3层：1+2+42^3 -1</p><p>4层：1+2+4+82^4 -1</p><h5 id="深度为k的二叉树之多有-2-k-1-个结点"><a href="#深度为k的二叉树之多有-2-k-1-个结点" class="headerlink" title="深度为k的二叉树之多有(2^k) -1 个结点"></a>深度为k的二叉树之多有(2^k) -1 个结点</h5><h5 id="n个结点的满二叉树深度为-log2-n-1"><a href="#n个结点的满二叉树深度为-log2-n-1" class="headerlink" title="n个结点的满二叉树深度为 log2(n+1)"></a>n个结点的满二叉树深度为 log2(n+1)</h5><h5 id="完全二叉树-按结点层序编号对于任意一个i结点"><a href="#完全二叉树-按结点层序编号对于任意一个i结点" class="headerlink" title="完全二叉树  按结点层序编号对于任意一个i结点"></a>完全二叉树  按结点层序编号对于任意一个i结点</h5><ul><li><p>i &#x3D; 1, 则结点i是二叉树的根</p></li><li><p>2i&gt;max_node, 则无左孩子</p></li><li><p>2i + 1&gt; max_node，则无有孩子，否则就是右孩子</p><p><img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221124000004613.png" alt="image-20221124000004613"></p></li></ul><h2 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h2><ul><li>前序遍历</li></ul><p><img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221124000317036.png"></p><p>前提：二叉树不为空</p><p>先访问根结点然后前序遍历左子树，在遍历右子树</p><p>上述遍历结果为:ABDHIEJCFG</p><p>中序：</p><p>并不是从根结点开始，中序遍历根结点左子树然后才是根结点最后是右子树</p><p>上述遍历结果为:HDIBJEAFCG</p><p>层序：</p><p>这个就是每层递增来就行了：ABCEDFGHIJ</p><p>后续：</p><p>先叶结点，然后左右子树最后访问根节点</p><p>上述遍历结构：HIDEJBFGCA</p>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 基础2 225623</title>
      <link href="/2022/11/20/DataBase/MySql/MySql%20%E5%9F%BA%E7%A1%802%20225623/"/>
      <url>/2022/11/20/DataBase/MySql/MySql%20%E5%9F%BA%E7%A1%802%20225623/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql-基础"><a href="#MySql-基础" class="headerlink" title="MySql 基础"></a>MySql 基础</h1><h2 id="1-认识Mysql"><a href="#1-认识Mysql" class="headerlink" title="1.认识Mysql "></a>1.认识Mysql </h2><ol><li>MySql 三层结构</li></ol><ul><li><p>DBMS 数据库管理系统</p><ul><li>DataBase1<ul><li>表</li><li>表2…..</li></ul></li><li>DataBase2<ul><li>表1</li><li>表2…..</li></ul></li><li>DataBase……</li></ul></li><li><p>MySql 不区分大小写</p></li></ul><p>我们所说的数据库包含上述三层结构，当然除了上述内容外还有些其他功能结构。</p><p>客户端——&gt;    通过port 3306（默认） —–&gt;数据库（数据存储的各种数据）</p><p>数据库分为；</p><ol><li><p>关系型数据库</p><p> 通过表和表之间，行和列之间的关系进行数据的存储</p></li><li><p>非关系型数据库</p><p>Redis，MongDB</p></li></ol><h2 id="2-创建一个数据库"><a href="#2-创建一个数据库" class="headerlink" title=" 2.创建一个数据库"></a> 2.创建一个数据库</h2><ul><li>CHARACTER SET：指定数据采用的字符集如果不指定 默认为uft_8</li><li>COLLATE：指定数据可字符集的校对规则(常用utf_bin【严格区分大小写】、utf8_general_ci  【不区大小写 默认】)</li></ul><hr><p>注意:</p><p>​校对 不区分大小写，如果表中数据存在相同字段但大小写不同，只会显示一条结果；</p><hr><blockquote><p>CREATE DATABASE [IF NOT EXISTS] name CHARACTER 字符集名称 COLLATE 校对规则</p><p>[IF NOT EXISTS] 如果DB存在不会执行</p><p>省略后如果创建书库存在则会报错，</p></blockquote><p>创建数据库&amp;删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#创建数据库  不指定字符集 和 校对规则 则默认 一般为utf8(mb3)  新版的utf8mb4</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_db01</span><br><span class="line"></span><br><span class="line">#删除数据库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE hs_db01</span><br><span class="line"><span class="keyword">DROP</span> DATABASE hsp_da02</span><br><span class="line"></span><br><span class="line">#创建一个使用utf8mb4 的字符集 的 hsp_da02数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_da02 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4</span><br><span class="line"></span><br><span class="line">#创建一个使用utf8mb4  校对规则为utf8mb4_bin 不区分大小写</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_da03 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#显数DB</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br><span class="line">#显示差创建的数据库语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE db_name</span><br><span class="line">#删除 DB</span><br><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] name </span><br></pre></td></tr></table></figure><h2 id="3-备份数据库"><a href="#3-备份数据库" class="headerlink" title="3.备份数据库"></a>3.备份数据库</h2><p>Dos命令行</p><p>​备份数据库</p><blockquote><p>mysqldump -u user_name -p -B DB1 DB2 … &gt; file_name.sql</p></blockquote><p>​备份数据库中的表</p><blockquote><p>mysqldump -u user_name -p DB1 tb1 tb2 … &gt; file_name.sql</p></blockquote><p>注意：</p><ol><li>添加环境，每天加去bin目录启动</li><li>不要在sql控制台输入 会报错</li><li>-p 后密码不要输入  回车后输入</li></ol><p>恢复数据库</p><blockquote><p>Source file_name</p></blockquote><hr><h2 id="4-创建表"><a href="#4-创建表" class="headerlink" title="4.创建表"></a>4.创建表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE (</span><br><span class="line">name datatype,</span><br><span class="line">    name2 datatype,</span><br><span class="line">...</span><br><span class="line">)character set 字符集 collate 校对规则 engine 引擎</span><br><span class="line"></span><br><span class="line">#character set 默认与数据库一致</span><br><span class="line">#collate 默认与数据库一致</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一张员工基本信息的表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `emp` (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span> (<span class="number">32</span>),</span><br><span class="line">  sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">  birthday <span class="type">DATE</span>,</span><br><span class="line">  entry_date DATETIME,</span><br><span class="line">  job <span class="type">VARCHAR</span> (<span class="number">32</span>),</span><br><span class="line">  salary <span class="type">DECIMAL</span> (<span class="number">9</span>, <span class="number">4</span>),</span><br><span class="line">  `resume` TEXT</span><br><span class="line">) CHARSET utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin ENGINE INNODB ;</span><br><span class="line"></span><br><span class="line">#添加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp`</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">008</span>, <span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2050-10-10&#x27;</span>, <span class="string">&#x27;2050-10-10&#x27;</span>, <span class="string">&#x27;工作&#x27;</span>, <span class="number">10.2323</span>, <span class="string">&#x27;描述&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>创建表示注意确认当前是在那个数据库</p><h2 id="5-修改表"><a href="#5-修改表" class="headerlink" title="5.修改表"></a>5.修改表</h2><p>修改表的基本操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#添加列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line"><span class="keyword">ADD</span> (<span class="keyword">column</span> datatype [<span class="keyword">DEFAULT</span> expr]</span><br><span class="line">....);</span><br><span class="line">#修改列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line">MODIFY colum datatype [<span class="keyword">DEFAULT</span> exper];</span><br><span class="line"></span><br><span class="line">#删除列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">column</span>;</span><br><span class="line"></span><br><span class="line">#查看表的结构</span><br><span class="line"><span class="keyword">desc</span> tablename</span><br><span class="line"></span><br><span class="line">#修改表名</span><br><span class="line">Rename <span class="keyword">table</span> tablename <span class="keyword">to</span> New_tablename</span><br><span class="line"></span><br><span class="line">#修改表的字符集</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="type">character</span> <span class="keyword">set</span> 字符集;</span><br><span class="line"></span><br><span class="line">#修改字段名称及其默认值</span><br></pre></td></tr></table></figure><ul><li><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">-- 创建一张员工基本信息的表</span><br><span class="line">CREATE TABLE `employee` (</span><br><span class="line">  id INT,</span><br><span class="line">  `name` VARCHAR (32),</span><br><span class="line">  sex CHAR(1),</span><br><span class="line">  birthday DATE,</span><br><span class="line">  entry_date DATETIME,</span><br><span class="line">  job VARCHAR (32),</span><br><span class="line">  salary DECIMAL (9, 4),</span><br><span class="line">  `resume` TEXT</span><br><span class="line">) CHARSET utf8mb4 COLLATE utf8mb4_bin ENGINE INNODB ;</span><br><span class="line"></span><br><span class="line">#增加一个字段 （列）iamge</span><br><span class="line">ALTER TABLE employee</span><br><span class="line">ADD image VARCHAR(32) NOT NULL</span><br><span class="line">DEFAULT &#x27;&#x27;;</span><br><span class="line">#增加多个字段</span><br><span class="line">#增加一个字段 （列）</span><br><span class="line">ALTER TABLE employee </span><br><span class="line">  ADD (</span><br><span class="line">    image2 VARCHAR (32) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">    image3 VARCHAR (32) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">  ) ;</span><br><span class="line"></span><br><span class="line">-- 查询表中字段信息</span><br><span class="line">DESC employee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#修改列中的数据类型 默认改为not null 必须给定一个默认值</span><br><span class="line">-- change 可以替换 modify</span><br><span class="line">ALTER TABLE employee </span><br><span class="line">  MODIFY `name` VARCHAR (33)NULL,</span><br><span class="line">  MODIFY `sex` VARCHAR(1) NOT NULL DEFAULT &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除表中一列一个列</span><br><span class="line">ALTER TABLE employee</span><br><span class="line">DROP image2,</span><br><span class="line">DROP image,</span><br><span class="line">DROP image3;</span><br><span class="line"></span><br><span class="line">#修改表名称</span><br><span class="line">RENAME TABLE employee TO emp;</span><br><span class="line"></span><br><span class="line">#修改表的字符集和校对</span><br><span class="line">ALTER TABLE emp CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</span><br><span class="line"></span><br><span class="line">#修改列中的数据类型</span><br><span class="line">ALTER TABLE emp</span><br><span class="line">CHANGE `name` `user_name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="5-MySql-数据类型"><a href="#5-MySql-数据类型" class="headerlink" title="5.MySql 数据类型"></a>5.MySql 数据类型</h2><ul><li>也称作列类型</li></ul><p>引入一下整形 范围和 正负的 理解，我们都知道1byte等于8bit</p><p>char c;  这个字符c 能表示的范围为 2^8 也就是0-255</p><p>short int i; 短整形 站2byte  2^16 也就是 -32768 —  + 32767 </p><p>unsigned  short int； 这个无符号类型 则是 0-65535</p><p>在二进制中正负实现规则为下，任意一个非unsigned整形 最高位是用来存放0   1     0表示没有符号也就是为正  1表示有符号也就为负</p><p>所以 实际存放数值的只有15位二进制数，2^15 就为 0-32767了  </p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><ul><li><p>整形</p><ul><li>bit(M) [m指定位数 默认1 范围1-64]是以二进制输出的 比如 bit(8) &#x3D;255  输出的  ‘11111111’</li><li>tinyint [1byte]</li><li>smallint [2byte]</li><li>mediumint [3byte]</li><li>int [4byte]</li><li>bigint [8byte]</li></ul></li><li><p>小数类型</p><ul><li>float [单精度 4byte]</li><li>double [双精度 8byte]</li><li>decimal(M,D) [大小不确定]</li></ul></li><li><p>文本类型</p><ul><li>char [0-255 字符]</li><li>varchar [0-65535 字节 utf8编码 最大为21844字符 1-3个字节用于记录大小 如果编码为gbk 2个字符用记录大小]</li><li>text [0-65535]</li><li>longtext[0-2^32-1]</li></ul></li><li><p>二进制数据类型</p><ul><li>blob [0- 2^16-1]</li><li>longblob [0-2^32-1]</li></ul></li><li><p>时期类型</p><ul><li>date [日期 年月日]</li><li>year [年]</li><li>time [时间 时分秒]</li><li>datetime [年月日 时分秒]</li><li>timestamp [时间戳]</li></ul></li></ul><h3 id="使用规则：保小不保大"><a href="#使用规则：保小不保大" class="headerlink" title="使用规则：保小不保大"></a>使用规则：保小不保大</h3><p>在满足需求的情况下，经理选择占用空间较小的类型</p><h3 id="decimal-M-D"><a href="#decimal-M-D" class="headerlink" title="decimal(M,D)"></a>decimal(M,D)</h3><p>定点数精度非常高</p><p>双精度，两个参数decimal(m,d)   m &lt;&#x3D; 65 D &lt;&#x3D; 30 D默认为0 M默认为10</p><p>M为总小数位数  D为小数点后位数 D为0则内有小数点或者分数部分。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>char(size )  size 表示的是字符数（不论是否是中文还是其他）而不是字节，注意不好搞混了</p><p>varchar(size) 同理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb`(</span><br><span class="line">`<span class="type">char</span>` <span class="type">CHAR</span>(),</span><br><span class="line">    `<span class="type">varchar</span>` <span class="type">VARCHAR</span>()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb` <span class="keyword">VALUES</span>(<span class="string">&#x27;四个字符&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221106221218148.png" alt="image-20221106221218148"></p><h4 id="1-CHAR-和-VARCHAR"><a href="#1-CHAR-和-VARCHAR" class="headerlink" title="1_CHAR 和 VARCHAR"></a>1_CHAR 和 VARCHAR</h4><p>char() 类型和数组一样 是定长的不可改变其大小，如果超出就会报错</p><p>优点：适合定长的字符串 并且执行效率很高 </p><p>缺点：长度不定时容易产生错误</p><p>varchar() 类型 是一种可边长数组 不定长 </p><p>优点：varchar 在对于不知道字符有多长时 有用处  </p><p>缺点：搜索没有char快速，并且空间利用也没有char高效</p><h4 id="2-TEXT、MEDIUMTEXT、LONGTEXT"><a href="#2-TEXT、MEDIUMTEXT、LONGTEXT" class="headerlink" title="2_TEXT、MEDIUMTEXT、LONGTEXT"></a>2_TEXT、MEDIUMTEXT、LONGTEXT</h4><p>text   0-2^16</p><p>mediumtext   0-2^24</p><p>longtext  [0-2^32-1]</p><p>文本类型，可替换varchar类型也是不定长字符串。适合用于非常长的字符串比如文章</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `tb3` (</span><br><span class="line">`text` TEXT,</span><br><span class="line">`mediumtext` MEDIUMTEXT,</span><br><span class="line">`longtext` LONGTEXT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>  [IF <span class="keyword">NOT</span>] `tb3` <span class="keyword">VALUE</span>(<span class="string">&#x27;这个类型很长&#x27;</span>, <span class="string">&#x27;可变长字符串&#x27;</span>, <span class="string">&#x27;汉子3字节1111这个一字节编码不同可能不一样&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Ctypora-user-images%5Cimage-20221106222840415.png" alt="image-20221106222840415"></p><p>—-注意后面的字节数变化</p><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><ul><li>DATE</li><li>DATETIME</li><li>TIEMSTAMP （时间戳  可选项 NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE 没有指定时间会将当前时间加入 CURRENT_TIMESTAMP）</li></ul><h4 id="TIMESTAMP详解"><a href="#TIMESTAMP详解" class="headerlink" title="TIMESTAMP详解"></a>TIMESTAMP详解</h4><p>自动更新 时间为当期时间</p><p>TIMESTAMP 声明  NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</p><p>insert updata 时候 会将该字段的这一列 所有timestamp 类型的变量更改为当期时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (</span><br><span class="line">  birthday <span class="type">DATE</span>,</span><br><span class="line">  <span class="comment">-- 年月 </span></span><br><span class="line">  job_DATATIME DATETIME,</span><br><span class="line">  <span class="comment">-- 年月时间</span></span><br><span class="line">  TIME_STAMP <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="comment">-- 更新这个表某条记录  会自动更新这一列的所有字段 以当前时间更新</span></span><br><span class="line">  TIME_STAMP2 <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (birthday, job_DATATIME) <span class="keyword">VALUES</span> (<span class="string">&#x27;2000-01-02&#x27;</span>,<span class="string">&#x27;2022-01-01 10:12:30&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (birthday, job_DATATIME) <span class="keyword">VALUES</span> (<span class="string">&#x27;2001-01-02&#x27;</span>,<span class="string">&#x27;2020-01-01 10:12:30&#x27;</span>);</span><br><span class="line"><span class="comment">-- 插入两条记录 </span></span><br></pre></td></tr></table></figure><h2 id="6-增删改查"><a href="#6-增删改查" class="headerlink" title="6.增删改查"></a>6.增删改查</h2><h3 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h3><p>INSERT INTO table_name [column1,column2] VALUES [value1, value2]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE goods(</span><br><span class="line">`id`  INT,</span><br><span class="line">`goods_name` VARCHAR(10),</span><br><span class="line">price DECIMAL(8,2)</span><br><span class="line"></span><br><span class="line">)CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</span><br><span class="line"></span><br><span class="line">DESC goods;</span><br><span class="line"></span><br><span class="line">INSERT INTO `goods` (`id`, `goods_name`, `price`) </span><br><span class="line">Values (1001, &#x27;rtx-4090&#x27;, 20000.0);</span><br><span class="line">INSERT INTO `goods` (`id`, `goods_name`, `price`) </span><br><span class="line">VALUES (1002, &#x27;rtx-4080&#x27;, 10000.0);</span><br><span class="line"></span><br><span class="line">SELECT * FROM `goods`;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employe (id, user_name, brithday, job, salary)</span><br><span class="line">VALUES (001, &#x27;张三&#x27;, &quot;2001-01-02&quot;, &#x27;xxx&#x27;, 10000.0);</span><br><span class="line">INSERT INTO employe (id, user_name, brithday, job, salary)</span><br><span class="line">VALUE (002, &#x27;李四&#x27;, &#x27;2000-01-02&#x27;, &#x27;xxx&#x27;, 0.0);</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimages%5Cimage-20221112104637491.png" alt="image-20221112104637491"></p><ul><li><p>插入数据类型 必须  与字符串匹配</p><ul><li>如果字段为 <code>int</code> 数据项为<code>&#39;字符串&#39;</code> mysql会尝试进行转换，字符串字符必须为数字</li></ul></li><li><p>数据项的长度必须 在规定范围中</p></li><li><p>列1，列2 <code>VALUES</code>data1，data2   列出的字段 必须 与数据项一 一对应</p></li><li><p>date datetime 时间类型 本质是字符串 </p></li><li><p>数据项可以<code>null</code> 前提是字段没有设置<code>not null</code></p></li><li><p>添加多条数据</p><ul><li>&#96;&#96;&#96;mysql<br>INSERT INTO table_name (….)<br>VALUES (),(),()..;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 给表中所有字段添加数据项可以 不用列出其`column`</span><br><span class="line"></span><br><span class="line">- 字段中有默认值，可以不用添加，如果没有则会报错</span><br><span class="line"></span><br><span class="line">  ```mysql</span><br><span class="line">  CREATE TABLE test(</span><br><span class="line">  head CHAR(2),</span><br><span class="line">  `default` INT DEFAULT 1,</span><br><span class="line">  `end` CHAR(2)</span><br><span class="line">  )CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</span><br><span class="line">  </span><br><span class="line">  INSERT INTO test (head, &#x27;default&#x27;, &#x27;end&#x27;)</span><br><span class="line">  VALUES (&#x27;-&gt;&#x27;, &#x27;&lt;-&#x27;); # 列段有三个 实际添加了2个字段</span><br></pre></td></tr></table></figure></li></ul></li><li><p>PS， column 字段如果是关键字 用<code>[``]</code> 用单引号 不行</p></li></ul><h3 id="UPDATE语句"><a href="#UPDATE语句" class="headerlink" title="UPDATE语句"></a>UPDATE语句</h3><ul><li><p>UPDATE table_name SET column &#x3D; data .. WHERE 条件;</p><p>没有使用where语句 表中所有字段值都会改变</p></li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employe</span><br><span class="line">SET salary = salary + 1000</span><br><span class="line">WHERE user_name = &#x27;张三&#x27;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimages%5Cimage-20221112113213852.png" alt="image-20221112113213852"></p><h3 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h3><ul><li>删除表中的某条   记录</li></ul><blockquote><p>DELETE FROM 表明</p><p>​WHERE 条件</p></blockquote><ul><li>WHERE 条件不存在即删除所有记录</li></ul><p><img src="/%5Cimages%5Cimages%5Cimage-20221112150757034.png" alt="image-20221112150757034"></p><h3 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h3><h4 id="SELECT-查询语句"><a href="#SELECT-查询语句" class="headerlink" title="SELECT 查询语句"></a>SELECT 查询语句</h4><blockquote><p>SELECT [DISTINCT] (去除重复项) * | [列命1，列命2] FORM 表明</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE students( id INT NOT NULL DEFAULT 1, `name` VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;, chinese FLOAT NOT NULL DEFAULT 0.0, english FLOAT NOT NULL DEFAULT 0.0, math FLOAT NOT NULL DEFAULT 0.0 )CHARACTER SET utf8mb3 COLLATE utf8mb3_bin ENGINE INNOBASE; </span><br><span class="line">/*[15:17:14][16 ms]*/ ALTER TABLE students CHARACTER SET utf8mb4 COLLATE utf8mb4_bin; </span><br><span class="line">INSERT INTO students </span><br><span class="line">VALUES( 1, &#x27;张三&#x27;, 50, 50, 50),</span><br><span class="line">(2, &#x27;李四&#x27;, 40,40,40),</span><br><span class="line">(3, &#x27;李白&#x27;, 100,0,0),</span><br><span class="line">(4, &#x27;图灵&#x27;, 0, 100, 100),</span><br><span class="line">(5, &#x27;爱因斯坦&#x27;, 0, 100, 100),</span><br><span class="line">(6, &#x27;牛顿&#x27;, 0, 100, 100),</span><br><span class="line">(7, &#x27;我&#x27;, 30, 10, 10);</span><br></pre></td></tr></table></figure><ul><li><p>查询表中所有数据元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students;</span><br></pre></td></tr></table></figure></li><li><p>按列查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, `math` FROM students;</span><br></pre></td></tr></table></figure></li><li><p>查询中过滤重复数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT * FROM students;</span><br></pre></td></tr></table></figure></li></ul><h4 id="SELECT-查询结果运算"><a href="#SELECT-查询结果运算" class="headerlink" title="SELECT 查询结果运算"></a>SELECT 查询结果运算</h4><ul><li>使用表达式对查询的列进行运算</li></ul><blockquote><p>​SELECT * | {column1 | expression , column2 | expression ..}</p><p>​FROM table_name；</p></blockquote><ul><li><p>SLECT 查询中使用别名 as</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name as new_name FROM table_name;</span><br></pre></td></tr></table></figure></li></ul><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, (`math` + `english` + `chinese`) AS &#x27;总成绩&#x27; FROM students;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimages%5Cimage-20221112155104264.png" alt="image-20221112155104264"></p><h4 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h4><ul><li><img src="/%5Cimages%5Cimages%5Cimage-20221112155319919.png" alt="image-20221112155319919"></li></ul><h4 id="ORDER-BY-子句"><a href="#ORDER-BY-子句" class="headerlink" title="ORDER BY 子句"></a>ORDER BY 子句</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112162230170.png" alt="image-20221112162230170"></p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, (math + english + chinese) AS socre</span><br><span class="line">FROM students</span><br><span class="line">ORDER BY socre DESC;</span><br></pre></td></tr></table></figure><h4 id="Count-合计-x2F-统计函数"><a href="#Count-合计-x2F-统计函数" class="headerlink" title="Count 合计&#x2F;统计函数"></a>Count 合计&#x2F;统计函数</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112163021546.png" alt="image-20221112163021546"></p><p>count(column) 统计单个列时会 排除为null的记录 而如果是 查询表中全部 有一条记录为空 也会算做一条记录</p><p>与底层逻辑有关</p><ul><li><p>统计表中有多少条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) FROM students;</span><br></pre></td></tr></table></figure></li><li><p>统计总数学＞90的有多少人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(`name`) FROM students </span><br><span class="line">WHERE math &gt; 90</span><br><span class="line">ORDER BY `math`</span><br></pre></td></tr></table></figure></li></ul><h4 id="SUM（）"><a href="#SUM（）" class="headerlink" title="SUM（）"></a>SUM（）</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112164038972.png" alt="image-20221112164038972"></p><ul><li>只对数值有效，用法和count()一致</li></ul><h4 id="AVG（）"><a href="#AVG（）" class="headerlink" title="AVG（）"></a>AVG（）</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112164528616.png" alt="image-20221112164528616"></p><p> MAX（）&amp; MIN（）</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/%5Cimages%5Cimages%5Cimage-20221112165955897.png" alt="image-20221112165955897"></h4><h4 id="GROUP-BY-amp-HAVING（）"><a href="#GROUP-BY-amp-HAVING（）" class="headerlink" title="GROUP BY &amp; HAVING（）"></a>GROUP BY &amp; HAVING（）</h4><p><img src="/%5Cimages%5Cimages%5Cimage-20221112170304566.png" alt="image-20221112170304566"></p><h2 id="7-字符串常用操作"><a href="#7-字符串常用操作" class="headerlink" title="7.字符串常用操作"></a>7.字符串常用操作</h2><p><code>dual</code>  系统自带亚原表  没有实际意义 用于测试</p><p><code>CHARSET(str)</code> 返回字符串  -&gt;字符集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CHARSET(&#x27;张三&#x27;) FROM dual;</span><br></pre></td></tr></table></figure><p><code>CONCAT(str1, str2...)</code> -&gt; 拼接字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(&#x27;A&#x27;， &#x27;B&#x27;， &#x27;C&#x27;) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>STRCMP(str1, str2) </code>-&gt;  比较字符串  比较的是二进制数大小  不区分大小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT STRCMP(&#x27;abc&#x27;,&#x27;ABC&#x27;) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>SUBSTRING(str, position, length)</code>  截取字符串 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTRING(&#x27;abcdef&#x27;, 2, 4) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>LTRIM(str)</code>  &amp;  <code>RTRIM</code>(str)  &amp;  <code>TRIM(str)</code>   去除多余空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LTRIM(&#x27;   a&#x27;), RTRIM(&#x27;b   &#x27;), TRIM(&#x27;  ab  &#x27;) FROM DUAL; -- -&gt;a,b,ab</span><br></pre></td></tr></table></figure><p><code>INSTR(str1, str2)</code> -&gt;查找子串在str1中的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSTR(&#x27;ABCD&#x27;, &#x27;C&#x27;) FROM DUAL; -- -&gt;3</span><br></pre></td></tr></table></figure><p>转换大小写  <code>UCASE(str)</code>  &amp;&amp; <code>LCASE(str)</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT UCASE(&#x27;abcde&#x27;), LCASE(&#x27;ABCDE&#x27;) FROM DUAL;</span><br></pre></td></tr></table></figure><p> 返回字符串长度 **返回的是字节长度 并非实际长度 <code>LENGTH(str)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(&#x27;你好世界&#x27;) FROM DUAL;  -- 3 * 4  --- &gt; 12</span><br></pre></td></tr></table></figure><p><code>REPLACE(str1, serch_str, replace_str)</code> 在原str字符串 查找子串serch_str 并替换成replace_str</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPLACE(&#x27;abcde&#x27;, &#x27;c&#x27;, &#x27;第三个字符&#x27;) FROM DUAL; -- ab第三个字符de</span><br></pre></td></tr></table></figure><p>栗子： name 首字母大写其余小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT( UCASE( SUBSTRING(`name`, 1, 1) ) , LCASE( SUBSTRING(`name`, 2) ) )  FROM students;</span><br></pre></td></tr></table></figure><h2 id="8-MATH常用函数"><a href="#8-MATH常用函数" class="headerlink" title="8.MATH常用函数"></a>8.MATH常用函数</h2><p><code>ABS(num)</code> 返回绝对值 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ABS(-233.333) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>BIN()</code>   十进制转二进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT BIN(10) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>CONV(num, from_case, to_case)</code> -》 将num  （from_case 当前进制）  转换为 to_case 进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONV(16, 10, 16) FROM DUAL;</span><br></pre></td></tr></table></figure><p><code>HEX(num)</code>   转换为16进制 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT HEX(16) FROM DUAL;</span><br></pre></td></tr></table></figure><p>上下取整 <code>CEIL(float)</code>  &amp;&amp; <code>FLOOR(float)</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CEIL(-11.111) FROM DUAL;</span><br></pre></td></tr></table></figure><p>保留几位小数<code>FROMAT(num, bit) </code> 自动四舍五入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FORMAT(12.2225, 3) FROM DUAL;</span><br></pre></td></tr></table></figure><p>取模<code>mod(num, num)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MOD(10, 3) FROM DUAL;</span><br></pre></td></tr></table></figure><p>返回随机数 ， 默认种子 时间真随机 ，自己参数种子 自添加伪随机</p><p><code>rand(种子)</code>  0 ≤ n ≤ 1.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT RAND() FROM DUAL;</span><br></pre></td></tr></table></figure><h2 id="9-时间日期相关函数"><a href="#9-时间日期相关函数" class="headerlink" title="9.时间日期相关函数"></a>9.时间日期相关函数</h2><p><code>CURRENT()</code> 返回当前日期</p><p><code>CURRENT_TIME()</code> 返回当前时间</p><p><code>CURRENT_TIMESTAMP()</code> 当前时间戳</p><p><code>NOW()</code> 返回当期时间和日期</p><p><code>DATE(datetime)</code> 返回 datetime的日期部分</p><p><code>DATE_ADD(date2, INTERVAL d_value d_type)</code> date2基础上加日期或者时间  d_type 年月日 时分秒 周都可以</p><p><code>DATE_Sub(date2, INTERVAL d_value d_type)</code> date2基础上减日期或者时间d_type 年月日 时分秒 周都可以</p><p><code>DATEDIF(date1, date2)</code> 两个日期差(结果是天) -&gt; <code>TIMEDIF()</code> 时间差值  </p><p>截取时间<code>YEAR|DAY|MONTH(datetime)</code></p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2022/11/20/Programming%20Language/Java/IO%E6%B5%81/"/>
      <url>/2022/11/20/Programming%20Language/Java/IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><ul><li>Java  IO流<ul><li>输入流<ul><li>字节流  InputStream（抽象基类）</li><li>字符流  Reader（抽象基类）</li></ul></li><li>输出流<ul><li>字节流   OutStream（抽象基类）</li><li>字符流   Writer（抽象基类）</li></ul></li></ul></li></ul><h1 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h1><h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><p>字节输出流</p><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><p><img src="/image/image-20230115172315611.png" alt="image-20230115172315611"></p><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a><code>FileInputStream</code></h3><p>按字节读取文件内容，<code>read()</code>方法返回值为int ，底层基于C++ 返回的是unsigned byte 值 范围0-255</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\JavaIO\\&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> readDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file + <span class="string">&quot;\\&quot;</span> + <span class="string">&quot;test&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(file + <span class="string">&quot;\\&quot;</span> + <span class="string">&quot;test&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>((readDate = fileInputStream.read()) != -<span class="number">1</span>)&#123; </span><br><span class="line">                System.out.print((<span class="type">char</span>) readDate); </span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>read(byte[] buf)</code> 方法接受一个字节数组作为缓冲区，返回读入字节数，末尾返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fileContentOut</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/test.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];   <span class="comment">//将byte数组作为输入流缓冲区</span></span><br><span class="line">    <span class="type">int</span> readLenght;             <span class="comment">//接受返回的字节数个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//输入流：文件数据-》程序</span></span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//缓冲区每次获取文件数据  都在原数据的基础上覆写  返回个数</span></span><br><span class="line">        <span class="keyword">while</span>((readLenght = fileInputStream.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, readLenght)); </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件关闭..&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p>字符输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//按字符读取文件内容</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:/musci.txt&quot;</span>;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> readLength;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((readLength = fileReader.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span> , readLength));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h1><h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><p>字节输出流</p><h3 id="继承关系-1"><a href="#继承关系-1" class="headerlink" title="继承关系"></a>继承关系</h3><p><img src="/image/image-20230115180609899.png" alt="image-20230115180609899"></p><h3 id="OutputStream-1"><a href="#OutputStream-1" class="headerlink" title="OutputStream"></a><code>OutputStream</code></h3><p>OutputStream的 构造器可以指定末尾追加，字符集</p><p>字节输出，<code>write()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">fileCopy</span><span class="params">(String src, String target)</span> <span class="keyword">throws</span> RuntimeException, FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">file_src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(src);</span><br><span class="line">    File file_target;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> readLength;</span><br><span class="line"></span><br><span class="line">    FileInputStream fileInputStream;</span><br><span class="line">    FileOutputStream fileOutputStream;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">new</span> <span class="title class_">File</span>(target).isFile())&#123;</span><br><span class="line">        file_target = <span class="keyword">new</span> <span class="title class_">File</span>(target + <span class="string">&quot;\\&quot;</span> +file_src.getName());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        file_target = <span class="keyword">new</span> <span class="title class_">File</span>(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file_src);</span><br><span class="line">        fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file_target);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">null</span> || target == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(<span class="string">&quot;未找到相应文件&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!file_src.isFile())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(<span class="string">&quot;数据源不是一个文件&quot;</span>);</span><br><span class="line"></span><br><span class="line">    directory(file_src);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在复制文件..&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>((readLength = fileInputStream.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fileOutputStream.write(buffer, <span class="number">0</span>, readLength);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件复制成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件关闭成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件关闭失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><p>字符串输出流</p><p><img src="/image/image-20230116185720999.png" alt="image-20230116185720999"></p><p>字符输出流，必须实用<code>close()</code>方法或者<code>flush()</code>方法将内存中数据写入文件,才能生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:/music.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath, <span class="literal">true</span>);<span class="comment">//追加模式</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;helloworld!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结点流和处理流"><a href="#结点流和处理流" class="headerlink" title="结点流和处理流"></a>结点流和处理流</h1><p>Java   IO类使用了装饰器设计模式，在文件操作很多重复的操作，比如为了提高效率创建缓冲区多次读取操作，Java封装了很多相关方法</p><p>底层IO类     结点流    </p><p>封装各种操作的IO处理类   处理流</p><ul><li>不要用字符流去处理二进制文件</li></ul><p>如果使用字符流处理二进制入视频音乐，二进制编码的解码的流，会对文件造成损坏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:Kugou/Moon.mp3&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;f:Moon.mp3&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> readLine;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bufferedInputStream = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath));</span><br><span class="line">        bufferedOutputStream = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((readLine = bufferedInputStream.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bufferedOutputStream.write(buf, <span class="number">0</span>, readLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Copy成功 (*╹▽╹*)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(bufferedInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                bufferedOutputStream.close();</span><br><span class="line">                bufferedInputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>保存数据的值和数据类型保存到文件中，称为序列化</p><ul><li>可以序列化的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//类的   “版本号”</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SerialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday; <span class="comment">//自定义类型也要实现序列化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, <span class="type">int</span> age, Date birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(Date birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将数据序列化写入文件（字节流）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializable</span><span class="params">()</span>&#123; </span><br><span class="line">    <span class="comment">//序列化数据</span></span><br><span class="line">    <span class="comment">//数据对象必须实现Serializable接口</span></span><br><span class="line">    <span class="comment">//static, transient修饰的成员不会被序列化</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./test.dat&quot;</span>);</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ois = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line"></span><br><span class="line">        ois.writeInt(<span class="number">100</span>); <span class="comment">//使用对应的write方法 Int 会自动装箱Integer 这个类实现了Serializable 基础类型都有对应方法和实现</span></span><br><span class="line">        ois.writeObject(<span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;罗小黑&quot;</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">Date</span>())); <span class="comment">//Date这个自定义日期类也必须实现Serializable接口 不然会抛出NotSerializableExcetion异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><p>将保存文件数据恢复成    数值和数据类型的过程 反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserialization</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./test.dat&quot;</span>);</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//反序列化必须和序列化存取顺序必须一致</span></span><br><span class="line">        ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(ois.readInt());</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) ois.readObject();</span><br><span class="line">        System.out.println(cat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理细节：</p><ul><li><p>1）读写顺序要一致</p></li><li><p>2）序列和反序列化对象，需要实现Serializeble接口</p></li><li><p>3）序列化对象是添加SeriaVersionUID提高版本兼容性private static final long serialVersionUID &#x3D; 1L;</p><p>(SerialVersionUID 提高兼容性，当你在类中增加或者减少一个字段时，jvm虚拟机可能会认为这是连个不同的类，添加SerialVersionUID字段，则对比类时会参考这个字段的值来确定是否是同一个对象，简单来说就是使用这个字段，对原有类字段的增减不会导致异常)</p></li><li><p>4）序列化对象时，除了static和transient修饰的成员</p></li><li><p>5）序列化对象时，要求类中的所有类型都要实现序列化接口</p></li><li><p>6）序列化具有继承性，父类实现了序列化，子类默认实现</p></li></ul><h1 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h1><p><code>InputStreamReader</code>和<code>OutputStreamWrite</code></p><p>转化流是一个包装流（处理流）,对字节流进行了封装操作，但父类是字符流；提供了一个字节流相互转化为字符流的桥梁</p><p>字符流  &lt;—– （转换流， 指定编码格式） ——-&gt; 字节流</p><ul><li>字节流 指定编码 以字符流输出内容</li></ul><p>BufferedReader 是Reader子类  ，而Reader构造提供了传入Reader相关类</p><p> 而转换流是基于Reader的子类 ，而转换类有提供字节流的构造。</p><p>有点绕</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transformatino</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./test.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//套娃 就硬套</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(</span><br><span class="line">                                                    <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file), <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">        System.out.println(bfr.readLine());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节流输出 指定编码 以字符流输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transformatino2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./test.txt&quot;</span>);</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bfw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bfw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file), <span class="string">&quot;Gbk&quot;</span>));</span><br><span class="line">        bfw.write(<span class="string">&quot;呵呵呵呵&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bfw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h1><h2 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h2><p><code>PrintStream</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out; <span class="comment">//System.out 系统输出流 默认屏幕</span></span><br><span class="line">    out.print(<span class="string">&quot;hello-world&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//print()底层 基于write()字节方法  下面方法上述方法相同</span></span><br><span class="line">    out.write(<span class="string">&quot;helloworld&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出到文件中</span></span><br><span class="line">    <span class="comment">//列：更标准输出，将标准输出流 到屏幕 改为到文件</span></span><br><span class="line">    System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;e:/test.txt&quot;</span>));</span><br><span class="line">    out.print(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;helleworld&quot;</span>);</span><br><span class="line"></span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h2><p><code>PrintWrite</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(System.out);</span><br><span class="line"></span><br><span class="line">    printWriter.print(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">printWriter1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/t.txt&quot;</span>));</span><br><span class="line">    printWriter1.print(<span class="string">&quot;打印到文件中&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭文件才会刷新到文件中 也可以调用flush()</span></span><br><span class="line">    printWriter.close();</span><br><span class="line">    printWriter1.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><p>Java 配置文件 </p><p>键值对形式，键值对不能有空格也不能使用引号和</p><blockquote><p>USER&#x3D;ROOT</p><p>PSW&#x3D;123</p></blockquote><ul><li>使用Properties类读取文件中的配置信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Properties 读取配置文件</span></span><br><span class="line">    <span class="comment">//Properties 是hashtable的子类</span></span><br><span class="line">    <span class="comment">//1.加载配置文件</span></span><br><span class="line">    properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;./mysql.Properties&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.  两种打印操作和hashtable 类似</span></span><br><span class="line">    <span class="comment">// 传入输出流</span></span><br><span class="line">    properties.list(System.out);</span><br><span class="line">    System.out.println(properties);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取指定的v</span></span><br><span class="line">    System.out.println(properties.getProperty(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用Properties 创建 修改配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//使用Properties创建修改信息</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    <span class="comment">//首先添加k-v 修改</span></span><br><span class="line">    properties.setProperty(<span class="string">&quot;charset&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;pwd&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用store方法传入文件输出流</span></span><br><span class="line">    <span class="comment">//如果有中文字符 保存为unicode码</span></span><br><span class="line">    properties.store(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test.Properties&quot;</span>), <span class="string">&quot;配置注释&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础 1</title>
      <link href="/2022/11/20/Programming%20Language/Java/Java%E5%9F%BA%E7%A1%80%201/"/>
      <url>/2022/11/20/Programming%20Language/Java/Java%E5%9F%BA%E7%A1%80%201/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-day6"><a href="#Java-day6" class="headerlink" title="Java day6"></a>Java day6</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>（Object Oriented Programming，OO）</strong></p><h3 id="1-面向对象的思想"><a href="#1-面向对象的思想" class="headerlink" title="1.面向对象的思想"></a>1.面向对象的思想</h3><ul><li><p>面向过程思想</p><ul><li>线性思维，一步一步做，步骤清晰简单适合一些较为简单的问题</li><li>适合解决一些小的问题</li><li>造轮子</li><li>自下而上的过程</li></ul></li><li><p>面向对象思想</p><ul><li>物以类聚，分类的思维模式，思考问题首先解决问题需要那些分类。最终才对某个分类下的细节进行全面向过程的思索。</li><li>面向对象更适合处理一些复杂的问题，是和处理需要多人协作的问题。</li><li>造车</li><li>自上而下的过程</li></ul></li><li><p>对于描述复杂的食物，为了从宏观上把握，从整体上合理的分析。</p></li></ul><h3 id="2-面向对象三大特性"><a href="#2-面向对象三大特性" class="headerlink" title="2.面向对象三大特性"></a>2.面向对象三大特性</h3><ul><li>封装</li><li>继承</li><li>多台</li></ul><h3 id="3-类与对象的关系"><a href="#3-类与对象的关系" class="headerlink" title="3.类与对象的关系"></a>3.类与对象的关系</h3><ul><li><p>从认识论的角度考虑是，<strong>先有对象后有类。对象，是具体的事物。类是对对象的抽象</strong>。</p></li><li><p>在编程中是相反的，是先有类后又对象。类是对象的模板。</p></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="1-类-方法"><a href="#1-类-方法" class="headerlink" title="1.类-方法"></a>1.类-方法</h3><ul><li>定义一个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    修饰符 返回值类型 方法名(....)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个类中只能有一个public class</li></ul><h3 id="2-break-和-return区别"><a href="#2-break-和-return区别" class="headerlink" title="2.break 和 return区别"></a>2.break 和 return区别</h3><ul><li><p>return</p><ul><li>函数的结束</li><li>返回值必须与函数返回值一样</li></ul></li><li><p>break</p><ul><li>跳出循环</li></ul></li></ul><h3 id="补充-可变形参"><a href="#补充-可变形参" class="headerlink" title="补充 可变形参"></a>补充 可变形参</h3><ul><li><p>Java中函数参数不确定有多少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    修饰符 返回值类型 方法名(....)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    可变形参</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(<span class="type">int</span> ...i)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;这个函数可以有多个参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> ...i)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;函数为可变形参时候要注意，可变形参必须在最后一位&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>补充 ，一个函数定义只能一个可变形参，多个形参会报错</li></ul></li></ul><h3 id="3静态方法与非静态方法调用"><a href="#3静态方法与非静态方法调用" class="headerlink" title="3静态方法与非静态方法调用"></a>3静态方法与非静态方法调用</h3><ul><li>静态方法 在定义类的时候就创建</li><li>非静态方法 实例化一个对象后才存在</li><li>静态方法与非静态方法不是在一个层级，静态与类一起加载而非静态与实例化对象一起加载，<ul><li>定义一个类，静态方法不能调用非静态方法（静态方法存在时，非静态方法还是未定义）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">static_say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用静态方法 public&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用非静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学生类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//     静态方法调用</span></span><br><span class="line">        Student.static_say();</span><br><span class="line"><span class="comment">//        Student.say();//这是一个非static修饰的方法 非静态方法只能创建一个实列对象来初始化</span></span><br><span class="line"><span class="comment">//      非静态方法调用   实例化这个类</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4Java是值传递"><a href="#4Java是值传递" class="headerlink" title="4Java是值传递"></a>4Java是值传递</h3><ul><li><p>通过函数实参传递给形参时，不会改变实际参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.Skr.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="comment">//  静态方法调用</span></span><br><span class="line">        Student.static_say();</span><br><span class="line"><span class="comment">//        Student.say();//这是一个非static修饰的方法 非静态方法只能创建一个实列对象来初始化</span></span><br><span class="line"><span class="comment">//      非静态方法调用   实例化这个类</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//        通过实例化才能 通过实例化对象使用非静态方法</span></span><br><span class="line">        student.say();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过引用改变其值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">//        输出为空</span></span><br><span class="line">        System.out.println(person.name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        引用传递改变其值</span></span><br><span class="line">        change(person);</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">        p.name = <span class="string">&quot;通过引用改变的值&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-new关键字"><a href="#5-new关键字" class="headerlink" title="5.new关键字"></a>5.new关键字</h3><p>类似于C中 malloc()</p><ul><li><p>使用new关键字创建对象，除了分配内存空间之外，<strong>还会给创建好的对象进行默认的初始化以及对类中的构造器的调用</strong></p></li><li><p>类中的构造器也称为构造方法，构造函数是在进行创建对象的时候必须要调用的，并且构造器有一个特点</p><ul><li>必须和类的名字相同</li><li>必须没有返回类型，也不能写void</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.Skr.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//       类实例化后会返回一个自己的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.study();</span><br><span class="line"></span><br><span class="line">        student.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        student.study();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x学生类</span></span><br><span class="line"><span class="keyword">package</span> com.Skr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ps 类中属性 要声明public 外部才能访问，否则只能通过内部方法调用</li></ul><h2 id="1-访问权限"><a href="#1-访问权限" class="headerlink" title="1.访问权限"></a>1.访问权限</h2><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>公告的，所有包内包外都可以访问的</p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>包访问权限，在<strong>自己包内可以随意访问</strong></p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>私有的，自己类可访问</p><h2 id="2-getter-amp-setter"><a href="#2-getter-amp-setter" class="headerlink" title="2.getter &amp; setter"></a>2.getter &amp; setter</h2><ul><li><p>setter：主要给成员变量赋值的成员方法，做一定保护；</p></li><li><p>getter：从成员变量中获取值的成员方法；</p></li><li><p>通过成员方法访问或更改，给成员属性给予保护，使程序更加健壮</p></li><li><p>Idea 可以通过getter和setter 自动添加其方法</p></li></ul><p><img src="/image/image-20221029090820497.png" alt="image-20221029090820497"></p><h2 id="3-继承"><a href="#3-继承" class="headerlink" title="3.继承"></a>3.继承</h2><ul><li>子类自动拥有父类中除了私有内容外的其他所有</li></ul><blockquote><p>继承：</p><p>public class 子类 extends 父类{</p><p>}</p></blockquote><ul><li>私有内容不能被继承</li><li>类不能加private修饰</li></ul><p>作用：简化代码的开发</p><p>子类是对父类进行扩展</p><p>思想：子类对父类的继承，将某种具有部分相同属性功能的类再进行抽象，建立一个共有属性的类，其余子类通过继承该父类，从而使开发变得更为简洁明了</p><h2 id="4-super"><a href="#4-super" class="headerlink" title="4.super"></a>4.super</h2><ul><li>变量的查找顺序，先找自己类然后再找父类，就近原则；</li><li>如果想要访问父类中的内容</li></ul><blockquote><p>super.*; 可访问子类中与父类重名的内容</p></blockquote><ul><li>在创建每一个子类对象时，编译器并为其分配内存，都在子类对象中隐式声明创建了一个父类并且先执行创建父类。而这个父类就是super</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础 2</title>
      <link href="/2022/11/20/Programming%20Language/Java/Java%E5%9F%BA%E7%A1%80%202/"/>
      <url>/2022/11/20/Programming%20Language/Java/Java%E5%9F%BA%E7%A1%80%202/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Day-12"><a href="#Java-Day-12" class="headerlink" title="Java Day 12"></a>Java Day 12</h1><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>优点：代码十分简洁、优雅 能解决一些实际问题</p><p>缺点：问题规模越大 效率指数递增 </p><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Object;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(fb(<span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fb</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span> || i == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           <span class="keyword">return</span> fb(i - <span class="number">1</span>) + fb(i - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="猴子吃桃"><a href="#猴子吃桃" class="headerlink" title="猴子吃桃"></a>猴子吃桃</h3><p>每天吃一半再多吃一个  第10天 还没吃 只剩下 1个  问第一天</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Object;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println( qestion(<span class="number">10</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">qestion</span><span class="params">(<span class="type">int</span> day, <span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (day &gt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> qestion(day - <span class="number">1</span>, (sum + <span class="number">1</span>) * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h3><p>深搜 和 宽优</p><p>一个矩阵 2为出口 1为障碍 找出最路径 输出步数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">99999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化边界</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; map[<span class="number">0</span>].length; i ++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; map.length; i++)&#123;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调试的</span></span><br><span class="line">        map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//出口</span></span><br><span class="line">        map[<span class="number">4</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">4</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调试用的乱的一比</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; map.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            for (int j = 0; j &lt; map[i].length; j++)</span></span><br><span class="line"><span class="comment">//                System.out.print(map[i][j] + &quot;  &quot;);</span></span><br><span class="line"><span class="comment">//            System.out.println();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(find(map, 1, 1));</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; map.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            for (int j = 0; j &lt; map[i].length; j++)</span></span><br><span class="line"><span class="comment">//                System.out.print(map[i][j] + &quot;  &quot;);</span></span><br><span class="line"><span class="comment">//            System.out.println();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        System.out.println(find_min(map, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; map[i].length; j++)</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find_min</span><span class="params">(<span class="type">int</span> map[][], <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> set)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map[x][y] == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; set)    <span class="comment">//找到一个更优路径</span></span><br><span class="line">                i = set;</span><br><span class="line">            <span class="keyword">return</span> set;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (map[x][y] == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> set;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (map[x][y] == <span class="number">0</span> )&#123;</span><br><span class="line">            map[x][y] = <span class="number">3</span>;</span><br><span class="line">            find_min(map, x + <span class="number">1</span>, y, set + <span class="number">1</span>);</span><br><span class="line">            find_min(map, x, y + <span class="number">1</span>, set + <span class="number">1</span>);</span><br><span class="line">            find_min(map, x - <span class="number">1</span>, y, set + <span class="number">1</span>);</span><br><span class="line">            find_min(map, x, y - <span class="number">1</span>, set + <span class="number">1</span>);</span><br><span class="line">            map[x][y] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> set;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> map[][], <span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map[x][y] == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (map[x][y] == <span class="number">0</span> )&#123;</span><br><span class="line">            map[x][y] = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(find(map, x + <span class="number">1</span>, y))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (find(map, x, y + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(find(map, x - <span class="number">1</span>, y))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(find(map, x, y - <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="汉罗塔问题"><a href="#汉罗塔问题" class="headerlink" title="汉罗塔问题"></a>汉罗塔问题</h3><p><img src="/%5Cimages%5Cimage-20221115124620126.png" alt="image-20221115124620126"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>对于同一方法，参数类型相同，长度不确定可以选用</p><p><code>function(int... a)</code> </p><ul><li>可变参数可以为数组</li><li>可变参数长度 0&lt;&#x3D; n</li><li>可变参数本质就是一个数组引用</li><li>如果函数入口还有其他参数可变参数必须在最后一个位置</li><li>可变参数形参中只能有一个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(VarP(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">10</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">VarP</span><span class="params">(<span class="type">int</span>[]... num)</span>&#123;<span class="comment">//可变参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num.length; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; num[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[i][j] &gt; max)</span><br><span class="line">                    max = num[i][j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  max;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="x3D-x3D-和-equals"><a href="#x3D-x3D-和-equals" class="headerlink" title="&#x3D;&#x3D; 和 equals"></a>&#x3D;&#x3D; 和 equals</h1><p>比较方法</p><ul><li>&#x3D;&#x3D;比较的是值变量的值是否相等，这里就要区分基础类型和引用类型，引用变量的值实际上是存储的是一个地址，而基本数据类型的值就是其本身存储值；</li><li>equals（） 判断的是地址是否相等，只能判断引用类型</li></ul><p>特殊:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">== <span class="comment">//faluse</span></span><br><span class="line">equals <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>大多数语言会对字符串进行优化，相同的字符串在堆栈只有一个。</p><h1 id="Object-超类"><a href="#Object-超类" class="headerlink" title="Object 超类"></a><code>Object</code> 超类</h1><h2 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode()"></a><code>hashcode()</code></h2><ul><li>提高哈希结构的容器效率</li><li>每个引用对象，都有一个不同的哈希值</li><li>哈希值主要根据地址来计算的</li><li>可以重写</li></ul><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a><code>toString()</code></h2><p>返回全类名（包名+类名）@ hashcode 16进制</p><p>可重写打印一些类信息</p><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="包装类分类-WrapperType-java"><a href="#包装类分类-WrapperType-java" class="headerlink" title="包装类分类 WrapperType.java"></a>包装类分类 WrapperType.java</h2><p><img src="/%5Cimages%5Cimage-20221120203454723.png" alt="image-20221120203454723"></p><p><img src="/%5Cimages%5Cimage-20221120203929854.png" alt="image-20221120203929854"></p><p><img src="/%5Cimages%5Cimage-20221120204010068.png" alt="image-20221120204010068"></p><p>父类：Number </p><h3 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h3><p>JDK5以前没有自动装拆箱，JDK5以后有了自动的特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jdi.ClassType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 手动装箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">_1n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(n);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">_2n</span> <span class="operator">=</span> Integer.valueOf(n);</span><br><span class="line">        System.out.println(_1n.getClass());</span><br><span class="line">        System.out.println(_2n);</span><br><span class="line">        <span class="comment">//自动装箱 jdk 5 以后</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> n;</span><br><span class="line">        System.out.println(i.getClass());</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动装箱底层逻辑依旧是使用包装类<code>valueof()</code>方法操作的！</p><p>补充：三元运算符是一个整体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="literal">true</span> ? <span class="number">1</span> : <span class="number">1.1</span>);</span><br></pre></td></tr></table></figure><p>输出 的是1.0而不是1 。 因为 三元运算符是一个整体  当前最大的类型是double  因为机制会向上转换为double 1—&gt; 1,0</p><h3 id="String-lt-转换-gt-Integer"><a href="#String-lt-转换-gt-Integer" class="headerlink" title="String &lt;-   转换     -&gt; Integer"></a>String &lt;-   转换     -&gt; Integer</h3><p>Interger转String包装类  三种方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">233</span>;<span class="comment">//自动装箱 233 为int  </span></span><br><span class="line"> <span class="comment">//自动装箱</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> i.toString();</span><br><span class="line"> <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line"> System.out.println(str + str2 + str3);</span><br></pre></td></tr></table></figure><p>String -&gt;Interger 2种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(str);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line">        System.out.println(i1 + i2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>面试题：使用&#x3D;&#x3D; 判断值相等的时候</p><ul><li>凡是new的 判断的是对象地址是否相等</li><li>&#x3D;&#x3D;一边有基础类型 那就是判断值是否相等</li><li>使用自动装箱的封装类 判断的是底层valueOf() 返回的值是否相等<ul><li>Integer 底层valueOf low-128  heigh 是 127 这个区间内不会new 值  具体情况看底层源码</li></ul></li></ul><h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/%5Cimages%5Cimage-20221120215917665.png" alt="image-20221120215917665"></p><ul><li><p>底层使用的是一个数组<code>private final char value[];</code> 存放的值 不可以修改</p><p>final 修饰的是 value 的值 值是地址 而不是具体数据 因此这个指向是不可变的</p><p>不可修改 指定是value 这个数组指针 不可修改 value 存放的数组地址不可改类似C 语言const 修饰的指针</p><p>value地址下的这个数组的值是可以更改的 </p><p>在时间操作中String 底层的数组是可变的 与上述结论矛盾？ 实际上每次更改是新建了一个全新对象（包含在常量池中创建字符串） 而并非更改了value引用 和 底层数据</p></li></ul><h2 id="String两种基本-创建方法"><a href="#String两种基本-创建方法" class="headerlink" title="String两种基本 创建方法"></a>String两种基本 创建方法</h2><ul><li><p>直接赋值 （装箱）</p><p>“123” 是字符串常量  存在于方法区中的常量池  JVM 先会从 常量池中找到123 字符串 并且直接指向该地址所以&#x3D;&#x3D;True</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">System.out.println(str == str1);</span><br></pre></td></tr></table></figure></li><li><p>通过各种构造器</p><p>流程 str 在常量池中找123 如果不存在则新建    str2  先是在堆中创建了其String对象 str2指向该对象  然后由对象中的value[] 数组在常量池中找 字符串123 并指向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(str == str2);</span><br><span class="line">        System.out.println(str.hashCode());</span><br><span class="line">        System.out.println(str2.hashCode());</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><img src="/%5Cimages%5Cimage-20221120221839736.png" alt="image-20221120221839736"></p><h2 id="intern-方法"><a href="#intern-方法" class="headerlink" title="intern() 方法"></a>intern() 方法</h2><p>返回Stirng 对象中 value          在常量池的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(str == str2.intern());<span class="comment">//等价于 str == str</span></span><br></pre></td></tr></table></figure><p>out  true</p><h2 id="字符串特性"><a href="#字符串特性" class="headerlink" title="字符串特性"></a>字符串特性</h2><p>简单的栗子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;adc&quot;</span>  <span class="comment">//等价于  &quot;helloabc&quot; 编译器做了优化</span></span><br></pre></td></tr></table></figure><p>因此 看起来像是创建了三个 字符串常量”hello” “abc” “helloabc”  </p><p>实际上编译器为我们做了优化  只创建一个”helloabc”  常量</p><p>栗子2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;常量池&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">char</span>[] ary = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">char</span>[] ary2 =  &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str, <span class="type">char</span>[] ary, <span class="type">char</span>[] ary2)</span>&#123;</span><br><span class="line">        str = <span class="string">&quot;hellow&quot;</span>;<span class="comment">//这里实际上进行了一个装箱操作 str 指向的地址已经改变了</span></span><br><span class="line">        ary[<span class="number">0</span>] = <span class="string">&#x27;c&#x27;</span>;<span class="comment">//数组存储在堆中 这个操作也改变了Demo对象中的ary的值</span></span><br><span class="line">        ary2[<span class="number">0</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo1</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo1</span>();</span><br><span class="line">        text.change(text.str, text.ary, text.ary2);</span><br><span class="line">        System.out.println(text.str);</span><br><span class="line">        System.out.println(text.ary);</span><br><span class="line">        System.out.println(text.ary2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="StirngBuffer"><a href="#StirngBuffer" class="headerlink" title="StirngBuffer"></a>StirngBuffer</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>可变的字符序列，可以对字符串内容进行更改</li><li>String类的扩展，可变长字符串  </li><li>StringBuffer 实现了Serializeble 接口， 可以进行串型化（可在网络中传输）</li><li>在String 父类中的实现了<code>AbstractStringBuilder</code> 有属性<code>char[] value</code>  而String 是本身final 修饰的 char[]，因此StringBuffer 的底层数组是可变的 而不是final常量 可变长 并且存储在堆中 而不是方法区的常量池</li><li>StringBuffer 是final类 不可以被继承</li></ul><h2 id="对比String类优点"><a href="#对比String类优点" class="headerlink" title="对比String类优点"></a>对比String类优点</h2><p>主要体现在更改字符串 的 <code>效率</code></p><ul><li><code>String</code> 底层是字符串常量，底层字符串 <code>private final char value[]</code> 意味着每次改变String 字符串 实际上是 新建 或 从常量池 中找到一个 字符串常量， 并且更新 String 对象的指向  简单来说就是效率低</li><li><code>StringBuffer</code>  的底层数组是<code>char[] value</code>  并不是 常量   保存的是字符串变量 是在堆中的 是可以更改 原本的数组，并没有创建新的内容，效率相对较高</li></ul><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>String  转为 StringBuffer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认16长度</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="comment">//给定一个长度</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//给定一个字符串  给定的字符串长度+16  这里为 26</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line"><span class="comment">//append 方法</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">str4.append(<span class="string">&quot;helloworld&quot;</span>);</span><br></pre></td></tr></table></figure><p> StringBuffer 转 String</p><p><code>toString()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">strb</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> strb.toString();</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;helloworld2&quot;</span>));</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>增删改查</p><p> <img src="/%5Cimages%5Cimage-20221122115248368.png" alt="image-20221122115248368"></p><p> 补充：</p><p>StringBuffer() 构造不能用null 而append 可以为空 实际上String 指向空的时候 是指向了一个表示<code>null</code>字符串</p><p>append 可以添加这个字符串   而构造器直接抛出异常 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        str.append(str1);</span><br><span class="line">        System.out.println(str.length());</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        System.out.println(str.length());</span><br><span class="line">        <span class="comment">//StringBuffer str = new StringBuffer(null);  NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h1><h2 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h2><ul><li>可变的字符序列 提供一个与StringBuffer兼容的api，但不保证同步 (不是线程安全),</li><li>单线程使用最优</li><li>StringBuffer的替代品 基础关系和它一模一样</li><li>实现了Serializibale 可以串行化</li><li>多线程不建议使用</li></ul><p>上代码看效率，下面代码 对字符串反复修改</p><p>StringBuilder&gt;StringBuffer&gt; String(效率)</p><p>这可不是倍数，这是指数级的差距</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Time;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str_text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">str_buff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">str_buider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8000</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">            str_buider.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;Stringbuilder&quot;</span>+(end - start));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">            str_buff.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;StringBuffer&quot;</span>+(end - start));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">            str_text += i;</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;String&quot;</span>+(end - start));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimage-20221122132514358.png" alt="image-20221122132514358"></p><h1 id="String总结"><a href="#String总结" class="headerlink" title="String总结"></a>String总结</h1><p>对于字符串 java提供了3个类，<code>String</code> 、<code>StringBuffer</code>, <code>StringBuilder</code>优势互补，String 要相对劣势一些</p><ul><li><p><code>String</code> </p><ul><li>底层char[] 数组 为<code>private final char[] value</code> ，字符串常量 ，字符串被创建于常量池中</li><li>重用率高，大部分编译器都有这个特性对相同的字符串常量只存储一份， 节约内存开销</li><li>如果字符串要进行大量的增删操作，效率非常低，对非常低（原因 字符串常量不可修改， String是一个不可变的字符序列）</li></ul></li><li><p><code>StringBuffer</code> </p><ul><li>底层<code>char[] value</code>  可变的字符串序列  栈中存储的</li><li>继承关系可查看源码，实现了<code>Serializeble</code>接口 ， 可串行化用于网络输出</li><li>增删改查效率非常高</li><li>它是一个线程安全的</li></ul></li><li><p><code>StringBuilder</code></p><ul><li>它的继承关系和StringBuffer 一样 所以StringBuffer 有的特性大多它也有</li><li>它不是一个线程安全的</li><li>效率比Buffer 还要高</li></ul></li></ul><p>结论：特点环境用特定类型</p><p>只要涉及大量的修改操作Buffer  YYDS ， Builder 如果是单线程且伴随大量修改 Builder更优</p><p>如果只是简单使用并没有大量的修改，并且被大量对象指向（常量池中的字符串），显然String</p><p>最优，</p><p>别杀鸡用牛刀..</p><h1 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h1><p>简化了数组操作</p><ul><li>多是静态方法</li></ul><p><code>toStirng()</code> 字符串序列化输出 可以替换掉for</p><p><code>sort(arr, Comparator&lt;&gt;)</code> 排序 看了下源码 应该是快排 参数而接受一个Comparator 接口 使用这个方法</p><p>我们需要，创建一个匿名内部类类 重载Comparator 中的 compare（） 方法</p><p>自定义排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.processing.Completion;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Book[] books = <span class="keyword">new</span> <span class="title class_">Book</span>[<span class="number">4</span>];</span><br><span class="line">        books[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;红楼梦&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        books[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;金瓶梅新&quot;</span>, <span class="number">90</span>);</span><br><span class="line">        books[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;青年文摘20年&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        books[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Java从入门到放弃&quot;</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(books, <span class="keyword">new</span> <span class="title class_">Comparator</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="type">Book</span> <span class="variable">b1</span> <span class="operator">=</span> (Book) o1;</span><br><span class="line">                <span class="type">Book</span> <span class="variable">b2</span> <span class="operator">=</span> (Book) o2;</span><br><span class="line"></span><br><span class="line">                <span class="type">double</span> <span class="variable">re</span> <span class="operator">=</span> b2.price - b1.price;</span><br><span class="line">                <span class="keyword">if</span> (re &gt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (re &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(books));</span><br><span class="line">        Arrays.sort(books, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Book&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Book o1, Book o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.name.length() - o2.name.length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(books));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&quot;,&quot;</span> +  <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>binarySerch(arr, value)</code> 二叉查找 ，前提arr 数组是有序的 返回index  不存在返回-1</p><p><code>copyOf(arr, arr.length)</code> 相当于一个对数组切片操作  返回一个新数组 length 可以超过本身数组长度 超出部分null</p><p><code>fill(arr， replace)</code> 替换原来数组值 </p><p><code>equals(arr1, arr2)</code>  字符串也重载了这个方法 对比各元素值是否相等</p><p><code>asList()</code></p><h1 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h1><p>比较常用的方法</p><p><code>arraycopy()</code></p><p>接受5个参数 src, scrPos(源数组位置),dest,destPos(目标数组开始位置),length(拷贝长度)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        arraycopy(arr1, <span class="number">0</span>, arr2, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        out.println(Arrays.toString(arr2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>currentTimeMillis()</code> 返回从1970-1-1 到现在毫秒数</p><h1 id="BigInteger-BigDecimal"><a href="#BigInteger-BigDecimal" class="headerlink" title="BigInteger  BigDecimal"></a>BigInteger  BigDecimal</h1><p>一个数非常大超过了long 可以使用BigInteger 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;233333333333333333333333333333333333&quot;</span>);<span class="comment">//需要用字符串的形式传入</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigInteger1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;12321&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//运算操作需要用BigInteger中的方法</span></span><br><span class="line">        <span class="comment">//并不会改变原本数据 是生成新的数</span></span><br><span class="line">        System.out.println(bigInteger1.add(bigInteger));</span><br><span class="line">        System.out.println(bigInteger.add(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;2333&quot;</span>)));</span><br><span class="line">        System.out.println(bigInteger.subtract(bigInteger));<span class="comment">//－</span></span><br><span class="line">        System.out.println(bigInteger.multiply(bigInteger));<span class="comment">//*</span></span><br><span class="line">        System.out.println(bigInteger.divide(bigInteger));<span class="comment">//÷</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BigDecimal</p><p>注意：divide方法 除可能会得到一个无理数 会抛出异常ArithmeticException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bigInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2333333333333333.33333333333333333333&quot;</span>);<span class="comment">//需要用字符串的形式传入</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bigInteger1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1232.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//并不会改变原本数据 是生成新的数</span></span><br><span class="line">        System.out.println(bigInteger1.add(bigInteger));</span><br><span class="line">        System.out.println(bigInteger.add(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2333&quot;</span>)));</span><br><span class="line">        System.out.println(bigInteger.subtract(bigInteger));<span class="comment">//－</span></span><br><span class="line">        System.out.println(bigInteger.multiply(bigInteger));<span class="comment">//*</span></span><br><span class="line">        System.out.println(bigInteger.divide(bigInteger));<span class="comment">//÷  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(bigInteger.divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3&quot;</span>)));<span class="comment">//÷</span></span><br></pre></td></tr></table></figure><p>此时抛出异常</p><p><img src="/%5Cimages%5Cimage-20221123154843537.png" alt="image-20221123154843537"></p><p>可以使用BigDecimal中的属性ROUND_CEILING  保留几位小数 这个被弃用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(bigInteger.divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3&quot;</span>), BigDecimal.ROUND_CEILING));<span class="comment">//÷</span></span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimage-20221123155123490.png" alt="image-20221123155123490"></p><h1 id="Calender"><a href="#Calender" class="headerlink" title="Calender"></a>Calender</h1><p>第二代时间类</p><p>抽象类构造器是私有的  通过类中静态方法<code>getlnstance()</code> 创建对象</p>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础 3</title>
      <link href="/2022/11/20/Programming%20Language/Java/Java%E5%9F%BA%E7%A1%80%203/"/>
      <url>/2022/11/20/Programming%20Language/Java/Java%E5%9F%BA%E7%A1%80%203/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象、构造器调用顺序"><a href="#面向对象、构造器调用顺序" class="headerlink" title="面向对象、构造器调用顺序"></a>面向对象、构造器调用顺序</h2><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>面向过程：自下而上</li><li>面向对象：自上而下</li></ul><h3 id="对象有什么？"><a href="#对象有什么？" class="headerlink" title="对象有什么？"></a>对象有什么？</h3><p>属性：成员变量来描述，直接写在类中的变量</p><p>方法：定义在类中的函数也叫成员方法</p><p>new 关键字创建一个方法，new的过程叫做创建对象</p><ul><li><p>java分为两种数据类型：</p><ul><li>基本数据类型</li><li>引用数据类型(String和所有创建的类)</li></ul></li><li><p>非static修饰的方法必须通过对象或者引用去调用</p></li><li><p>对象中如果有属性大部分都相同可以先设置一个默认值</p></li></ul><h2 id="2-this"><a href="#2-this" class="headerlink" title="2.this"></a>2.this</h2><p>在调用方法的时候，java会自动把当前对象传递给方法，也就是this引用（隐式声明的一个引用）</p><ul><li>变量的查找顺序，一个方法内的局部变量，如果在类中有定义它会自己使用this访问本方法的属性，但是如果传递的形参和属性一样那它就会使用改形参。就近原则</li></ul><h4 id="this表示当前类的对象"><a href="#this表示当前类的对象" class="headerlink" title="this表示当前类的对象"></a>this表示当前类的对象</h4><h4 id="this可以访问成员属性"><a href="#this可以访问成员属性" class="headerlink" title="this可以访问成员属性"></a>this可以访问成员属性</h4><h4 id="this可以区分局部和成员变量"><a href="#this可以区分局部和成员变量" class="headerlink" title="this可以区分局部和成员变量"></a>this可以区分局部和成员变量</h4><h2 id="3-构造方法"><a href="#3-构造方法" class="headerlink" title="3.构造方法"></a>3.构造方法</h2><p>语法</p><blockquote><p>public 类名(参数{</p><p>}；</p></blockquote><ul><li><p>没有返回值；</p></li><li><p>执行new中会调用构造方法；</p></li><li><p>java会自动给每一个类一个无参数的构造方法，但如果你定义了这个就不存在了。</p></li></ul><p>构造方法会在创建对象的时候，给对象设置属性的信息；</p><ul><li>构造方法也是方法，也可以进行重载。能有更多的方法创建对象</li><li>如果一个类的两种构造方法十分类似</li></ul><p>this可以调用当前类中的其他构造方法，使代码变得更简洁。</p><blockquote><p>&#x2F;&#x2F;这是一个类的两个不同的构造方法</p><p>public a(int a，int b){</p><p>​this.a &#x3D; a;</p><p>​this.b &#x3D; b;</p><p>}</p><p>public a(int a，int b， int c){</p><p>​&#x2F;&#x2F;实用this调用第一个构造方法减少代码量使其更加简洁明了</p><p>this(a ，b)；</p><p>this.c &#x3D; c;</p><p>}</p></blockquote><h2 id="4-static"><a href="#4-static" class="headerlink" title="4.static"></a>4.static</h2><ul><li>static修饰的变量，在类中是单独独立的一块内存单元，所有类所创建的对象包括类本身都指向这块内存。<ul><li>数据共享</li><li>优先于对象产生(在类加载还未创建的时候)</li><li>注意用类来访问静态变量提高可读性</li></ul></li></ul><blockquote><p>java创建对象的过程主要分为一下五个步骤：<br>（1）类加载检查<br>Java虚拟机（jvm）在读取一条new指令时候，首先检查能否在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否被加载、解析和初始化。如果没有，则会先执行相应的类加载过程。</p><p>（2）内存分配<br>在通过（1）后，则开始为新生的对象分配内存。该对象所需的内存大小在类加载完成后便可确定，因此为每个对象分配的内存大小是确定的。而分配方式主要有两种，分别为：</p><p>1.指针碰撞</p><p>应用场合：堆内存规整（通俗的说就是用过的内存被整齐充分的利用，用过的内存放在一边，没有用过的放在另外一边，而中间利用一个分界值指针对这两边的内存进行分界，从而掌握内存分配情况）。</p><p>即在开辟内存空间时候，将分界值指针往没用过的内存方向移动向应大小位置即可）。</p><p>将堆内存这样划分的代表的GC收集器算法有：Serial，ParNew</p><p>2.空闲列表</p><p>应用场合;堆内存不规整（虚拟机维护一个可以记录内存块是否可以用的列表来了解内存分配情况）</p><p>即在开辟内存空间时候，找到一块足够大的内存块分配给该对象即可，同时更新记录列表。</p><p>将堆内存这样划分的代表的GC收集器算法有：CMS</p><p>（3）初始化默认值<br>第（2）步完成后，紧接着，虚拟机需要将分配到的内存空间都进行初始化（即给一些默认值），这将做是为了保证对象实例的字段在Java代码中可以在不赋初值的情况下使用。程序可以访问到这些字段对用数据类型的默认值。</p><p>（4）设置对象头<br>初始化（3）完成后，虚拟机对对象进行一些简单设置，如标记该对象是哪个类的实例，这个对象的hash码，该对象所处的年龄段等等（这些可以理解为对象实例的基本信息）。这些信息被写在对象头中。jvm根据当前的运行状态，会给出不同的设置方式。</p><p>（5）执行初始化方法<br>在（4）完成后，最后执行由开发人员编写的对象的初始化方法，把对象按照开发人员的设计进行初始化，一个对象便创建出来了。</p></blockquote><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><h5 id="Java构造器调用顺序"><a href="#Java构造器调用顺序" class="headerlink" title="Java构造器调用顺序"></a>Java构造器调用顺序</h5><p><strong>静态代码块static修饰</strong></p><p><strong>构造代码块无关键词修饰的代码块            {   }</strong></p><p><strong>构造器 构造方法</strong></p><p><strong>普通代码块类中的各类方法</strong></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><ul><li><p>无继承的情况下的执行顺序<strong>静态代码块</strong>：只在程序启动后执行一次，优先级最高<strong>构造代码块</strong>：任何一个构造器被调用的时候，都会先执行构造代码块，<strong>优先级低于静态代码块构造器</strong>：优先级低于构造代码块<strong>总结一下优先级：静态代码块 &gt; 构造代码块 &gt; 构造器</strong></p></li><li><p>有继承的情况下的执行顺序：父类静态代码块：只在程序启动后<strong>执行一次</strong>，<strong>优先级最高</strong> 子类静态代码块：只在程序启动<strong>后执行一次</strong>，<strong>优先级低于父类静态代码块</strong> 父类构造代码块：父类任何一个构造器被调用的时候，都会<strong>执行一次</strong>，优先级<strong>低于子类静态代码块父类构造器</strong>：优先级<strong>低于父类构造代码子类构造代码块</strong>：子类任何一个构造器被调用的时候，都会<strong>执行一次</strong>，优先级低于父类构造器子类构造器：优先级低于子类构造代码块总结一下优先级：<strong>父类静态代码块 &gt; 子类静态代码块 &gt; 父类构造代码块 &gt; 父类构造器 &gt; 子类构造代码块 &gt; 子类构造器</strong></p></li><li><p>如果有<strong>多个静态代码块则按编写顺序执行</strong></p></li><li><p>普通代码块，就是成员方法在创建类实例的时候出现</p><ul><li><p>5.普通代码块介绍</p><p>普通代码块又叫<strong>局部代码块</strong>是放在方法体中，<strong>在所有代码块之后执行</strong>，<strong>并只有调用该方法的时候才会执行。主要是存一些局部变量，因为他会随着方法体的退出而消失，所以他能够减少变量的生命周期，提高内存的使用效率。</strong></p><pre><code> 比如一些只有在某个方法才会用到的属性，计算房屋面积的方法中的一些单位等。</code></pre></li></ul></li><li><p>总结</p><p> 执行顺序：</p><p> 静态代码块》构造代码块》构造方法》普通代码块</p><p>继承关系</p><p>父类静态代码块&gt;子类静态代码块&gt;父类构造代码块&gt;构造方法&gt;子类构造代码块&gt; 子类构造器</p><p> 生命周期</p><p>  静态代码块》构造代码块&#x3D;构造方法》普通代码块</p><p>  代码块的作用主要是把一些程序运行中通用固定的操作给抽出来放在一起执行，具体业务场景选择性的使用各种代码块。</p></li><li><p><strong>静态方法中不能使用或者访问this(对象)<strong>，因为</strong>实例对象还未创建但静态方法已经存在</strong>，由此可见在静态方法中不能使用非静态变量以及对象中 的方法(但静态方法可以访问其他静态方法)</p></li></ul><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li><h4 id="Java中-包-类似于windows-文件夹-方便管理-和-使用"><a href="#Java中-包-类似于windows-文件夹-方便管理-和-使用" class="headerlink" title="Java中 包 类似于windows 文件夹 方便管理 和 使用"></a>Java中 包 类似于windows 文件夹 方便管理 和 使用</h4><p>包名尽量使用翻转域名。</p><p>com.baidu.tieba</p><p>上述相当于一个三层文件夹com&gt;baidu&gt;tieba</p><p>栗子：</p></li></ul><p><img src="/%5Cimages%5Cimage-20221028231038812.png" alt="image-20221028231038812"></p><h4 id="使用包中类"><a href="#使用包中类" class="headerlink" title="使用包中类"></a>使用包中类</h4><p>要加入packag **;   &#x2F;&#x2F;在什么路径下 包的声明   </p><p><img src="/%5Cimages%5Cimage-20221028231203309.png" alt="image-20221028231203309"></p><h4 id="不同路径下使用其文件的类"><a href="#不同路径下使用其文件的类" class="headerlink" title="不同路径下使用其文件的类"></a>不同路径下使用其文件的类</h4><p>improt **.Student；&#x2F;&#x2F;导入包 导入Student类  </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>package 声明 必须在执行代码前面    第一行</p></li><li><p>import 导入  *可以导入当前路径下所有</p></li><li><p>自己包内不需导包</p></li><li><p>Java.lang包中不需要导入</p><ul><li>String  System等包系统内置的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础 4</title>
      <link href="/2022/11/20/Programming%20Language/Java/Java%E5%9F%BA%E7%A1%80%204/"/>
      <url>/2022/11/20/Programming%20Language/Java/Java%E5%9F%BA%E7%A1%80%204/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Day8"><a href="#Java-Day8" class="headerlink" title="Java Day8"></a>Java Day8</h1><h2 id="1-访问权限"><a href="#1-访问权限" class="headerlink" title="1.访问权限"></a>1.访问权限</h2><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>公告的，所有包内包外都可以访问的</p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>包访问权限，在<strong>自己包内可以随意访问</strong></p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>私有的，自己类可访问</p><h2 id="2-getter-amp-setter"><a href="#2-getter-amp-setter" class="headerlink" title="2.getter &amp; setter"></a>2.getter &amp; setter</h2><ul><li><p>setter：主要给成员变量赋值的成员方法，做一定保护；</p></li><li><p>getter：从成员变量中获取值的成员方法；</p></li><li><p>通过成员方法访问或更改，给成员属性给予保护，使程序更加健壮</p></li><li><p>Idea 可以通过getter和setter 自动添加其方法</p></li></ul><p><img src="/%5Cimages%5Cimage-20221029090820497.png" alt="image-20221029090820497"></p><h2 id="3-继承"><a href="#3-继承" class="headerlink" title="3.继承"></a>3.继承</h2><ul><li>子类自动拥有父类中除了私有内容外的其他所有</li></ul><blockquote><p>继承：</p><p>public class 子类 extends 父类{</p><p>}</p></blockquote><ul><li>私有内容不能被继承</li><li>类不能加private修饰</li></ul><p>作用：简化代码的开发</p><p>子类是对父类进行扩展</p><p>思想：子类对父类的继承，将某种具有部分相同属性功能的类再进行抽象，建立一个共有属性的类，其余子类通过继承该父类，从而使开发变得更为简洁明了</p><h2 id="4-super"><a href="#4-super" class="headerlink" title="4.super"></a>4.super</h2><ul><li>变量的查找顺序，先找自己类然后再找父类，就近原则；</li><li>如果想要访问父类中的内容</li></ul><blockquote><p>super.*; 可访问子类中与父类重名的内容</p></blockquote><ul><li>在创建每一个子类对象时，编译器并为其分配内存，都在子类对象中隐式声明创建了一个父类并且先执行创建父类。而这个父类就是super</li></ul><h2 id="5-方法重写"><a href="#5-方法重写" class="headerlink" title="5.方法重写"></a>5.方法重写</h2><ul><li>子类对父类提供的方法进行重新定义</li><li>子类方法与父类方法完全一致</li><li>也叫作方法覆盖</li><li>super可以在子类中调用父类的方法</li></ul><p>半覆盖</p><p>​在子类重构方法中使用了super调用父类同名的方法</p><p>全覆盖</p><p>​重构了父类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> <span class="keyword">extends</span> <span class="title class_">Demo2</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        半覆盖</span></span><br><span class="line"><span class="comment">//        super.pt();</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//         全覆盖</span></span><br><span class="line">        System.out.print(<span class="string">&quot;子类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Demo1</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo1</span>();</span><br><span class="line">        d.pt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-多态"><a href="#6-多态" class="headerlink" title="6.多态"></a>6.多态</h2><p>实现多态的条件</p><ol><li>继承：必须要有子类继承父类的继承关系。</li><li>重写：子类需要对父类中的一些方法进行重写，然后调用方法时就会调用子类重写的方法而不是原本父类的方法。</li><li>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</li></ol><ul><li><p>同一个对象拥有多种形态 </p></li><li><p>把不同的数据类型进行统一</p></li></ul><p>把子类的对象赋值给父类的变量-&gt;向上转型（会屏蔽子类中特有的方法）</p><p>把父类的变量转化会子类的变量-&gt;向下转型(向下类型转型有风险必须强制转换) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">age</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;动物&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小黑&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">age</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物的你年龄&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;猫&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">        <span class="built_in">super</span>.age();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] ages)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">ani</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        ani.age();</span><br><span class="line"><span class="comment">//        ((Cat) ani).name = &quot;小红&quot;;</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)ani;</span><br><span class="line">        System.out.println(((Cat)ani).name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>子类集成父类  父类 变量 &#x3D; new 子类();继承的基本条件</p><p>子类要重载(重写) 父类中方法继承条件2</p><p>多态触发后 子类除了重写的方法 其余方法、属性都将<strong>不可见</strong>(但创建的属性方法都存在)，因此任何在子类中访问非重写方法都是未定义的；</p><p>可通过向下强转回该类 方法与强转基础数据类型一致 </p></blockquote><ul><li>作用使程序有很强的拓展性</li></ul><h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h2><p>final不可更改</p><ol><li>final修饰的成员、局部变量，无法改变，又称为<strong>常量</strong></li><li>被final修饰的方法不可以被重写 </li><li>被final修饰的类无法更改</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Final</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小张&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Final</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Final</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        f.name = <span class="string">&quot;2333&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译器报错</span></span><br></pre></td></tr></table></figure><ul><li>局部变量和成员变量name 都无法更改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Final</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小张&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">hellowold</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Final</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Final</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        a = 1;</span></span><br><span class="line"><span class="comment">//        f.name = &quot;2333&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span> <span class="keyword">extends</span> <span class="title class_">Final</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hellowold</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译器报错</span></span><br></pre></td></tr></table></figure><ul><li>b 继承 Final 父类 但无法重写其final 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Final</span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span> <span class="keyword">extends</span> <span class="title class_">Final</span>&#123;</span><br><span class="line">    <span class="comment">//无法被继承</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译器报错</span></span><br></pre></td></tr></table></figure><ul><li>final 类不可以被继承</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类</title>
      <link href="/2022/11/20/Programming%20Language/Java/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2022/11/20/Programming%20Language/Java/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="内部类（局部内部类，匿名内部类，成员内部类，静态内部类）"><a href="#内部类（局部内部类，匿名内部类，成员内部类，静态内部类）" class="headerlink" title="内部类（局部内部类，匿名内部类，成员内部类，静态内部类）"></a>内部类（局部内部类，匿名内部类，成员内部类，静态内部类）</h1><ul><li>局部内部类</li></ul><p>1.局部内部类定义在外部类的局部位置，通常是方法</p><p>2.可以访问外部类所有成员，包含私有</p><p>3.不能添加访问修饰符，但是可以final修饰（修饰后不可被继承）</p><p>4.作用域：当前块作用域</p><p>使用方法访问方法</p><p>1.内部类-&gt;直接访问外部类成员</p><p>2.外部类-&gt;通过方法 实例化内部类 并在方法中实用内部类</p><p>3.外部其它类！！不能访问 局部内部类！！</p><p>4.内部类成员和外部类成员重名  可以使用外部类名.this.成员  访问外部成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer02</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;外部类&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outerfunction</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//局部内部类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;局部内部类&quot;</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">                System.out.println(Outer02.<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">//代码块</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//局部内部类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;局部内部类&quot;</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">                System.out.println(Outer02.<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer02</span> <span class="variable">outer02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer02</span>();</span><br><span class="line">        outer02.outerfunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名内部类</li></ul><p>访问方法和局部类似</p><p>1.定义在外部类局部位置</p><p>2.没有类名</p><p>3.同时还是一个对象</p><p>匿名内部类只能使用一次，简化开发</p><blockquote><p>匿名内部类的语法</p><p>new 类名or接口{</p><p>}； 大括号不可少  这是识别匿名的根据 ，如果没有就变成了普通类构造实例化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer03</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;匿名内部类&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        <span class="type">Inter</span> <span class="variable">inter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inter</span>() &#123; <span class="comment">//只能运行一次  编译类型为:Inter 运行类型为:Outer03$1  inter 类名实际为 外部类$1 它在底层类是有名称的</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Info</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(Outer03.<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        inter.Info();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer03</span> <span class="variable">outer03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer03</span>();</span><br><span class="line">        outer03.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类的匿名内部类</p><p>左 编译类型   右 运行类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Inter</span> <span class="variable">inter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inter</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Info</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Outer03.<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接访问 不用返回</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Inter</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Info</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Outer03.<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.Info();</span><br></pre></td></tr></table></figure><p>匿名最佳应用，作为方法实参传递时最为实用！</p><ul><li><p>成员内部类</p><p>成员内部类是定义在外部类的成员位置（成员内部类 本质上是一个成员  类）</p></li></ul><p>访问权限：对其适用， 成员内部类可以访问外部类中的private权限的成员。</p><p>作用域：块作用域   -           整个类体，内部类可以直接访问外部类中的成员，private访问修饰的也能访问</p><p>外部类：1使用内部类，和普通类一样要实例化内部类，再访问</p><p>定义一个含成员内部类 的 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.Inner_showInfo();<span class="comment">//外部类中的方法  实例化了内部类并调用了内部类中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;测试&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    name+age</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Inner_showInfo</span><span class="params">()</span>&#123;<span class="comment">//通过成员方法实例化内部类</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用内部类：</p><p>方法1：在外部类中创建一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">Inner_showInfo</span><span class="params">()</span>&#123;<span class="comment">//通过成员方法实例化内部类</span></span><br><span class="line">    <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    inner.showInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：</p><p>在外部类中创建一个内部类对象，需要在外部类这个命名空间中创建这个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();<span class="comment">//还一个定义get方法返回Inner对象outer.getInner()</span></span><br><span class="line">    </span><br><span class="line">        inner.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果成员内部类中的成员和外部类成员重名，内部类会覆盖外部类，可以使用       外部类.this引用访问同名的成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//内部类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;内部类测试&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name); </span><br><span class="line">        System.out.println(Outer.<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态内部类</li></ul><p>内部类访问-&gt;权限：能访问所有外部类中的静态成员或方法</p><p>外部类访问-&gt;静态内部类，创建外部类对象再访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer1</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;外部类&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">stat_name</span> <span class="operator">=</span> <span class="string">&quot;静态属性&quot;</span>;</span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(stat_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部类访问静态内部类</p><p>方式1：直接访问 注意内部类访问修饰符不能为private</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//这里并没有创建一个对象  而是使用的静态类  把Outer看成一个命名空间 就很好理解内部类了</span></span><br><span class="line">    Outer1.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer1</span>.Inner(); <span class="comment">// 非静态访问内部类Outer.Inner inner = outer.new Inner();</span></span><br><span class="line">    inner.say();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：在外部类中返回内部静态类</p><p>静态内部类中命名与外部类冲突，  使用 外部类名.name    如果非静态类 则要在中间加入this引用</p>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2022/11/20/Programming%20Language/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/11/20/Programming%20Language/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="并发-amp-并行"><a href="#并发-amp-并行" class="headerlink" title="并发&amp;并行"></a>并发&amp;并行</h2><ul><li><p>并发：一个时间段有多个程序都处于运行状态，且程序都是在一个处理器运行处理器来回调度执行多个程序</p></li><li><p>并行：多个程序在同一时间点被同时执行，多个处理器完成的</p></li></ul><p>并发可以提高处理效率（单位时间内可以完成处理更多事情，极限多线操作），而并行是一种更为严格，理想的并发</p><h2 id="进程-amp-线程"><a href="#进程-amp-线程" class="headerlink" title="进程&amp;线程"></a>进程&amp;线程</h2><p>进程是计算机中的程序关于某个数据结合上的一次运行活动，是操作系统进行资源分配与调度的基本单位</p><p>线程是进程的一个执行单元</p><p>一个线程就是进程中的单一顺序的控制流，进程的一个执行分支</p><ul><li><p>进程是线程的容器，进程可以有一个或者多个线程</p></li><li><p>继承<code>Thread</code>类（Thread 是 Runnalbe接口的实现类），实现一个线程</p></li><li><p>重写<code>run</code>方法，自定义线程</p></li><li><p>实例化线程对象，<code>start</code>方法开启线程（start方法会调用run 方法执行多线程，单独调用run方法不会开启新的线程）</p></li><li><p>线程并不会随main结束而结束</p></li><li></li></ul><h1 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h1><ul><li>继承Thread</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个线程类</span></span><br><span class="line">        <span class="type">ThreadText</span> <span class="variable">threadText</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadText</span>();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()); <span class="comment">//程序入口的main线程</span></span><br><span class="line"></span><br><span class="line">        threadText.start();<span class="comment">//start方法 启动一个新的线程 Thread0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main线程将会继续执行,不会阻塞&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadText</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="type">int</span> time;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            time++;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;线程 每隔1s执行&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(time == <span class="number">80</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过实现<code>Runnable</code>接口 ,使类具有更强的拓展性，而不是继承</li></ul><p>Thread相当于一个代理，通过传入Runnable接口的实现类，赋值给Thread内部的target（Runnable接口类），并在run方法中调用target的run方法（条件target不为null）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImplementsRunnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread_</span> <span class="variable">thread_</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread_</span>();<span class="comment">//实例化实现Runnable</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(thread_);<span class="comment">//静态代理模式 通过Thread的有参构造器，创建一个线程对象</span></span><br><span class="line"></span><br><span class="line">        thread.start();<span class="comment">//通过Thread 执行线程</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread_</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;通过实现Runnable接口，重写run()方法&quot;</span>);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>start()</code>方法启动线程，是有线程调度器(Scheduler)决定的</li><li><code>start()</code>方法调用结束并不意味着子线程开始运行</li><li>多线程调用顺序不一定就是启动顺序</li><li>多线程运行的结果是随机的</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="setPriority-num"><a href="#setPriority-num" class="headerlink" title="setPriority(num)"></a><code>setPriority(num)</code></h4><ul><li>设置线程优先级，取值范围[1,10] 超出范围抛出IIIegalArgumentException</li></ul><p>优先级较高的线程获得cpu资源越多，最终解释权归线程调度器，本质上我们只是给线程调度器一个提示信息</p><p>Java优先级设置不当或者滥用可能会导致某些线程用于无法得到运行，产生线程饥饿</p><h4 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a><code>interrupt()</code></h4><ul><li>中断线程，将线程中断标置为true，通过在线程对象中<code>isInterrupted()</code>方法返回标记bool</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T0</span> <span class="variable">t0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T0</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;5s后中断子线程&quot;</span>);</span><br><span class="line">        <span class="comment">//开启子线程</span></span><br><span class="line">        t0.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> end;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main线程正在运行&quot;</span>);</span><br><span class="line">            <span class="comment">//子线程在主线程运行5秒后中断</span></span><br><span class="line">            end = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> ((end - begin)/ <span class="number">100</span> &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">                t0.interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T0</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程正在运行&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (isInterrupted())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程检测到中断标记为true，触发中断&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot; -&gt; 结束&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join()"></a><code>join()</code></h4><ul><li>使用<code>thread_object.join()</code>方法，让某个进程独占Cpu资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable_</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (c  &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">5</span>)</span><br><span class="line">                thread.start(); <span class="comment">//开启线程</span></span><br><span class="line">                thread.join();<span class="comment">//让thread线程优先执行</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            c ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Runnable_</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Thread-yield"><a href="#Thread-yield" class="headerlink" title="Thread.yield()"></a><code>Thread.yield()</code></h4><ul><li>使用<code>Thread.yield()</code>方法，表示该线程可以让出cpu资源(线程让步)，但最终还是由cpu内核决定</li><li>这是一个静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让步的线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000001</span>; i++) &#123;</span><br><span class="line">                    sum += i;</span><br><span class="line">                    Thread.yield();<span class="comment">//当前线程让步，放弃cpu资源 </span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程时间&quot;</span> + (end - begin)/<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//main线程</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000001</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程时间&quot;</span> +  (end - begin)/ <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="setDaemon-true"><a href="#setDaemon-true" class="headerlink" title="setDaemon(true)"></a><code>setDaemon(true)</code></h4><p>Java中线程分为<code>用户线程</code>和<code>守护线程</code></p><p>JVM<code>垃圾回收器 </code>就是一个典型的<code>守护线程</code></p><ul><li>使用<code>thread.setDaemon(ture)</code> 方法开启守护线程，守护线程不能单独运行，当JVM没有其他用户线程，只有守护线程，守护线程会自动销毁</li><li>需要在线程启动前设置守护线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Deamon</span> <span class="variable">daemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Deamon</span>();</span><br><span class="line"></span><br><span class="line">        daemonThread.setDaemon(<span class="literal">true</span>);<span class="comment">//开启守护线程</span></span><br><span class="line">        daemonThread.start();<span class="comment">//启动线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;main线程正在运行&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deamon</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;守护线程，我会随着main线程结束而结束&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h1><h2 id="Thread-State"><a href="#Thread-State" class="headerlink" title="Thread.State"></a><code>Thread.State</code></h2><p>声明在<code>Thread.State</code> 这个枚举类中，可以通过<code>getState()</code>方法获取线程状态</p><h2 id="Java线程的六种状态"><a href="#Java线程的六种状态" class="headerlink" title="Java线程的六种状态"></a>Java线程的六种状态</h2><ul><li><p>New:                     新建状态，在调用<code>start()</code>方法之前的状态</p></li><li><p>RUNNABLE:        可运行状态。它是一个复合状态，包含READY和RUNNING两个状态</p><ul><li>READY         状态该线程可以被线程调度器使用，</li><li>RUNNING     状态  (可用通过<code>Thread.yield()</code>方法把运行状态转化为就绪状态不可控，看线程调度器)</li></ul></li><li><p>BLOCKED:           阻塞状态，线程发起阻塞的<code>I/O</code>操作，或者申请有其他线程占用的独占资源，线程会转化为BLOCKE阻塞状态，处于阻塞状态的操作不会占用资源，阻塞结束，将会转化为RUNNABLE状态</p></li><li><p>WAITING:              等待线程，线程执行了 <code>object.wait()</code>   <code>thread.join()</code> 方法会将线程状态转化为WAITING等待状态， <code>object.notify()</code>方法或者加入线程执行完毕，当前线程会转化为RUNNABLE状态</p></li><li><p>TIMED_WAITING:等待线程(  指定时间的等待线程  ) 与WAITING状态区别在于不会无限等待，如果线程没有在指定的时间完成范围完成操作将会自动转化为RUNNABLE状态</p></li><li><p>TERMINATED:     线程终止</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadlLife</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">thread_</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;线程创建时的状态&quot;</span> + thread_.getState());</span><br><span class="line"></span><br><span class="line">        thread_.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (Thread.State.TERMINATED != thread_.getState()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程运行时的状态&quot;</span> + thread_.getState());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程结束时的状态&quot;</span> + thread_.getState());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/image-20230112102220209.png" alt="image-20230112102220209"></p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>线程安全问题主要体现在三个方面：<code>原子性</code>，<code>可见性</code>和<code>有序性</code></p><p>非线程安全：主要是多个线程对同一个对象实例变量镜像操作时，会出现值被更改，值不同步的情况</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p><code>Atomic</code>不可分割，原子操作的不可分割有两层含义</p><ul><li>访问某个共享变量的操作，从其他线程来看，该操作要么执行完毕，要么尚发生，其他线程看不到其中间结果。</li><li>访问同一组共享变量的原子操作是不能交错的</li></ul><p>线程对于其他线程来看只会看到没执行，或者执行完毕(看不见中间执行状态)，一条路走到黑。</p><p>Java两种方式实现原子性：</p><ul><li>使用锁(锁排它性，保证共享变量在某一刻只能一个线程方法)</li><li>利用处理器CAS(Compare and Swap)指令(硬件锁)</li></ul><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>可见性<code>visibility</code>在多线程环境中，一个线程对某个线程变量进行更新之后，后续的其他线程可能无法立即读到这个更新后的结果</p><p>如果线程对共享变量更新，后续访问的线程可以读到这个更新结果，称线程可见，否则称为线程不可见（多线程程序可能因为可见性问题导致其他线程读取到旧数据、脏数据）</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>有序性<code>Ordering</code>，一个处理器上运行的宇哥线程执行的内存访问操作在另一个处理器上看是乱序的(Out of Order)</p><p>在多核处理器的环境下，编写的顺序结构，可能是没有保障的（编译器可能会改变操作的先后顺序，处理器也可能不会按照代码的顺序执行）</p><p><code>重排序</code>：一个处理器上执行多个操作，在其他处理器来看它顺序与目标代码指定顺序不一致，重排序是一种优化，可以不影响单线程程序正确性，但是可能对多线程程序的正确性产生影响</p><h2 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h2><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>提高系统的<code>Throughout</code>（吞吐率），多线程编程可以使一个进程有多个并发<code>concurrent</code>操作</li><li>提高响应性(Responsiveness).Web服务器会采用一些专业的线程负责用户请求处理，缩短了用户的等待时间</li><li>重复利用多核处理器资源</li></ul><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><ul><li><p>线程安全问题(Thread safe)，多线程共享数据，如果没有采取正确的并发访问措施，就可能数据一致性问题，如读取脏数据(过期的数据),丢失数据更新</p></li><li><p>线程活性(Thread liveness)问题，用于程序自身的缺陷或者由资源稀缺性导致线程一致处于非RUNNABLE状态。</p><ul><li>1.死锁(Deadlock)    </li><li>2.锁死(Lockout)       </li><li>3.活锁(Livelock)     </li><li>4.饥饿(Starvation)</li></ul></li><li><p>上下文切换(Context Switch),处理器从一个线程切换到执行另一线程</p></li><li><p>可靠性，可能一个线程炸了，整个进程炸了</p></li></ul><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>多线程下，一些敏感数据不允许多个线程同时方法，使用同步访问技术，保证数据在任何同一时刻，最多具有一个线程方法，以保证数据的完整性</p><ul><li>互斥锁、排它锁</li></ul><p>使用synchronized关键字修饰</p><ul><li>同步代码块<ul><li>静态方法，普通方法都可以使用</li><li>锁对象必须是同一个对象，</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步锁</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Synchronized</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Synchronized</span> <span class="variable">aSynchronized</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Synchronized</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                aSynchronized.test();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                aSynchronized.test();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() +<span class="string">&quot;我正在等待临界区代码执行完毕&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;<span class="comment">//this是同步锁， 临界区代码同步锁的锁 要一致才是同步的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  -&gt;  &quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同步方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;开启了两个线程&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                test.method();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                test.method2();<span class="comment">//Thread-1 线程拿不到this锁 所以不能执行method2()方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   synchronized 同步代码块 使用的锁为this&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized 修饰方法块 ，锁默认为this 也就是当前对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   synchronized 同步方法块 默认的锁为this&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同步静态方法</li></ul><p>又叫类锁，锁为运行时类对象</p><p>下面两段都能实现同步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">//临界区代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (obj.class)&#123;</span><br><span class="line">   <span class="comment">//临界区代码</span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li><p>同步方法锁的粒度粗 ，同步代码块锁粒度细，同步代码块相对于同步方法并发效率高</p></li><li><p>对于修改共享变量时，不论是获取还是修改，并且有并发需求，都要实现同步，否则可能出现意外</p></li><li><p>同步线程中临界区产生异常，线程会中断并且释放锁对象</p></li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="发生"><a href="#发生" class="headerlink" title="发生"></a>发生</h3><p> 简单的案例，鹬蚌相争，线程不能知道其他线程状态，为了争夺锁导致死锁发生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">loopLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">deadlock</span> <span class="variable">deadlock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">deadlock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                deadlock.test();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                deadlock.test2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">deadlock</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">LOCK1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">LOCK2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LOCK1)&#123;<span class="comment">//第一个锁为LOCK1  第二锁为LOCK2</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);<span class="comment">//使效果更加明显</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;LOCK1在我手上   我在等LOCK2 &quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK2)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;<span class="comment">//第一个锁为LOCK2  第二锁为LOCK1</span></span><br><span class="line">        <span class="keyword">synchronized</span> (LOCK2)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;LOCK2在我手上   我在等LOCK1 &quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK1)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>每个线程获取锁顺序要保持一致</li><li>减少嵌套的同步使用</li></ul><h1 id="轻量级同步"><a href="#轻量级同步" class="headerlink" title="轻量级同步"></a>轻量级同步</h1><p><code>volatile</code>关键字，使变量在多个线程之间可见</p><ul><li>只能修饰变量</li><li>不会发生阻塞</li><li>保证数据可见性，但不能保证原子性；而synchronized保证原子性</li><li>volatile解决变量在多线程之间的可见性；而synchronized是保证多个线程之间访问公共资源的同步性</li></ul><h1 id="原子类自增"><a href="#原子类自增" class="headerlink" title="原子类自增"></a>原子类自增</h1><p>多线程中++，–操作并不保证原子性，它是非原子性操作，多线程这种非原子操作容易引发线程安全问题。</p><p><code>AtomicInteger</code> &#x2F;<code>AtomicLong</code> 原子类实现多线程下的自增自减</p><p>底层是基于CAS(Compare And Swa)由用硬件实现的，可以将read -modify -write这类操作转化为原子操作</p>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射（reflection）</title>
      <link href="/2022/11/20/Programming%20Language/Java/%E5%8F%8D%E5%B0%84%EF%BC%88reflection%EF%BC%89/"/>
      <url>/2022/11/20/Programming%20Language/Java/%E5%8F%8D%E5%B0%84%EF%BC%88reflection%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="反射（reflection）"><a href="#反射（reflection）" class="headerlink" title="反射（reflection）"></a>反射（reflection）</h1><p><strong>简述：</strong></p><p>​通过一些外部的配置文件（例如properties）中的类信息 ，创建相关对象。即通过外部文件配置，在不修改源代码的情况下，控制程序，符合ocp原则（开闭原则）。</p><p>创建一个类和方法</p><p>传统的创建类的方法和操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionQuestion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  使用new 关键字 创建该类</span></span><br><span class="line">        <span class="type">NormalClass</span> <span class="variable">normalClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NormalClass</span>();</span><br><span class="line">        normalClass.information();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NormalClass</span> &#123;</span><br><span class="line">    String str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">information</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时需要更改类或者添加方法，我们需要更改一些。如果工程量很大，这是个非常麻烦的事情</p><p>使用反射机制，解决问题</p><p>定义一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.reflection;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *@Create by Loser on 2023-03-08 星期三</span></span><br><span class="line"><span class="comment"> *@Time: 18:14</span></span><br><span class="line"><span class="comment"> *@FileName: ReflectionClass</span></span><br><span class="line"><span class="comment"> *Hava a nice day</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionClass</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;ocp原则&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">information</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">class_full_path</span>=<span class="string">com.study.reflection.ReflectionClass</span></span><br><span class="line"><span class="attr">class_method</span>=<span class="string">information</span></span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.reflection;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *@Create by Loser on 2023-03-08 星期三</span></span><br><span class="line"><span class="comment"> *@Time: 18:02</span></span><br><span class="line"><span class="comment"> *@FileName: ReflectionQuestion</span></span><br><span class="line"><span class="comment"> *Hava a nice day</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionQuestion</span> &#123;</span><br><span class="line">    <span class="comment">//  反射  reflection</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//从配置文件中读取类的全路径 和方法名</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/com/study/reflection/classfullpath.properties&quot;</span>)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">class_full_path</span> <span class="operator">=</span> properties.get(<span class="string">&quot;class_full_path&quot;</span>).toString();<span class="comment">//    获取类的先对路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">class_method</span> <span class="operator">=</span> properties.get(<span class="string">&quot;class_method&quot;</span>).toString();    <span class="comment">//     获取方法名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  1. 使用Class.forName() 方法 返回Class类型的对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(class_full_path);<span class="comment">//   可能抛出ClassNotFoundException异常</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//  2.  通过得到的Class对象 调用newInstance()方法，得到对应的对象实例</span></span><br><span class="line">          <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance;<span class="comment">//这样最终得到了cls字节码 生成的一个类 </span></span><br><span class="line">        System.out.println(<span class="string">&quot;通过Class获得的对象  运行类型:&quot;</span> + o.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  3.  加载的对象实例，加载对应的方法</span></span><br><span class="line">        <span class="comment">//  在反射中，可以把方法视为对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(class_method);<span class="comment">//  method 虽然是加载对象的方法，但它也是一个对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4.  通过method方法对象，invoke()调用方法，需传入一个相应的对象，可以理解为this</span></span><br><span class="line">        method.invoke(o);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时我们需要调用其他方法，或者增一个方法并调用</p><p>在类中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.reflection;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *@Create by Loser on 2023-03-08 星期三</span></span><br><span class="line"><span class="comment"> *@Time: 18:14</span></span><br><span class="line"><span class="comment"> *@FileName: ReflectionClass</span></span><br><span class="line"><span class="comment"> *Hava a nice day</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionClass</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;cop原则&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">information</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加部分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">information2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//添加部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改配置文件中的方法字段的值 </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">class_full_path</span>=<span class="string">com.study.reflection.ReflectionClass</span></span><br><span class="line"><span class="attr">class_method</span>=<span class="string">information2//   原方法 information</span></span><br></pre></td></tr></table></figure><p>主程序没有任何更改</p><p>就栗子来说，好像反射代码更多了，这个栗子不好QAQ</p><h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><p><img src="C:\Users\XP\Downloads\reflection.jpg" alt="reflection"></p><ul><li><p>反射机制运行程序执行期借助于<code>Reflection</code> API获取任何类的内部信息（成员、方法、构造、注解、泛型等等），并能操作对象的属性及其方法。</p></li><li><p>通过<code>Class.forName()</code>方法加载类，会在堆产生一个<code>Class</code>类型的对象（一个类只有一个Class对象）。该<code>Class</code>对象是传入类的映射，是一面镜子，拥有这个对象的完整结构和信息。</p></li></ul><h1 id="反射API"><a href="#反射API" class="headerlink" title="反射API"></a>反射API</h1><p>主要的四大类：</p><p><code>java.lang.Class</code>：    类加载后，在堆中的一个Class对象(某个类模的板)</p><p><code>java.lang.refect.Method</code>:         类方法的对象</p><p><code>java.lang.refect.Filed</code>:           类字段(成员变量)的对象</p><p><code>java.lang.refect.Constructor</code>:类构造器的对象</p><p>使用Reflection API完成反射操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.reflection;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *@Create by Loser on 2023-03-08 星期三</span></span><br><span class="line"><span class="comment"> *@Time: 20:10</span></span><br><span class="line"><span class="comment"> *@FileName: ReflectionApi</span></span><br><span class="line"><span class="comment"> *Hava a nice day</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionApi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  从配置文件中读取类 和类中的一些方法</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/com/study/reflection/classfullpath.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">class_full_path1</span> <span class="operator">=</span> properties.get(<span class="string">&quot;class_full_path&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(class_full_path1);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  1.  使用反射  获取对象构造方法 并实例化对应对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getConstructor();<span class="comment">//   无参构造</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> cls.getConstructor(String.class, <span class="type">int</span>.class);<span class="comment">// 填入对应形参class对象 获取带参数构造器</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">o1</span> <span class="operator">=</span> (Person)constructor.newInstance();</span><br><span class="line">        o1.information();</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">o2</span> <span class="operator">=</span> (Person) constructor1.newInstance(<span class="string">&quot;小红&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        o2.information();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2.  获取Class对象中的字段信息</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;name&quot;</span>);  <span class="comment">//  getFiled()方法不能获取私有字段  Field对象表示类中字段对象；</span></span><br><span class="line">        System.out.println(name.toString() + <span class="string">&quot; = &quot;</span> + name.get(o));  <span class="comment">//获取Filed对象 使用get()方法 传入对应的对象 获取对应对象该字段的值 代理模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  3.  获取Class对象中的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">information</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;information&quot;</span>);</span><br><span class="line">        information.invoke(o1);</span><br><span class="line">        information.invoke(o2);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Filed对象不能访问，类中的私有属性</li><li>Constructor对象，获取有参构造 需要在形参列表中传入对于形参的 <code>Class</code>类</li><li>Class、Filed、Constructor、Method 提供了很多反射相关<code>API</code></li></ul><h1 id="反射优缺"><a href="#反射优缺" class="headerlink" title="反射优缺"></a>反射优缺</h1><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>动态创建和使用对象（是框架的底层核心），使用非常灵活，框架技术离不开反射机制；</p><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><p>反射机制基本是解释执行，执行速度较慢；</p><p>速度对比：</p><pre><code>package com.study.reflection;/* *@Create by Loser on 2023-03-08 星期三 *@Time: 20:57 *@FileName: ReflectionOptimize *Hava a nice day */import java.io.FileInputStream;import java.lang.reflect.Method;import java.util.Properties;public class ReflectionOptimize &#123;    public static void main(String[] args) throws Exception&#123;        Properties properties = new Properties();        properties.load(new FileInputStream(&quot;src/com/study/reflection/classfullpath.properties&quot;));        String class_full_path1 = properties.get(&quot;class_full_path&quot;).toString();        //  反射 和传统方法 性能测试    //  传统方法    Person person = new Person();    long start = System.currentTimeMillis();    for (int i = 0; i &lt; 100000; i++) &#123;        person.information();    &#125;    long end = System.currentTimeMillis();    System.out.println(&quot;一般方法:&quot; + (end - start) + &quot;ms&quot;);    //  反射    Class&lt;?&gt; cls = Class.forName(class_full_path1);    Object o = cls.newInstance();    Method information = cls.getMethod(properties.get(&quot;class_method&quot;).toString());    start = System.currentTimeMillis();    for (int i = 0; i &lt; 100000; i++) &#123;        information.invoke(o);    &#125;    end = System.currentTimeMillis();    System.out.println(&quot;使用反射:&quot; + (end - start) + &quot;ms&quot;);&#125;&#125;</code></pre><p>一般调用：用时2ms左右</p><p>反射调用：用时16ms左右</p><h2 id="反射优化："><a href="#反射优化：" class="headerlink" title="反射优化："></a>反射优化：</h2><p>取消反射的访问检测 <code>Accessble</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">information.setAccessible(<span class="literal">false</span>);   <span class="comment">//  关闭访问检测</span></span><br></pre></td></tr></table></figure><p>居然明显的少了几毫秒，然并卵</p><h1 id="Class-对象"><a href="#Class-对象" class="headerlink" title="Class 对象"></a>Class 对象</h1><ul><li><code>Class</code>本身也是一个类，这个比较特殊，也是Object的子类</li><li><code>Class</code>对象，是通过<code>ClassLoader</code>类加载器，由<code>JVM</code>载入到堆中，一个类只有一个<code>Class</code>类映射</li><li><code>Class</code>对于同一类只有一份，堆中只有一份，类只会加载一次</li><li>每个类的实例都知道是由哪一个<code>Class</code>生成的，可以调用<code>getClass()</code>方法查看</li><li><code>Class</code>可以通过<code>API</code>得到一个完整的结构</li><li><code>Class</code>存放在堆中</li><li>类的字节码二进制数据，存放在方法区也称为元数据</li></ul><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><ul><li><p>通过类的全路径，获取Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Class.forName();</span></span><br><span class="line"><span class="type">String</span> <span class="variable">classfullpath</span> <span class="operator">=</span> <span class="string">&quot;com.study.reflection.Person&quot;</span>;</span><br><span class="line">Class&lt;?&gt; cls = Class.forName(classfullpath);</span><br></pre></td></tr></table></figure></li><li><p>通过 类名.class 获取<code>Class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls2</span> <span class="operator">=</span> Person.class;</span><br></pre></td></tr></table></figure></li><li><p>通过 实例对象.getClass() 获取<code>Class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">cls3</span> <span class="operator">=</span> person.getClass();</span><br></pre></td></tr></table></figure></li><li><p>通过<code>ClassLoader</code> 获取 <code>Class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> person.getClass().getClassLoader();</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&gt; cls4 = classLoader.getClass();</span><br></pre></td></tr></table></figure></li><li><p>基础数据类型获取<code>Class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Integer&gt; integerClass = <span class="type">int</span>.class;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></li><li><p>封装类.TYPE 获取<code>Class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Integer&gt; type = Integer.TYPE;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Class范围"><a href="#Class范围" class="headerlink" title="Class范围"></a>Class范围</h2><p><code>Class</code>涵盖的对象范围很广，以下对象都有对应的<code>Class</code>对象</p><ul><li>类（成员类内部类，静态内部类，外部类..）</li><li>接口</li><li>数组</li><li>二维数组</li><li>注解</li><li>枚举</li><li>包装类</li><li>Class本身</li></ul><h1 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h1><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><h3 id="静态加载（编译时加载）"><a href="#静态加载（编译时加载）" class="headerlink" title="静态加载（编译时加载）"></a>静态加载（编译时加载）</h3><p>​编译时载入源代码中的类；</p><h3 id="动态加载（反射，运行时加载）"><a href="#动态加载（反射，运行时加载）" class="headerlink" title="动态加载（反射，运行时加载）"></a>动态加载（反射，运行时加载）</h3><p>​在程序运行时，通过<code>ClassLoader</code>载入堆中的类；</p><p>类加载过程一共分三个阶段，第一个阶段是加载，然后是链接，最后是初始化</p><p><img src="https://img-blog.csdnimg.cn/e5cbe74a61c8432ab06efdf343045aa1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFfNDE4OTEyNDQ=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>加载：类加载会将将字节码文件转化为该类的二进制字节流，通过字节流创建对应的类方法区和<code>java.lang.Class</code>对象存放在堆中，而<code>Class</code>对象是一个数据结构作为类的访问入口；</p><p>链接:验证，准备，解析 ，主要验证字节码的合法性；</p><p>初始化：完成变量的赋值，和静态代码块的构建；</p>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常</title>
      <link href="/2022/11/20/Programming%20Language/Java/%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/11/20/Programming%20Language/Java/%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>编译时异常，自己改、</p><p><strong>运行时出现错误</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">    Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ArithmeticException: / by zero</span><br><span class="line">at Demo01.main(Demo01.java:<span class="number">3</span>)</span><br></pre></td></tr></table></figure><ol><li>异常错误，运行时异常</li><li>抛出异常列，创建一个异常对象，并把对象抛出</li><li>补货异常对象，默认jvm来处理错误并把不能处理的错误打印出来，jvm会让程序停止</li></ol><h3 id="1-异常的分类"><a href="#1-异常的分类" class="headerlink" title="1.异常的分类"></a>1.异常的分类</h3><p>异常是一个对象因此也会有各种异常还继承关系：</p><ul><li>Throwable (父类)<ul><li>Error</li><li>Exception<ul><li>RuntimeException<ul><li>一堆Exception</li></ul></li><li>其他的各类Exception</li></ul></li></ul></li></ul><p>Error：一般是系统级的错误，并且比较难处理</p><p>我最常解决的是Exception的错误类抛出</p><p>其他各类Exception：必须处理才能编译运行 编译时异常</p><p>RuntimeException：是程序跑起来运行中的错误 运行时异常</p><h3 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2.异常处理"></a>2.异常处理</h3><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try..catch"></a>try..catch</h4><p>因为jvm来处理会停止程序，但是我们依然想让程序继续运行下去，我就要自己处理异常，跳过jvm</p><blockquote><p>try{</p><p>​容易出错的代码</p><p>}catch(出错类 e){</p><p>​处理异常的代码</p><p>}finally{</p><p>​最终无论执行过try 还是catch</p><p>}</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//打印错误信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;系统炸了&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我啥都接，不管你是否出错也是否解决&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="throws-错误类型"><a href="#throws-错误类型" class="headerlink" title="throws 错误类型{}"></a>throws 错误类型{}</h4><p>表示方法可能抛出一个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;文件地址&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            read();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>read()方法可能会产生一个错误，向上抛出一个错误，我们可以用try catch 解决</p><h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><p>主动向外抛出一个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> i )</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;<span class="comment">//主动抛出</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;错误描述&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            read(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>自定义异常类必须成Exception或者RuntimeException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AutoException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义错误描述&quot;</span>);</span><br><span class="line">    &#125;   <span class="comment">//自定义异常必须继承Exception或者RuntimeException</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">Person_4</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPerson</span><span class="params">(<span class="type">int</span> person)</span> <span class="keyword">throws</span> AutoException&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">4</span> &gt;= person) &#123;</span><br><span class="line">            <span class="built_in">this</span>.Person_4 = person;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AutoException</span>(<span class="string">&quot;这间房只能4个人住&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Room</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            a.setPerson(<span class="number">6</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AutoException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类与接口</title>
      <link href="/2022/11/20/Programming%20Language/Java/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/11/20/Programming%20Language/Java/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类-和-接口"><a href="#抽象类-和-接口" class="headerlink" title="抽象类 和 接口"></a>抽象类 和 接口</h1><h2 id="abstract-关键字"><a href="#abstract-关键字" class="headerlink" title="abstract 关键字"></a>abstract 关键字</h2><ul><li>Java中抽象只声明，<strong>无法被实现</strong>（不能实例化对象）</li><li>抽象中的子类 <strong>必须实现其抽象方法</strong></li><li>接口的方法都是公开抽象</li><li>接口中的所有成员变量都是<strong>public static final修饰的公开静态常量</strong></li></ul><p>1.<strong>抽象类的定义</strong></p><p>用abstract修饰，不可有方法体{}，直接分好结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="keyword">class</span>  <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;    <span class="comment">//每个人工作都不同 我们可以把工作抽象出来 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有抽象方法的 类  必定是一个抽象类 因此其类必须也要用abstract修饰</p></blockquote><p>2.<strong>继承抽向类必须重写其抽象方法，否则子类也是抽象类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="keyword">class</span>  <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;    <span class="comment">//每个人工作都不同 我们可以把工作抽象出来</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">c</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">c</span>();</span><br><span class="line">        w.work();</span><br><span class="line">        w.work2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有实现父类抽象方法 所以子类b也是抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">b</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work2</span><span class="params">()</span>;        <span class="comment">//第二份工作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//最终c类继承抽象b类 所以c类可以实例化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span> <span class="keyword">extends</span> <span class="title class_">b</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;我的第1份工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;我的第2份工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过抽象类可以强制子类，要求其实现其方法</p><p><strong>抽象类也具有多态性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Abstract</span> &#123;</span><br><span class="line"><span class="comment">//    抽象的多态性</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Abstract</span>&#123;</span><br><span class="line"><span class="comment">//    A 实现了抽象父类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类也能多态&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        多态</span></span><br><span class="line">        <span class="type">Abstract</span> <span class="variable">Class</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        Class.function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象类中也允许有普通方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Abstract</span> &#123;</span><br><span class="line"><span class="comment">//    这是一个抽象类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">helloworld</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类也允许有普通方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="interface-关键字"><a href="#interface-关键字" class="headerlink" title="interface 关键字"></a>interface 关键字</h2><p>接口<strong>（实际上是一种特殊的抽象类，但接口  相对于  抽象类  不同的是所有的方法必须是抽象方法不能有其他普通方法但可以拥有成员变量）</strong></p><ol><li><p>接口使用<strong>interface</strong>声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;这个是一个特殊抽象类，接口&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>接口中所有方法，<strong>默认抽象且公开</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span> &#123;</span><br><span class="line">    <span class="comment">//变量是公开静态常量  即  public static final String name;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;2333&quot;</span>;</span><br><span class="line"><span class="comment">// public abastract  编译器会自动添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//-&gt;public abstract void function2()   完整的修饰</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">function2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>**使用extends 的继承   **</p><p>InterFace2 继承 接口父类 但未实现因此不能用class 声明 InterFace2只能是接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;这个是一个特殊抽象类，接口&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InterFace2</span> <span class="keyword">extends</span> <span class="title class_">InterFace</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**使用implements的继承 实现了其方法  **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;这个是一个特殊抽象类，接口&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InterFace2</span> <span class="keyword">extends</span> <span class="title class_">InterFace</span>&#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">fucntion2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口方法 _Class 类可以被实例化</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">_Class</span> <span class="keyword">implements</span> <span class="title class_">InterFace2</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了InterFace的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fucntion2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了InterFace2   的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口多态</p><p>接口1 继承 接口类  _Class继承了接口1类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;这个是一个特殊抽象类，接口&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InterFace2</span> <span class="keyword">extends</span> <span class="title class_">InterFace</span>&#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">fucntion2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">_Class</span> <span class="keyword">implements</span> <span class="title class_">InterFace2</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了InterFace的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fucntion2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了InterFace2   的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        接口多态</span></span><br><span class="line">        <span class="type">InterFace</span> <span class="variable">Class</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">_Class</span>();</span><br><span class="line">        </span><br><span class="line">        Class.function();</span><br><span class="line">        <span class="comment">//这里要强制转换 因为function2  是 2接口的 抽象类 抽象父类接口是隐藏的</span></span><br><span class="line">        ((InterFace2)Class).fucntion2();</span><br><span class="line"><span class="comment">//        Class.function2();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>接口可以把很多不相同的内容进行整合</li></ul><h2 id="实现”多继承”方式"><a href="#实现”多继承”方式" class="headerlink" title="实现”多继承”方式"></a>实现”多继承”方式</h2><p>Java只能单继承(只能继承一个类类)，但是可以通过interface 接口实现类似于多继承的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">God</span> <span class="keyword">extends</span> <span class="title class_">Money</span> <span class="keyword">implements</span> <span class="title class_">Decorations</span>, Metal&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decorations</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄金可以制作黄金饰品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">metal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄金是金属，可做导体&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">       <span class="type">Money</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">God</span>();</span><br><span class="line">        g.Value();</span><br><span class="line">        ((Decorations)g).decorations();</span><br><span class="line">        ((Metal)g).metal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Money</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Value</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具有货币性质&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Decorations</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">decorations</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Metal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">metal</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型(Generic)</title>
      <link href="/2022/11/20/Programming%20Language/Java/%E6%B3%9B%E5%9E%8B(Generic)/"/>
      <url>/2022/11/20/Programming%20Language/Java/%E6%B3%9B%E5%9E%8B(Generic)/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型-Generic"><a href="#泛型-Generic" class="headerlink" title="泛型(Generic)"></a>泛型(Generic)</h1><p>通用数据类型</p><ul><li><p>对数据元素进行约束，编译时就能看到是否有类型错误的问题；</p></li><li><p>避免不必要的类型转换，提高编译效率(并不能提高运行效率)；</p></li></ul><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><blockquote><p>自定义泛型类</p><p>class 类名&lt;T,R&gt;{</p><p>}</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        _Generic&lt;String, Integer&gt; objectObject_generic = <span class="keyword">new</span> <span class="title class_">_Generic</span>&lt;String, Integer&gt;(<span class="string">&quot;小明&quot;</span>, <span class="number">10</span>); </span><br><span class="line">        objectObject_generic.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Generic</span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T generic_type1;</span><br><span class="line">    <span class="keyword">private</span> E generic_type2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">_Generic</span><span class="params">(T generic_type1, E generic_type2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.generic_type1 = generic_type1;</span><br><span class="line">        <span class="built_in">this</span>.generic_type2 = generic_type2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getGeneric_type1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> generic_type1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGeneric_type1</span><span class="params">(T generic_type1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.generic_type1 = generic_type1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getGeneric_type2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> generic_type2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGeneric_type2</span><span class="params">(E generic_type2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.generic_type2 = generic_type2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;generic_type1 = &quot;</span> + generic_type1.getClass() +<span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;generic_type2 = &quot;</span> + generic_type2.getClass()</span><br><span class="line">                            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在实例化类的时候指定其元素运行类型&lt;E, T, ….&gt; 可以有多个不同类型， 一般用单个大写字母表示数据类型；</p></li><li><p>泛型只能是引用类型，不能是基本类型</p></li><li><p>使用泛型的数组，不能初始化</p></li><li><p>静态方法中不能实用泛型</p></li><li><p>泛型的类型，是在创建对象时确定的</p></li></ul><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>语法</p><blockquote><p>interface class_name&lt;T, R&gt;{</p><p>}</p></blockquote><ul><li>接口中成员类型，不能使用泛型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">InterFace_Generic</span>&lt;E, T&gt;&#123;</span><br><span class="line"><span class="comment">//    E a = null; 报错</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title function_">function2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> E <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口默认方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>泛型接口的类型在继承接口或者实现接口时确定</li></ul><p>继承泛型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">InterFace</span> <span class="keyword">extends</span> <span class="title class_">InterFace_Generic</span>&lt;Object, Object&gt;&#123;</span><br><span class="line">    <span class="comment">// 等价于 interface InterFace extends InterFace_Generic&#123;&#125; 规范命名最好添加&lt;Object, Object&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现泛型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Implements_InterFace</span> <span class="keyword">implements</span> <span class="title class_">InterFace_Generic</span>&lt;String, Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">function</span><span class="params">()</span> &#123;<span class="comment">//String 返回值替换了原本泛型 E</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">function2</span><span class="params">()</span> &#123;<span class="comment">//Integer 返回值 替换了原本的泛型T</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>没有指定类型，默认为Object</li></ul><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><blockquote><p>语法： 修饰符 &lt;T …&gt;返回值 方法名(参数列表){ }</p></blockquote><ul><li>泛型方法，可以定义在泛型类，还可以普通类中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通类中使用泛型方法 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ordinary_Class</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt;<span class="keyword">void</span> <span class="title function_">generic_method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通类中使用泛型方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型类使用泛型方法  泛型方法可以使用自身定义泛型，也可以使用类定义的泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Generic_Class</span>&lt;T, R&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ordinaryMethod</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;C&gt;C <span class="title function_">genericMethod</span><span class="params">(C s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;泛型方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当泛型方法被调用时，类型会确定</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic_method</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ordinary_Class</span> <span class="variable">ordinary_class</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ordinary_Class</span>();</span><br><span class="line">        ordinary_class.generic_method(<span class="string">&quot;String&quot;</span>);<span class="comment">//调用泛型方法，才会确定其参数类型</span></span><br><span class="line">        ordinary_class.generic_method(<span class="number">10</span>);<span class="comment">//此时方法传入的Integer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法中没有使用&lt;&gt;定义泛型， 就不是泛型方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Method</span><span class="params">(T s)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;此方法使用了类声明的泛型,并不是泛型方法&quot;</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generic_Class&lt;String, Object&gt; Generic_class = <span class="keyword">new</span> <span class="title class_">Generic_Class</span>&lt;&gt;();</span><br><span class="line">Generic_class.Method(<span class="string">&quot;测试&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><p>用于约束泛型</p><ul><li>泛型类型不具备继承特性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object 是 String 父类 ，但这种写法是错误的</span></span><br><span class="line">ArrayList&lt;Object&gt; strings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure><ul><li><?> 表示任意泛型类型都可以接收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printGenericClass</span><span class="params">(List&lt;?&gt; list)</span>&#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><? extends 父类> 上界通配符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printGenericClass</span><span class="params">(List&lt;? extebds AA&gt; list)</span>&#123;<span class="comment">//仅接受AA这个父类 </span></span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><? super父类> 下界通配符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printGenericClass</span><span class="params">(List&lt;? <span class="built_in">super</span> AA&gt; list)</span>&#123;<span class="comment">//仅接受AA类，或者其他父类，不限于直接父类</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2022/11/20/Programming%20Language/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/11/20/Programming%20Language/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>网络通信协议：</p><p>OSI模型：</p><ul><li>1）应用层</li><li>2）表示层</li><li>3）会话层</li><li>4）传输层       (TCP, UDP..)</li><li>5）网络层       (IP, ICMP..)</li><li>6）数据链路层(Link)</li><li>7）物理层        (Link)</li></ul><p>TPC&#x2F;IP模型（简化的OSI模型）</p><ul><li>1）应用层(应用数据)</li><li>2）传输层(TCP)</li><li>3）网络层(IP)</li><li>4）数据链路+物理层(Link-+)</li></ul><h1 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h1><p>用户获取Address对象</p><ul><li>常用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="comment">//1）获取本地主机名和域名 对象</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">loacl</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">    System.out.println(loacl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2）通过  域名/主机名 InetAddress对象</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">    System.out.println(inetAddress);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3) 通过InetAddress对象获取IP地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hostAddress</span> <span class="operator">=</span> inetAddress.getHostAddress();</span><br><span class="line">    System.out.println(hostAddress);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5) 通过InetAddress对象获对应的主机名/域名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> inetAddress.getHostName();</span><br><span class="line">    System.out.println(hostname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>Socket使用TCP&#x2F;IP协议，是基于客户端-服务端的网络通信</p><p>通信通道，两边的端点采用Socket</p><p>Socket允许程序把网络链接当成一个流，数据在两个Socket间通过IO流传输数据</p><p>一般主动发起通信的应用属于客户端，等待监听对方请求信息的称为服务端</p><h2 id="字节流读取Socket中的数据"><a href="#字节流读取Socket中的数据" class="headerlink" title="字节流读取Socket中的数据"></a>字节流读取Socket中的数据</h2><ul><li>模拟服务端 客户端交互</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *@Create by Loser on 2023-01-18 星期三</span></span><br><span class="line"><span class="comment"> *@Time: 12:28</span></span><br><span class="line"><span class="comment"> *@FileName: ServerSocket_</span></span><br><span class="line"><span class="comment"> *Hava a nice day</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocket_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务器使用ServerScoket 监听一个端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;等待客户端链接中..&quot;</span>);</span><br><span class="line">        <span class="comment">//accept()方法在接受到请求之前会阻塞 是一个阻塞IO 收到后返回一个Socket 对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Socket 获取通信通道中的传输数据 字节输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> accept.getInputStream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入流读取数据</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> readLine;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((readLine = inputStream.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLine));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        inputStream.close();</span><br><span class="line">        accept.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *@Create by Loser on 2023-01-18 星期三</span></span><br><span class="line"><span class="comment"> *@Time: 12:35</span></span><br><span class="line"><span class="comment"> *@FileName: Client</span></span><br><span class="line"><span class="comment"> *Hava a nice day</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端 创建一个Socket</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取客户端socket 输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;你好服务端！我是客户端&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流读取Socket中的数据"><a href="#字符流读取Socket中的数据" class="headerlink" title="字符流读取Socket中的数据"></a>字符流读取Socket中的数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Socket 获取通信通道中的传输数据 字节输入流</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">String readLine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((readLine = inputStreamReader.readLine())&#123;</span><br><span class="line">    System.out.println(readLine);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inputStream.close();</span><br><span class="line">accept.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举类</title>
      <link href="/2022/11/20/Programming%20Language/Java/%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
      <url>/2022/11/20/Programming%20Language/Java/%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><p>枚举类是一种适用于对象确定，并且不会有更多的特殊类，比如：星期，季节；</p><p>可以一一列举出来看，通过枚举类实现，而不是传统思路构造n个不同的对象；</p><h2 id="方式1：自定义枚举类"><a href="#方式1：自定义枚举类" class="headerlink" title="方式1：自定义枚举类"></a>方式1：自定义枚举类</h2><p>1.构造器私有 </p><p>2.在本类中实例化对象 </p><p>3.尽量不提供修改方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义枚举类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enumeration</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name; <span class="comment">//枚举类属性可以多个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在本类中实例化   并且给枚举类 添加final和static修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Enumeration</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enumeration</span>(<span class="string">&quot;春天&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Enumeration</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enumeration</span>(<span class="string">&quot;夏天&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Enumeration</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enumeration</span>(<span class="string">&quot;秋天&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Enumeration</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enumeration</span>(<span class="string">&quot;冬天&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Enumeration</span><span class="params">(String name)</span>&#123; <span class="comment">//构造器 添加private 访问权限</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//提供一些只读的方法方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Enumeration&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(SPRING.toString());</span><br><span class="line">        System.out.println(SUMMER.toString());</span><br><span class="line">        System.out.println(AUTUMN.toString());</span><br><span class="line">        System.out.println(AUTUMN.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式2：enum关键字定义枚举类"><a href="#方式2：enum关键字定义枚举类" class="headerlink" title="方式2：enum关键字定义枚举类"></a>方式2：<code>enum</code>关键字定义枚举类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Enumeration</span> &#123;</span><br><span class="line">    <span class="comment">//定义的枚举类  必须 放在enum类的开头</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>),</span><br><span class="line">  SUMMER(<span class="string">&quot;夏天&quot;</span>);    <span class="comment">//enum枚举类 等价与自定义枚举类中的private static final Enumeration SPRING = new Enumeration(&quot;春天&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name; <span class="comment">//枚举类属性可以多个</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Enumeration</span><span class="params">(String name)</span>&#123; <span class="comment">//构造器 添加private 访问权限</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Enumeration&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(SPRING.toString());</span><br><span class="line">        System.out.println(SUMMER.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>enum 关键字声明的类 自动默认继承了一个Enum类 ，enum final修饰</li></ul><p>使用javap 反编译字节码文件 得到的</p><blockquote><p>PS D:\JavaDemo\Text\out\production\Text\Text&gt; javap Enumeration.class<br>Compiled from “Enumeration.java”<br>public final class Text.Enumeration extends java.lang.Enum&lt;Text.Enumeration&gt; {<br>  public static final Text.Enumeration SPRING;<br>  public static final Text.Enumeration SUMMER;<br>  public static Text.Enumeration[] values();<br>  public static Text.Enumeration valueOf(java.lang.String);<br>  public java.lang.String toString();<br>  public static void main(java.lang.String[]);<br>  static {};<br>}</p></blockquote><p>因此enum关键字声明的类 不能继承其他类，但可以实现接口</p><ul><li><p>如果实例化枚举类  有无参构造器，可以省略()</p></li><li><p>枚举类是静态的 比较两个相同的枚举类结果为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Enumeration</span> <span class="variable">enumeration</span> <span class="operator">=</span> Enumeration.SPRING;</span><br><span class="line">    <span class="type">Enumeration</span> <span class="variable">enumeration1</span> <span class="operator">=</span> Enumeration.SPRING;</span><br><span class="line"></span><br><span class="line">    System.out.println(enumeration1); <span class="comment">//这里enum类中的toString方法 不是Object的，而是Enum类中的toString</span></span><br><span class="line">    System.out.println(enumeration1 == enumeration); <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumerationMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Enumeration</span> <span class="variable">enumeration</span> <span class="operator">=</span> Enumeration.SPRING;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//常用方法</span></span><br><span class="line"><span class="comment">//        name()</span></span><br><span class="line"><span class="comment">//        ordinal()</span></span><br><span class="line"><span class="comment">//        values()  隐藏的IDEA也没有提示，但可以用</span></span><br><span class="line"><span class="comment">//        valuesOf()  可以将一个字符串 实例化枚举对象并返回 前提是字符串必须是一个枚举类</span></span><br><span class="line"><span class="comment">//        compareTo() 比较两个枚举类</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      System.out.println(<span class="string">&quot;name() = &quot;</span> +  enumeration.name());<span class="comment">//输出枚举类名字</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出枚举类序号&quot;</span> + enumeration.ordinal()); <span class="comment">//按照枚举类 实例化的顺序  从0开始i</span></span><br><span class="line">        System.out.println(<span class="string">&quot;返回一个数组包含所有枚举类:&quot;</span> + enumeration.values()[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="type">Enumeration</span> <span class="variable">enumeration1</span> <span class="operator">=</span> Enumeration.valueOf(<span class="string">&quot;SPRING&quot;</span>);</span><br><span class="line">        System.out.println(enumeration1.name());</span><br><span class="line"></span><br><span class="line">        System.out.println(Enumeration.SPRING.compareTo(Enumeration.SUMMER)); <span class="comment">//比较两个枚举类的序号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注解-Aannotation"><a href="#注解-Aannotation" class="headerlink" title="注解 Aannotation"></a>注解 Aannotation</h1><p>注解内容并不影响程序运行，相当于告诉编译器我这里想做什么，编译器通过注解为我们判定是否有错误</p><p><code>@Override</code> </p><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span>  <span class="comment">//修饰注解的注解  称为元注解 添加Override 注解后 方法只能出现在方法区</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Deprecated</code> 修饰个元素，表示该元素已过时， 可以修饰类，包，方法等</p><p><code>@SuppressWarnings(&#123;all&#125;)</code>  抑制警告，可以指定；</p><p>常用的一抑制警告参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span><span class="comment">//执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span>  <span class="comment">//未使用的变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span>  <span class="comment">//有泛型未指定类型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;path&quot;)</span>  <span class="comment">//在类路径、源文件路径等中有不存在的路径时的警告</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span>  <span class="comment">//使用了不赞成使用的类或方法时的警告</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;fallthrough&quot;)</span> <span class="comment">//当 Switch 程序块直接通往下一种情况而没有 break; 时的警告</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span><span class="comment">//某类实现Serializable(序列化)， 但没有定义 serialVersionUID 时的警告</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span> <span class="comment">//没有传递带有泛型的参数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;finally&quot;)</span> <span class="comment">//任何 finally 子句不能正常完成时的警告。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;try&quot;)</span> <span class="comment">// 没有catch时的警告</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span> <span class="comment">//所有类型的警告</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是源码引用中见到的，但实际很少用到的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;FragmentNotInstantiable&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;ReferenceEquality&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;UnusedParameters&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;NullableProblems&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;SameParameterValue&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;PointlessBitwiseExpression&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@Retention 注解</p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the retention policy.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the retention policy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RetentionPolicy <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RetentionPolicy这个枚举类 表示该注释的生命周期  </p><p>例如RUNTIME  表示 该注解在运行时这个注解依旧存在并没有被舍弃</p>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2022/11/20/Programming%20Language/Java/%E9%9B%86%E5%90%88/"/>
      <url>/2022/11/20/Programming%20Language/Java/%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h1 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h1><p>Java提供了一种方便操作对象的数据结构–Collection</p><p>集合框架体系：</p><p><img src="C:\Users\XP\Desktop\学习笔记\Java\集合\Collection.png" alt="Collection"></p><p>Map接口：</p><p><img src="C:\Users\XP\Desktop\学习笔记\Java\Map.png" alt="Collection"></p><p>集合分为两组，单列集合(Collection 单个元素集合)、双列集合(Map  键值对集合K-V)</p><p>Collection继承了父类iterator迭代器</p><p>实现Iterator迭代器的类可以进行迭代操作 ,迭代器本身不存储任何数据</p><p>迭代器中<code>hasNext()</code>方法判断还有没有下一个元素，next()方法相当于游标 获取当前指向的元素，不存在返回False，配合使用就能迭代集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    collection.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator(); <span class="comment">//获取集合的迭代器</span></span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123; <span class="comment">//判断下一个元素 是否存在</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span>  iterator.next(); <span class="comment">//如果这个元素 不存在则会抛出NoSuchElemException异常 所以要配和hasNext()方法使用</span></span><br><span class="line">        System.out.println(next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增强for循环底层 也是迭代器实现的  简化的迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (Object name:</span><br><span class="line">         collection) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//如果还需要迭代 需要重置iterator  -&gt;iterator = collection.iterator();</span></span><br><span class="line">  <span class="comment">//如果底层是数组的List 实现类 可以用普通for循环遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h2><ul><li>无序（添加和取出顺序不一致， 顺序是固定的没有规律），没有索引</li><li>元素不允许相同</li></ul><p>Collection实现类，可以增强for循环，迭代器都使用，但没有索引</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>是Set接口的实现类，具有Set的特性</p><ul><li>不能添加相同的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>)));<span class="comment">//T</span></span><br><span class="line">        System.out.println(set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>)));<span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">        System.out.println(set.add(<span class="keyword">new</span> <span class="title class_">Name</span>(<span class="string">&quot;Tom&quot;</span>)));<span class="comment">//T</span></span><br><span class="line">        System.out.println(set.add(<span class="keyword">new</span> <span class="title class_">Name</span>(<span class="string">&quot;Tom&quot;</span>)));<span class="comment">//T</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Name</span>&#123;</span><br><span class="line">        String name;</span><br><span class="line"></span><br><span class="line">        Name(String name)&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HashSet底层是HashMap，HashMap底层结构是基于（数组+链表+红黑树）</li></ul><p> 底层是一个数组，存储元素为链表的头结点，当某个 链表长度超过8(或者总元素大于12个)并且table数组总元素大于等于64个(如果链表长度超过8而table小于64，那么table自动扩容直到满足树化机制)，链表将转化为红黑树(树其实也算是一种链表结构)。</p><p>HashSet底层机制（简单概括）</p><p>整体流程</p><p>1.HashSet底层是HashMap；</p><p>2.底层是数组，添加元素需要索引而索引是基于HashCode值计算出来的Hash值（Hash值并不等于HashCode  如果想让添加元素在同一个链表中重写HashCode方法让其返回一个定值），当该索引位置不为空，那就添加到该索引位置的链表末端，如果没有直接添加；</p><p>3.如果添加索引位置存在链表，会调用equals()比较，相同丢弃，不相同添加到链表末尾；</p><ul><li>扩容机制</li></ul><p>第一次添加table数组扩容到16，默认是空数组</p><p>临界值(threshold)16*加载因子0.75&#x3D;12 ，如果table数组使用达到了临界值，会除法扩容机制</p><p>两倍扩容32</p><h3 id="LinkedHashset（继承HashSet）"><a href="#LinkedHashset（继承HashSet）" class="headerlink" title="LinkedHashset（继承HashSet）"></a>LinkedHashset（继承HashSet）</h3><ul><li>底层基于的LinkedHashMap，底层维护一个数组+双向链表（LinkedHashMap 这个双向链表基于hash表维护的，将hash表中所有元素链接成了一个链表，实现了添加存储顺序一致）</li><li>是HashSet子类</li><li>不允许添加重复元素</li><li>底层机制同HashSet同理，区别底层是维护的一个双向链表</li><li>添加顺序和取出顺序一致（因为在HashSet的基础上实现了一个双链表，每次添加数据建立一个双向链表，实现的添取一致）</li><li>默认为空，第一次添加数组table扩容到16，存放的结点是LinkedHashMap$Entry继承自HashMap$Node ，底层table数组是HashMap$Node声明的，使用了一个多态数组</li></ul><p>扩容特特性和HashSet一致区别在于，底层结构有较小的差异。</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>添加对象时要确定是否实现了Comparable接口，否则会报错；（底层有去重机制需要实现该类）</p><p>排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//TreeSet提供传入比较器的构造方法  可以实现排序</span></span><br><span class="line">    <span class="type">TreeSet</span> <span class="variable">treeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((String)o1).compareTo(((String)o2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    treeSet.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    treeSet.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    treeSet.add(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">    treeSet.add(<span class="string">&quot;Z&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(treeSet);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><ul><li>添加取出顺序一致，且可以重复添加相同的元素</li><li>每个元素有对应的顺序索引，即支持索引（底层为数组）</li><li>List有非常多的实现类 常见的Vector、LinkedList、ArrayList</li></ul><p>List常用方法（List的实现类都可以用这些方法）</p><blockquote><p>add(int index, object ele); &#x2F;&#x2F;添加元素 </p><p>addAll(int index, Collection eles); &#x2F;&#x2F;整个添加Collection接口的实现类</p><p>get(int index); &#x2F;&#x2F;获取index 位置的元素</p><p>indexOf(Object obj); &#x2F;&#x2F;在列表中查找该元素 并返回其位置 lastIndexOf(Object obj); 从末尾开始查找</p><p>Object remove(int index); &#x2F;&#x2F;移除下标index位置的元素</p><p>set(int index, Object ele); &#x2F;&#x2F;将index位置 替换为ele</p><p>subList(int fromindex, int toindex); &#x2F;&#x2F;列表切片 区间为左闭右开</p></blockquote><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList不是一个线程安全的类，如果有多线程操作不要使用可以用Vector替代</p><p>ArrayList扩容机制</p><ul><li>ArrayList 底层 维护了一个Object类型的数组elementData  源码</li></ul><p>一、使用无参构造器</p><p>transient 关键字 表示该属性不会被序列号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure><ul><li>如果创建ArrayList 使用的是无参构造器  源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; <span class="comment">// 默认elementData为空DEFAULTCAPACITY_EMPTY_ELEMENTDATA 是一个空数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次添加元素 elementData扩容10<br>后续扩容elementData为1.5赔</p><p>add(E e)方法添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e, Object[] elementData, <span class="type">int</span> s)</span> &#123; <span class="comment">//int s 为集合size 大小  </span></span><br><span class="line">        <span class="keyword">if</span> (s == elementData.length) <span class="comment">//判断当前集合是否以及满</span></span><br><span class="line">            elementData = grow(); <span class="comment">//扩容</span></span><br><span class="line">        elementData[s] = e; <span class="comment">//添加元素</span></span><br><span class="line">        size = s + <span class="number">1</span>; <span class="comment">//集合大小加1  size 是集合有多少个元素、 length才是集合长度</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\XP\AppData\Roaming\Typora\typora-user-images\image-20230103113457835.png" alt="image-20230103113457835"></p><p>当添加第11个元素时，开始扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow(<span class="type">int</span> minCapacity) &#123;<span class="comment">//minCapacity 为 11   10 + 1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity &gt; <span class="number">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> ArraysSupport.newLength(oldCapacity,</span><br><span class="line">                minCapacity - oldCapacity, <span class="comment">/* minimum growth */</span></span><br><span class="line">                oldCapacity &gt;&gt; <span class="number">1</span>           <span class="comment">/* preferred growth */</span>);</span><br><span class="line">        <span class="type">return</span> <span class="variable">elementData</span> <span class="operator">=</span> Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">elementData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>[Math.max(DEFAULT_CAPACITY, minCapacity)]; <span class="comment">//这段是使用无参构造器（无参容量为0） 时执行的扩容至10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容量为0，第一次扩容为10后续扩容15， 22</p><p>二、指定大小构造器</p><p>则初始elementData容量为指定大小</p><p>后续扩容直接扩容elementData1.5倍大小</p><p>列：指定为8，第一次扩容为12，第二次扩容18</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>线程安全 ，synchronized，因为实现了线程安全所以效率相对于ArrayList来说相对较低</p><p>底层维护一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] elementData;  </span><br></pre></td></tr></table></figure><p>扩容机制：</p><p>无参构造，初始10，第二次扩容2倍</p><p>有参构造，每次扩容按2倍扩容</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li>底层是基于双向链表和双端队列实现的</li><li>可以添加任意元素，可以为空</li><li>线程不同步</li></ul><p>小总结：</p><p>ArrayList和LinkedList比较( 链式存储结构和顺序存储结构的区别)</p><p>ArrayList 是底层维护的是一个可变数组 ，数组随机访问速度拉满， 增删就拉</p><p>LinkedList链表实现的，与ArrayList相反</p><h1 id="Map（K-V）"><a href="#Map（K-V）" class="headerlink" title="Map（K-V）"></a>Map（K-V）</h1><p>实现类继承关系</p><p><img src="C:\Users\XP\AppData\Roaming\Typora\typora-user-images\image-20230105194229297.png" alt="image-20230105194229297"></p><p>特点（K-V 键值对）：</p><ul><li><p>Map和Collection并列，都用于保存具有映射关系的数据：Key——Value（双列元素），按需使用。</p></li><li><p>Map中的key和value可以是任何引用类型的数据，并且封装到HashMap$Node对象中（HasSet也是底层维护的数组也是基于此对象）</p></li><li><p>key（可以为null）值不允许重复（重复并不会抛出异常,只会替换value值），Value允许重复（value允许为null）</p></li><li><p>Map并没实现synchronized</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Map_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(hashMap);<span class="comment">//out key=2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map接口特点：</p><p>Map的各种实现类，存放数据使用HashMap$Node这个内部类，并且这个内部类实现了一个 Entry接口（entry主要用于建立一个新映射方便操作）在底层以hashMap为例，在类中会有table和entry这两个字段，存放数据的是table,entry则是在table元素的基础上，建立一个新的关系(K-V映射关系) ；</p><p>基于entry内部类基础上（entrySet可以获取所有K-V关系），构造了两个集（Collection Set接口）KeySet (用键建立的索引) – Values (用值建立的索引），遍历Map可以使用的方法很多；</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote><p>get()；</p><p>remove()；</p><p>put()；</p><p>size();</p><p>isEmpty();</p><p>clear();</p><p>contaninsKey(); &#x2F;&#x2F;查找键是否存在</p></blockquote><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>遍历HashMap</p><p>KeySet()方法返回键的映射，返回的是一个Set对象。可以通过迭代器、增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> hashMap.keySet();<span class="comment">//keySet返回一个Set集合(Key的映射)</span></span><br><span class="line">  System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;for each&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (Object obj:set) &#123;</span><br><span class="line">      System.out.println((String) obj);</span><br><span class="line">  &#125;</span><br><span class="line">System.out.println(<span class="string">&quot;iterator遍历&quot;</span>);</span><br><span class="line">   <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">   <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">          System.out.println((String) iterator.next());</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>Values()方法  返回一个值的映射，返回类型是Set，可通过迭代器增强for 循环遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Values集&quot;</span>);</span><br><span class="line"><span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> hashMap.values();</span><br><span class="line"><span class="keyword">for</span> (Object object: values) &#123;</span><br><span class="line">    System.out.println((String)object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>entrySet()方法，返回的是一个Set集合，但类型指定为了HashMap$Entry(运行类型为Hash$Node,是Entry内部接口的实现类)，所以通过Set集合遍历返回的对象不在是Object ，而是HashMap$Entry，然后再对结点获取相应的K——V，转型比较多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> System.out.println(<span class="string">&quot;===通过Entey集===&quot;</span>);</span><br><span class="line">    <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> hashMap.entrySet();</span><br><span class="line">    iterator = entrySet.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)iterator.next();</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">&quot;-&quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;foreach&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Object obj: entrySet)&#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)obj;</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">&quot;-&quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap扩容机制"><a href="#HashMap扩容机制" class="headerlink" title="HashMap扩容机制"></a>HashMap扩容机制</h3><p>扩容机制与HashSet同理</p><ul><li>底层维护的也是一个HashMap$Node类型的table数组，默认为null</li><li>创建对象时，加载因子loadfactoy初始化为0.75（用来算table表临界值）</li><li>添加元素，通过key的哈希值计算其table索引，判断索引位置是否为null，是直接添加；如果该位置不为空表示该位置存在链表结构（可能为树形结构）将新素key值与结构中元素比较如果相同就并将value值替换为新元素的value值；如果结构中不存在，则需添加，判断其结构类型链表||树形结构，再将其添加，如果发现容量不够则除法扩容机制；(底层逻辑)</li><li>初始为null，第一次添加扩容16，临界值(length * loadfactoy &#x3D;&gt; 16 * 0.75 &#x3D; 12  当整个table表中总元素个数&gt;&#x3D;12 触发扩容机制）</li><li>扩容机制触发，容量扩展到原来的2倍，临界值也为原来两倍</li><li>树形化，table表中总元素&gt;&#x3D;12    &amp;&amp;    table数组的长度&gt;&#x3D; 64 ，会将链式结构树化；</li></ul><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><ul><li>存放元素：K-V </li><li>键值都不能为空，如果为null 会抛出NullPointerException</li><li>sysnchronizde线程安全</li></ul><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li><p>底层维护了一个元素为HashTable$Entry 数组table，初始化大小为11</p></li><li><p>threshold 临界值8     （11 * loadfactoy &#x3D; 8）</p></li><li><p>扩容触发条件，当添加到第9个时会执行扩容(是通过容量总大小*threshold加载因子 得到的 11 * 0.75 &#x3D; 8 超过8就会执行扩容 )，以此类推</p></li><li><p>扩容机制，oldcapacity * 2 + 1</p></li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>提供了一个Comparator，可以实现排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//TreeMap提供传入比较器的构造方法  可以实现排序</span></span><br><span class="line">    <span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;<span class="comment">//o1 类型是key的类型</span></span><br><span class="line">            <span class="keyword">return</span> ((String)o1).compareTo((String) o2);<span class="comment">//按字典排序</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    treeMap.put(<span class="string">&quot;a&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    treeMap.put(<span class="string">&quot;b&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    treeMap.put(<span class="string">&quot;c&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    treeMap.put(<span class="string">&quot;d&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(treeMap);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>继承自Hashtable ，是Map接口的实现类，数据元素也是键值对形式。</p><p>.properties 一般是配置文件后缀</p><ul><li>键和值都不能为空</li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>需要什么使用什么集合类型，取决于问题特点，按需选取</p><p>Collection接口 （适用于单列 ，一组对象）</p><ul><li>允许重复-&gt;List接口</li></ul><p>​List接口实现类总体上来有两种结构  链式(LinkedList)，和数组结构(ArrayList)根据需求选择对于结构</p><p>​增删多久选择链式结构的LinkedList</p><p>​查找多ArrayList</p><p>​考虑线程Vector</p><ul><li>不允许重复-&gt;Set接口</li></ul><p>​无序HashSet</p><p>​排序TreeSet</p><p>​插入取出顺序一致LinkedHashSet</p><p>Map接口 （双列，键值对形式）</p><ul><li>键无序：HashMap[jdk8：数组+链表+红黑树]</li><li>键排序：TreeMap</li><li>存取顺序一致LinkedHashMap</li><li>读取文件Properties</li></ul><h1 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h1><p>提供Set，List，Map等集合 一些操作方法</p><ul><li>排序操作均为静态方法</li></ul><p>常用方法</p><p>List集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    arrayList.add(<span class="string">&quot;dasd&quot;</span>);</span><br><span class="line">    arrayList.add(<span class="string">&quot;asdasd&quot;</span>);</span><br><span class="line">    arrayList.add(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">    arrayList.add(<span class="string">&quot;gds&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sort 排序 接收的是一个List 实现类参数</span></span><br><span class="line">    Collections.sort(arrayList, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o1 <span class="keyword">instanceof</span> String))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">            <span class="keyword">return</span> ((String)o1).length() - ((String)o2).length();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//reverse() 反序</span></span><br><span class="line">    Collections.reverse(arrayList);</span><br><span class="line">    System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shuffle() 随机排序</span></span><br><span class="line">    Collections.shuffle(arrayList);</span><br><span class="line">    System.out.println(arrayList);</span><br><span class="line">    <span class="comment">//swap（） 替换操作index 0 和 1位置元素相互替换</span></span><br><span class="line">    Collections.swap(arrayList, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    System.out.println(arrayList);</span><br><span class="line">    <span class="comment">//copy(dest, src) 拷贝   dest size 要大于等于 src</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">            arrayList1.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.copy(arrayList1, arrayList);</span><br><span class="line">        System.out.println(arrayList1);</span><br><span class="line">  <span class="comment">//relaceAll(List list, Obejct old, Object new)</span></span><br><span class="line">        Collections.replaceAll(arrayList, <span class="string">&quot;as&quot;</span>, <span class="string">&quot;替换&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/2022/11/20/Programming%20Language/Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/11/20/Programming%20Language/Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="一、内部类（局部内部类，匿名内部类，成员内部类，静态内部类）"><a href="#一、内部类（局部内部类，匿名内部类，成员内部类，静态内部类）" class="headerlink" title="一、内部类（局部内部类，匿名内部类，成员内部类，静态内部类）"></a>一、内部类（局部内部类，匿名内部类，成员内部类，静态内部类）</h2><ul><li>局部内部类</li></ul><p>1.局部内部类定义在外部类的局部位置，通常是方法</p><p>2.可以访问外部类所有成员，包含私有</p><p>3.不能添加访问修饰符，但是可以final修饰（修饰后不可被继承）</p><p>4.作用域：当前块作用域</p><p>使用方法访问方法</p><p>1.内部类-&gt;直接访问外部类成员</p><p>2.外部类-&gt;通过方法 实例化内部类 并在方法中实用内部类</p><p>3.外部其它类！！不能访问 局部内部类！！</p><p>4.内部类成员和外部类成员重名  可以使用外部类名.this.成员  访问外部成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer02</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;外部类&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outerfunction</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//局部内部类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;局部内部类&quot;</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">                System.out.println(Outer02.<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">//代码块</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//局部内部类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;局部内部类&quot;</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">                System.out.println(Outer02.<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer02</span> <span class="variable">outer02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer02</span>();</span><br><span class="line">        outer02.outerfunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名内部类</li></ul><p>访问方法和局部类似</p><p>1.定义在外部类局部位置</p><p>2.没有类名</p><p>3.同时还是一个对象</p><p>匿名内部类只能使用一次，简化开发</p><blockquote><p>匿名内部类的语法</p><p>new 类名or接口{</p><p>}； 大括号不可少  这是识别匿名的根据 ，如果没有就变成了普通类构造实例化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer03</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;匿名内部类&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        <span class="type">Inter</span> <span class="variable">inter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inter</span>() &#123; <span class="comment">//只能运行一次  编译类型为:Inter 运行类型为:Outer03$1  inter 类名实际为 外部类$1 它在底层类是有名称的</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Info</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(Outer03.<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        inter.Info();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer03</span> <span class="variable">outer03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer03</span>();</span><br><span class="line">        outer03.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类的匿名内部类</p><p>左 编译类型   右 运行类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Inter</span> <span class="variable">inter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inter</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Info</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Outer03.<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接访问 不用返回</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Inter</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Info</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Outer03.<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.Info();</span><br></pre></td></tr></table></figure><p>匿名最佳应用，作为方法实参传递时最为实用！</p><ul><li><p>成员内部类</p><p>成员内部类是定义在外部类的成员位置（成员内部类 本质上是一个成员  类）</p></li></ul><p>访问权限：对其适用， 成员内部类可以访问外部类中的private权限的成员。</p><p>作用域：块作用域   -           整个类体，内部类可以直接访问外部类中的成员，private访问修饰的也能访问</p><p>外部类：1使用内部类，和普通类一样要实例化内部类，再访问</p><p>定义一个含成员内部类 的 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.Inner_showInfo();<span class="comment">//外部类中的方法  实例化了内部类并调用了内部类中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;测试&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    name+age</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Inner_showInfo</span><span class="params">()</span>&#123;<span class="comment">//通过成员方法实例化内部类</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用内部类：</p><p>方法1：在外部类中创建一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">Inner_showInfo</span><span class="params">()</span>&#123;<span class="comment">//通过成员方法实例化内部类</span></span><br><span class="line">    <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    inner.showInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：</p><p>在外部类中创建一个内部类对象，需要在外部类这个命名空间中创建这个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();<span class="comment">//还一个定义get方法返回Inner对象outer.getInner()</span></span><br><span class="line">    </span><br><span class="line">        inner.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果成员内部类中的成员和外部类成员重名，内部类会覆盖外部类，可以使用       外部类.this引用访问同名的成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//内部类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;内部类测试&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name); </span><br><span class="line">        System.out.println(Outer.<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态内部类</li></ul><p>内部类访问-&gt;权限：能访问所有外部类中的静态成员或方法</p><p>外部类访问-&gt;静态内部类，创建外部类对象再访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer1</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;外部类&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">stat_name</span> <span class="operator">=</span> <span class="string">&quot;静态属性&quot;</span>;</span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(stat_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部类访问静态内部类</p><p>方式1：直接访问 注意内部类访问修饰符不能为private</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//这里并没有创建一个对象  而是使用的静态类  把Outer看成一个命名空间 就很好理解内部类了</span></span><br><span class="line">    Outer1.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer1</span>.Inner(); <span class="comment">// 非静态访问内部类Outer.Inner inner = outer.new Inner();</span></span><br><span class="line">    inner.say();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：在外部类中返回内部静态类</p><p>静态内部类中命名与外部类冲突，  使用 外部类名.name    如果非静态类 则要在中间加入this引用</p><h2 id="二、匿名内部类"><a href="#二、匿名内部类" class="headerlink" title="二、匿名内部类"></a>二、匿名内部类</h2><ol><li>本质上还是一个类</li><li>是一个内部类</li><li>该类没有名字(编译器会给该类一个代号)</li></ol><ul><li><p>传统思路，一个普通类继承了接口类，需要实例化对象我们才能调用接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">InterFace</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Prt</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重写了函数式接口的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//传统思路  用类-》实现抽象类中方法-》实例化类并且调用方法</span></span><br><span class="line">        <span class="type">InterFace</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        m.Prt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InterFace</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Prt</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当我们只是想单纯调用接口中的Prt方法，上述方法会显得非常冗余</p></li></ul><p>​  此时我们就可以采用匿名类，来简化上述代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InterFace</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Prt</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//这里并没有实例化，用到了匿名类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InterFace</span>()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Prt</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;helleworld&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;.Prt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多内部中多可方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"><span class="comment">//@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Prt</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Prt2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里并没有实例化，用到了匿名类</span></span><br><span class="line">        <span class="type">InterFace</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterFace</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Prt</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;helleworld&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Prt2</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;只是第二方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        a.Prt();</span><br><span class="line">        a.Prt2();</span><br><span class="line"><span class="comment">//    我可以是用getClass() 方法获取这个类名</span></span><br><span class="line">        System.out.println(a.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然匿名内部类没有名字，  但系统会给我自动生产一个类名<br>上述是在Main内种的内部类 所以该匿名内部类中的名字为class Main$1   如果还有第二个那么他的名字为Main$2</p><hr><p>注意事项：</p><blockquote><p>1、使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。</p><p>2、匿名内部类中是不能定义构造函数的。</p><p>3、匿名内部类中不能存在任何的静态成员变量和静态方法。</p><p>4、匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。</p><p>5、匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</p></blockquote><p>匿名内部类使用的最佳环境，当一个函数需要传入一个类时，并且只使用了该类的极少的方法，我们可以使用这种方法来简化。</p><p>小练习</p><p>数据库链接 oracle 、mysql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IDAO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">upd</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sel</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要链接的数据库 1.mysql 2.oracle&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> i.nextInt();</span><br><span class="line">        </span><br><span class="line">        IDAO idao;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            idao = <span class="keyword">new</span> <span class="title class_">MySql</span>();</span><br><span class="line">            idao.connect();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            idao = <span class="keyword">new</span> <span class="title class_">Oracle</span>();</span><br><span class="line">            idao.connect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractDao</span> <span class="keyword">implements</span> <span class="title class_">IDAO</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更改数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySql</span> <span class="keyword">extends</span> <span class="title class_">AbstractDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链接Mysql数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Oracle</span> <span class="keyword">extends</span> <span class="title class_">AbstractDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链接Oracle数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、成员变量的默认值"><a href="#三、成员变量的默认值" class="headerlink" title="三、成员变量的默认值"></a>三、成员变量的默认值</h2><ol><li><p>Java、c、c++ 这类语言中局部变量声明定义后必须要初始化，否则会出错</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Init</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">    java: 可能尚未初始化变量i</span><br></pre></td></tr></table></figure></li><li><p>在类中，你为给定其值时编译器会自动给你赋值，(java类 c结构体 c++类 中都有这类特性)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Init</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">short</span> b;</span><br><span class="line">    <span class="type">long</span> c;</span><br><span class="line">    String d;</span><br><span class="line">    <span class="type">boolean</span> e;</span><br><span class="line">    <span class="type">char</span> f;</span><br><span class="line">    <span class="type">double</span> g;</span><br><span class="line">    <span class="type">float</span> h;</span><br><span class="line">    Chlid i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//默认值</span></span><br><span class="line">        <span class="type">Init</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Init</span>();</span><br><span class="line">        System.out.println(a.a);</span><br><span class="line">        System.out.println(a.b);</span><br><span class="line">        System.out.println(a.c);</span><br><span class="line">        System.out.println(a.d);</span><br><span class="line">        System.out.println(a.e);</span><br><span class="line">        System.out.println(a.f);</span><br><span class="line">        System.out.println(a.g);</span><br><span class="line">        System.out.println(a.i);</span><br><span class="line">        System.out.println(a.i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chlid</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述展示了大部分成员变量的默认值</p></li></ol><h2 id="四、object"><a href="#四、object" class="headerlink" title="四、object"></a>四、object</h2><h3 id="1-object-是一个类"><a href="#1-object-是一个类" class="headerlink" title="1.object 是一个类"></a>1.object 是一个类</h3><p>所有类默认继承了object，你定义一个空类，你会发现，类可以调用一些你从来没有定义过的方法</p><h3 id="2-equals方法-、-x3D-x3D-的区别"><a href="#2-equals方法-、-x3D-x3D-的区别" class="headerlink" title="2.equals方法 、&#x3D;&#x3D;  的区别"></a>2.equals方法 、&#x3D;&#x3D;  的区别</h3><ul><li><p>equals 是object 提供的判断一个对象是否等于另一个对象 </p></li><li><p>&#x3D;&#x3D; 用于判断两个内存地址的值是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equals</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;2333&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;2333&quot;</span>;</span><br><span class="line">        System.out.println(a == b);</span><br><span class="line">        System.out.println(a.equals(b));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>两种判断是不一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equals</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;2333&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;2333&quot;</span>);</span><br><span class="line">        System.out.println(a == b);</span><br><span class="line">        System.out.println(a.equals(b));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><p> a b 他们值都相同，但是使用equals和&#x3D;&#x3D;判断会得到两种不同结果呢？</p><p>如果熟悉其他编程语言，对于这个问题可能理解的很快</p></li></ul><p>在程序里最常用的数据类型是字符串，如果有大量相同的字符串会极大的占据空间，那么我们可以只开辟一个字符串的空间，让其他相同值的变量指向同一块内存地址，从而优化内存空间</p><ul><li><p>1中 两个a b 都是同一个内存地址所以&#x3D;&#x3D;  和  equals判断都为true</p></li><li><p>2中 注意我们使用了new 开辟了两块空间让对象a，b分别指向，又因为相同字符串在内存中只会存储一份a  和b的实际字符串数值还是会指向 内存中同一块地址</p><ul><li>所以对象a 和 对象b  本身是两个不同地址的对象   &#x3D;&#x3D;  只判断其地址相等与否 所以为false</li><li>而equals 判断的是其值得地址是否相等 所以为true</li></ul></li></ul><h3 id="3-判断类是否相等"><a href="#3-判断类是否相等" class="headerlink" title="3.判断类是否相等"></a>3.判断类是否相等</h3><p>显然用&#x3D;&#x3D; 判断 是不行的  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个猫类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小黑&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小黑&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//判断其颜色是否相等</span></span><br><span class="line">        System.out.println(a == b);</span><br><span class="line">        System.out.println(a.equals(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">    <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>重构object 中的equals 自定义条件来判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个猫类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小黑&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小黑&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(a.equals(b));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重写了equals方法</span></span><br><span class="line"><span class="comment">//下面是为了熟练 继承多态 大可不必这么写</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//多余</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;<span class="comment">//Object obj  改为  Cat</span></span><br><span class="line">        <span class="comment">//这个按断就不要这么写了 只是用加深理解   this.name = obj.name</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.name.equals(  (  (Cat)obj  ).name)  )</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>在对字符串进行比较时候我们要使用object 提供的 equals()  来比较</p><p>基础数据类型用 &#x3D;&#x3D;</p></blockquote><h3 id="4-toString方法"><a href="#4-toString方法" class="headerlink" title="4.toString方法"></a>4.toString方法</h3><p>打印输出类的相关信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aaa.bbb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小张&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(a.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line"> com.aaa.bbb.Person@7ef20235</span><br><span class="line"> com.aaa.bbb.Person@7ef20235   </span><br></pre></td></tr></table></figure><p>默认     包+类 @内存地址</p><ul><li><p>显然这种输出我们是不满意的，我可以重写该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aaa.bbb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小张&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(a.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//idea 自动生成重写的tostring（）方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">    Person&#123;name=<span class="string">&#x27;小张&#x27;</span>, age=<span class="number">21</span>&#125;</span><br><span class="line">    Person&#123;name=<span class="string">&#x27;小张&#x27;</span>, age=<span class="number">21</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="五、instanceof-关键字"><a href="#五、instanceof-关键字" class="headerlink" title="五、instanceof 关键字"></a>五、instanceof 关键字</h2><p>判断一个对象是不是否是某个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">ani</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">ani2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="comment">//判断ani是否是一只猫</span></span><br><span class="line">        <span class="keyword">if</span> (ani <span class="keyword">instanceof</span> Animal)</span><br><span class="line">            System.out.println(<span class="string">&quot;这是动物&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ani <span class="keyword">instanceof</span> Cat)</span><br><span class="line">            System.out.println(<span class="string">&quot;这是一只猫&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ani2 <span class="keyword">instanceof</span> Animal)</span><br><span class="line">            System.out.println(<span class="string">&quot;这是动物&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ani2 <span class="keyword">instanceof</span> Cat)</span><br><span class="line">            System.out.println(<span class="string">&quot;这是一只猫&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;但不是猫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、参数传递"><a href="#六、参数传递" class="headerlink" title="六、参数传递"></a>六、参数传递</h2><p>对于参数传递，如果是第一次了解，确实抽象。好在我之前有学过C++ 理解起来就很容易，一下是自己的一些见解</p><p>首先对于参数传递问题，我们可以了解下堆栈的机制和块作用域，我就拿块作用域来说吧，{   } ( ) 括号中的代码就是一个块作用域，在括号里面声明的变量，一旦运行结束 里面声明的变量什么的都会被销毁(栈回收，类会随着程序结束而回收)，也就是我们称作的局部变量，它的什么周期只限于在他运行时候。理解完  下面的就会容易很多</p><h3 id="1-值传递"><a href="#1-值传递" class="headerlink" title="1.值传递"></a>1.值传递</h3><p>基础类型传递，来看看下面代码</p><ul><li>一个基础的int型 变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        i = <span class="number">20</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        change(i);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">    <span class="number">20</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>我们发现i在change 方法里是20  但是main方法里的i还是10</p><p>因为java是值传递  i这个变量的值原本为10 传入 到change 形参i2 这个形参是只作用于chage 这个方法内，他和这个块外的i不是同一个变量，只是值相同罢了。</p><p>所以chage方法内 赋值的20 一旦chage运行结束这个i2 变量就消失了 </p><hr><ul><li>实例化了一个有两个成员变量的对象，并改变了提供的方法中改变了其值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    String s;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo01</span><span class="params">(String s, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">        <span class="built_in">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Demo01 n)</span>&#123;</span><br><span class="line">        n = <span class="keyword">new</span> <span class="title class_">Demo01</span>(<span class="string">&quot;333&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo01</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo01</span>(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        n.change(n);</span><br><span class="line">        System.out.println(n.i);</span><br><span class="line">        System.out.println(n.s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">    <span class="number">10</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>这个很好理解，形参n是先将n的值获取了   chage方法内使用new 为 n 在堆中开辟了另一块区域  但是这个新的区域也会随着 change生命的结束 而被回收 </p><h3 id="2-引用传递-—-地址传递"><a href="#2-引用传递-—-地址传递" class="headerlink" title="2.引用传递  —  (地址传递)"></a>2.引用传递  —  (地址传递)</h3><p>引用传递，Java传递本质是依然是值传递，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    String s;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo01</span><span class="params">(String s, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">        <span class="built_in">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Demo01 n1)</span>&#123;</span><br><span class="line">        n1.i = <span class="number">20</span>;</span><br><span class="line">        n1.s = <span class="string">&quot;321&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo01</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo01</span>(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        n.change(n);</span><br><span class="line">        System.out.println(n.i);</span><br><span class="line">        System.out.println(n.s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">    <span class="number">20</span></span><br><span class="line"><span class="number">321</span></span><br></pre></td></tr></table></figure><p>值改变了</p><p>形参是对象时，这个对象和基础数据类型，是不一样的。对象中的值为指向堆中的地址，而基本数据类型的值就是他本身，所以一个是地址一个是值，他们都是值。。。</p><ul><li>基础数据类型传入的是基础数据类型本身的值；</li><li>而对象传入时，对象本身的值是指向其在堆空间地址</li></ul><p>明白上述两点，我们传入了n这个对象的地址， 通过n1这个新的变量来访问这片空间，并且改变了这个空间中的值。随着change函数的结束n1这个变量被销毁了。但是n这个变量，因为主函数main还在运行，所以依旧存在。</p><blockquote><p>总结：java是值传递</p></blockquote><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ol><li><p>@Funcitonallnterface(新版本)</p><p>加上改注解，编译器会默认这个类是一个函数式接口，只能存在一个类方法，如果存在两个方法编译器会报错</p><p>下面编译器会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">One_method</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Pt</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//    public void p();     不能声明第二方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 基础2 225623</title>
      <link href="/2022/11/20/MySql/"/>
      <url>/2022/11/20/MySql/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql"><a href="#MySql" class="headerlink" title="MySql "></a>MySql </h1><h2 id="1-认识Mysql"><a href="#1-认识Mysql" class="headerlink" title="1.认识Mysql "></a>1.认识Mysql </h2><ol><li>MySql 三层结构</li></ol><ul><li><p>DBMS 数据库管理系统</p><ul><li>DataBase1<ul><li>表</li><li>表2…..</li></ul></li><li>DataBase2<ul><li>表1</li><li>表2…..</li></ul></li><li>DataBase……</li></ul></li><li><p>MySql 不区分大小写</p></li></ul><p>我们所说的数据库包含上述三层结构，当然除了上述内容外还有些其他功能结构。</p><p>客户端——&gt;    通过port 3306（默认） —–&gt;数据库（数据存储的各种数据）</p><p>数据库分为；</p><ol><li><p>关系型数据库</p><p> 通过表和表之间，行和列之间的关系进行数据的存储</p></li><li><p>非关系型数据库</p><p>Redis，MongDB</p></li></ol><h2 id="2-创建一个数据库"><a href="#2-创建一个数据库" class="headerlink" title=" 2.创建一个数据库"></a> 2.创建一个数据库</h2><ul><li>CHARACTER SET：指定数据采用的字符集如果不指定 默认为uft_8</li><li>COLLATE：指定数据可字符集的校对规则(常用utf_bin【严格区分大小写】、utf8_general_ci  【不区大小写 默认】)</li></ul><hr><p>注意:</p><p>​校对 不区分大小写，如果表中数据存在相同字段但大小写不同，只会显示一条结果；</p><hr><blockquote><p>CREATE DATABASE [IF NOT EXISTS] name CHARACTER SET 字符集名称 COLLATE 校对规则</p><p>[IF NOT EXISTS] 如果DB存在不会执行</p><p>省略后如果创建书库存在则会报错，</p></blockquote><p>创建数据库&amp;删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#创建数据库  不指定字符集 和 校对规则 则默认 一般为utf8(mb3)  新版的utf8mb4</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db</span><br><span class="line"></span><br><span class="line">#删除数据库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE db</span><br><span class="line"></span><br><span class="line">#创建一个使用utf8mb4 的字符集 的 hsp_da02数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_da02 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4</span><br><span class="line"></span><br><span class="line">#创建一个使用utf8mb4  校对规则为utf8mb4_bin 不区分大小写</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_da03 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#显数DB</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br><span class="line">#显示创建的数据库语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE db_name</span><br><span class="line">#删除 DB</span><br><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] name </span><br></pre></td></tr></table></figure><h2 id="3-备份数据库"><a href="#3-备份数据库" class="headerlink" title="3.备份数据库"></a>3.备份数据库</h2><p>Dos命令行</p><p>​备份数据库</p><blockquote><p>mysqldump -u user_name -p -B DB1 DB2 … &gt; file_name.sql     &#x2F;&#x2F; -B 必须大写</p></blockquote><p>​备份数据库中的表</p><blockquote><p>mysqldump -u user_name -p DB1 tb1 tb2 … &gt; file_name.sql</p></blockquote><p>注意：</p><ol><li>添加环境</li><li>不要在sql控制台输入 会报错</li><li>-p 后密码不要输入  回车后输入</li></ol><p>恢复数据库</p><blockquote><p>Source file_name</p></blockquote><hr><h2 id="4-创建表"><a href="#4-创建表" class="headerlink" title="4.创建表"></a>4.创建表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE (</span><br><span class="line">name datatype,</span><br><span class="line">    name2 datatype,</span><br><span class="line">...</span><br><span class="line">)character set 字符集 collate 校对规则 engine 引擎</span><br><span class="line"></span><br><span class="line">#character set 默认与数据库一致</span><br><span class="line">#collate 默认与数据库一致</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一张员工基本信息的表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `emp` (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span> (<span class="number">32</span>),</span><br><span class="line">  sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">  birthday <span class="type">DATE</span>,</span><br><span class="line">  entry_date DATETIME,</span><br><span class="line">  job <span class="type">VARCHAR</span> (<span class="number">32</span>),</span><br><span class="line">  salary <span class="type">DECIMAL</span> (<span class="number">9</span>, <span class="number">4</span>),</span><br><span class="line">  `resume` TEXT</span><br><span class="line">) CHARSET utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin ENGINE INNODB ;</span><br><span class="line"></span><br><span class="line">#添加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp`</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">008</span>, <span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2050-10-10&#x27;</span>, <span class="string">&#x27;2050-10-10&#x27;</span>, <span class="string">&#x27;工作&#x27;</span>, <span class="number">10.2323</span>, <span class="string">&#x27;描述&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>创建表示注意确认当前是在那个数据库</p><h2 id="5-修改表"><a href="#5-修改表" class="headerlink" title="5.修改表"></a>5.修改表</h2><p>修改表的基本操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#添加列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line"><span class="keyword">ADD</span> (<span class="keyword">column</span> datatype [<span class="keyword">DEFAULT</span> expr]</span><br><span class="line">....);</span><br><span class="line">#修改列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line">MODIFY colum datatype [<span class="keyword">DEFAULT</span> exper];</span><br><span class="line"></span><br><span class="line">#删除列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">column</span>;</span><br><span class="line"></span><br><span class="line">#查看表的结构</span><br><span class="line"><span class="keyword">desc</span> tablename</span><br><span class="line"></span><br><span class="line">#修改表名</span><br><span class="line">Rename <span class="keyword">table</span> tablename <span class="keyword">to</span> New_tablename</span><br><span class="line"></span><br><span class="line">#修改表的字符集</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="type">character</span> <span class="keyword">set</span> 字符集;</span><br><span class="line"></span><br><span class="line">#修改字段名称及其默认值</span><br></pre></td></tr></table></figure><ul><li><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">-- 创建一张员工基本信息的表</span><br><span class="line">CREATE TABLE `employee` (</span><br><span class="line">  id INT,</span><br><span class="line">  `name` VARCHAR (32),</span><br><span class="line">  sex CHAR(1),</span><br><span class="line">  birthday DATE,</span><br><span class="line">  entry_date DATETIME,</span><br><span class="line">  job VARCHAR (32),</span><br><span class="line">  salary DECIMAL (9, 4),</span><br><span class="line">  `resume` TEXT</span><br><span class="line">) CHARSET utf8mb4 COLLATE utf8mb4_bin ENGINE INNODB ;</span><br><span class="line"></span><br><span class="line">#增加一个字段 （列）iamge</span><br><span class="line">ALTER TABLE employee</span><br><span class="line">ADD image VARCHAR(32) NOT NULL</span><br><span class="line">DEFAULT &#x27;&#x27;;</span><br><span class="line">#增加多个字段</span><br><span class="line">#增加一个字段 （列）</span><br><span class="line">ALTER TABLE employee </span><br><span class="line">  ADD (</span><br><span class="line">    image2 VARCHAR (32) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">    image3 VARCHAR (32) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">  ) ;</span><br><span class="line"></span><br><span class="line">-- 查询表中字段信息</span><br><span class="line">DESC employee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#修改列中的数据类型 默认改为not null 必须给定一个默认值</span><br><span class="line">-- change 可以替换 modify</span><br><span class="line">ALTER TABLE employee </span><br><span class="line">  MODIFY `name` VARCHAR (33)NULL,</span><br><span class="line">  MODIFY `sex` VARCHAR(1) NOT NULL DEFAULT &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除表中多列</span><br><span class="line">ALTER TABLE employee</span><br><span class="line">DROP image2,</span><br><span class="line">DROP image,</span><br><span class="line">DROP image3;</span><br><span class="line"></span><br><span class="line">#修改表名称</span><br><span class="line">RENAME TABLE employee TO emp;</span><br><span class="line"></span><br><span class="line">#修改表的字符集和校对</span><br><span class="line">ALTER TABLE emp CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</span><br><span class="line"></span><br><span class="line">#修改列中的数据类型</span><br><span class="line">ALTER TABLE emp</span><br><span class="line">CHANGE `name` `user_name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
